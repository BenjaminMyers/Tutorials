'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getVersionAsync = exports.addToPathAsync = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var addToPathAsync = exports.addToPathAsync = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (isPlatformSupported()) {
              _context.next = 2;
              break;
            }

            return _context.abrupt('return');

          case 2:

            process.env.DYLD_LIBRARY_PATH = Binaries.OSX_SOURCE_PATH;
            _context.next = 5;
            return Binaries.addToPathAsync('watchman');

          case 5:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function addToPathAsync() {
    return _ref.apply(this, arguments);
  };
}();

var getVersionAsync = exports.getVersionAsync = function () {
  var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2() {
    var result, watchmanVersion;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (isPlatformSupported()) {
              _context2.next = 2;
              break;
            }

            return _context2.abrupt('return', null);

          case 2:
            // TODO: Use `watchman version` here and add a timeout
            // version is more correct, but will sometimes hang
            result = void 0;
            _context2.prev = 3;
            _context2.next = 6;
            return (0, _spawnAsync2.default)('watchman', ['--version']);

          case 6:
            result = _context2.sent;
            _context2.next = 12;
            break;

          case 9:
            _context2.prev = 9;
            _context2.t0 = _context2['catch'](3);
            return _context2.abrupt('return', null);

          case 12:
            watchmanVersion = _lodash2.default.trim(result.stdout);
            return _context2.abrupt('return', watchmanVersion);

          case 14:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this, [[3, 9]]);
  }));

  return function getVersionAsync() {
    return _ref2.apply(this, arguments);
  };
}();

exports.isPlatformSupported = isPlatformSupported;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _spawnAsync = require('@exponent/spawn-async');

var _spawnAsync2 = _interopRequireDefault(_spawnAsync);

var _Binaries = require('./Binaries');

var Binaries = _interopRequireWildcard(_Binaries);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isPlatformSupported() {
  return process.platform === 'darwin';
}
//# sourceMappingURL=__sourcemaps__/Watchman.js.map
