'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDeviceInfoAsync = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _uploadLogsAsync = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(info) {
    var user, username, exponentHome, infoJsonFile, tempDir, archivePath, settingsJsonFile, settingsJson, file, form, response;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return User.getCurrentUserAsync();

          case 2:
            user = _context.sent;
            username = user ? user.username : 'anonymous';

            // write info to file

            exponentHome = _UserSettings2.default.dotExponentHomeDirectory();
            infoJsonFile = new _jsonFile2.default(_path2.default.join(exponentHome, 'debug-info.json'));
            _context.next = 8;
            return infoJsonFile.writeAsync(info);

          case 8:

            // copy files to tempDir
            tempDir = _path2.default.join(Env.home(), username + '-diagnostics');
            archivePath = _path2.default.join(exponentHome, 'diagnostics.tar.gz');
            _context.next = 12;
            return Binaries.ncpAsync(exponentHome, tempDir, {
              filter: function filter(filename) {
                if (filename.includes('diagnostics') || filename.includes('starter-app-cache') || filename.includes('android-apk-cache') || filename.includes('ios-simulator-app-cache')) {
                  return false;
                } else {
                  return true;
                }
              }
            });

          case 12:
            _context.prev = 12;
            settingsJsonFile = new _jsonFile2.default(_path2.default.join(tempDir, _UserSettings2.default.SETTINGS_FILE_NAME));
            _context.next = 16;
            return settingsJsonFile.readAsync();

          case 16:
            settingsJson = _context.sent;

            settingsJson.accessToken = 'redacted';
            _context.next = 20;
            return settingsJsonFile.writeAsync(settingsJson);

          case 20:
            _context.next = 25;
            break;

          case 22:
            _context.prev = 22;
            _context.t0 = _context['catch'](12);

            console.error(_context.t0);

          case 25:
            _context.next = 27;
            return (0, _tar2.default)().compress(tempDir, archivePath);

          case 27:
            _rimraf2.default.sync(tempDir);

            // upload
            file = _fs2.default.createReadStream(archivePath);
            form = new _formData2.default();

            form.append('archive', file);

            _context.next = 33;
            return _Api2.default.callMethodAsync('uploadDiagnostics', [{}], 'put', form);

          case 33:
            response = _context.sent;
            return _context.abrupt('return', response.url);

          case 35:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this, [[12, 22]]);
  }));

  return function _uploadLogsAsync(_x) {
    return _ref.apply(this, arguments);
  };
}();

/* eslint-disable prefer-template */
// From http://stackoverflow.com/questions/15900485/correct-way-to-convert-size-in-bytes-to-kb-mb-gb-in-javascript


/* eslint-enable prefer-template */

var getDeviceInfoAsync = exports.getDeviceInfoAsync = function () {
  var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var info, whichCommand, result, _result, _result2, _result3, _result4, _result5, _result6, _result7, _result8, _result9, _result10;

    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            info = {};
            _context2.next = 3;
            return Binaries.sourceBashLoginScriptsAsync();

          case 3:
            whichCommand = process.platform === 'win32' ? 'where' : 'which';
            _context2.prev = 4;
            _context2.next = 7;
            return (0, _spawnAsync2.default)('node', ['--version']);

          case 7:
            result = _context2.sent;

            info.nodeVersion = _lodash2.default.trim(result.stdout);
            _context2.next = 13;
            break;

          case 11:
            _context2.prev = 11;
            _context2.t0 = _context2['catch'](4);

          case 13:
            _context2.prev = 13;
            _context2.next = 16;
            return (0, _spawnAsync2.default)(whichCommand, ['node']);

          case 16:
            _result = _context2.sent;

            info.nodePath = _lodash2.default.trim(_result.stdout);
            _context2.next = 22;
            break;

          case 20:
            _context2.prev = 20;
            _context2.t1 = _context2['catch'](13);

          case 22:
            _context2.prev = 22;
            _context2.next = 25;
            return (0, _spawnAsync2.default)('npm', ['--version']);

          case 25:
            _result2 = _context2.sent;

            info.npmVersion = _lodash2.default.trim(_result2.stdout);
            _context2.next = 31;
            break;

          case 29:
            _context2.prev = 29;
            _context2.t2 = _context2['catch'](22);

          case 31:
            _context2.prev = 31;
            _context2.next = 34;
            return (0, _spawnAsync2.default)(whichCommand, ['npm']);

          case 34:
            _result3 = _context2.sent;

            info.npmPath = _lodash2.default.trim(_result3.stdout);
            _context2.next = 40;
            break;

          case 38:
            _context2.prev = 38;
            _context2.t3 = _context2['catch'](31);

          case 40:
            _context2.prev = 40;
            _context2.next = 43;
            return Watchman.getVersionAsync();

          case 43:
            info.watchmanVersion = _context2.sent;
            _context2.next = 48;
            break;

          case 46:
            _context2.prev = 46;
            _context2.t4 = _context2['catch'](40);

          case 48:
            _context2.prev = 48;
            _context2.next = 51;
            return (0, _spawnAsync2.default)(whichCommand, ['watchman']);

          case 51:
            _result4 = _context2.sent;

            info.watchmanPath = _lodash2.default.trim(_result4.stdout);
            _context2.next = 57;
            break;

          case 55:
            _context2.prev = 55;
            _context2.t5 = _context2['catch'](48);

          case 57:
            _context2.prev = 57;
            _context2.next = 60;
            return (0, _spawnAsync2.default)('adb', ['version']);

          case 60:
            _result5 = _context2.sent;

            info.adbVersion = _lodash2.default.trim(_result5.stdout);
            _context2.next = 66;
            break;

          case 64:
            _context2.prev = 64;
            _context2.t6 = _context2['catch'](57);

          case 66:
            _context2.prev = 66;
            _context2.next = 69;
            return (0, _spawnAsync2.default)(whichCommand, ['adb']);

          case 69:
            _result6 = _context2.sent;

            info.adbPath = _lodash2.default.trim(_result6.stdout);
            _context2.next = 75;
            break;

          case 73:
            _context2.prev = 73;
            _context2.t7 = _context2['catch'](66);

          case 75:

            info.path = process.env.PATH;
            info.shell = process.env.SHELL;
            info.home = _os2.default.homedir();
            info.nvmPath = process.env.NVM_PATH;
            info.lang = process.env.LANG;
            info.dirname = __dirname;
            info.memoryFree = _formatBytes(_os2.default.freemem());
            info.memoryTotal = _formatBytes(_os2.default.totalmem());
            info.ip = _ip2.default.address();
            info.hostname = _os2.default.hostname();

            if (!diskusage) {
              _context2.next = 97;
              break;
            }

            _context2.prev = 86;
            _context2.next = 89;
            return diskusage.promise.check(process.platform === 'win32' ? 'c:' : '/');

          case 89:
            _result7 = _context2.sent;

            info.diskAvailable = _formatBytes(_result7.available);
            info.diskFree = _formatBytes(_result7.free);
            info.diskTotal = _formatBytes(_result7.total);
            _context2.next = 97;
            break;

          case 95:
            _context2.prev = 95;
            _context2.t8 = _context2['catch'](86);

          case 97:

            // TODO: fix these commands on linux
            if (process.platform === 'darwin') {
              // || process.platform === 'linux') {
              try {
                info.xdeProcesses = _lodash2.default.trim(_child_process2.default.execSync('pgrep XDE | xargs ps -p').toString());
              } catch (e) {}

              try {
                info.numXdeProcesses = _lodash2.default.trim(_child_process2.default.execSync('pgrep XDE | wc -l').toString());
              } catch (e) {}

              try {
                info.watchmanProcesses = _lodash2.default.trim(_child_process2.default.execSync('pgrep watchman | xargs ps -p').toString());
              } catch (e) {}

              try {
                info.numWatchmanProcesses = _lodash2.default.trim(_child_process2.default.execSync('pgrep watchman | wc -l').toString());
              } catch (e) {}

              try {
                info.ngrokProcesses = _lodash2.default.trim(_child_process2.default.execSync('pgrep ngrok | xargs ps -p').toString());
              } catch (e) {}

              try {
                info.numNgrokProcesses = _lodash2.default.trim(_child_process2.default.execSync('pgrep ngrok | wc -l').toString());
              } catch (e) {}
            }

            if (!(process.platform === 'darwin')) {
              _context2.next = 126;
              break;
            }

            _context2.prev = 99;
            _context2.next = 102;
            return (0, _spawnAsync2.default)('xcrun', ['--version']);

          case 102:
            _result8 = _context2.sent;

            info.xcrunVersion = _lodash2.default.trim(_result8.stdout);
            _context2.next = 108;
            break;

          case 106:
            _context2.prev = 106;
            _context2.t9 = _context2['catch'](99);

          case 108:
            _context2.prev = 108;
            _context2.next = 111;
            return (0, _spawnAsync2.default)('xcodebuild', ['-version']);

          case 111:
            _result9 = _context2.sent;

            info.xcodebuildVersion = _lodash2.default.trim(_result9.stdout);
            _context2.next = 117;
            break;

          case 115:
            _context2.prev = 115;
            _context2.t10 = _context2['catch'](108);

          case 117:
            _context2.prev = 117;
            _context2.next = 120;
            return (0, _spawnAsync2.default)('launchctl', ['limit']);

          case 120:
            _result10 = _context2.sent;

            info.launchctlLimit = _lodash2.default.trim(_result10.stdout);
            _context2.next = 126;
            break;

          case 124:
            _context2.prev = 124;
            _context2.t11 = _context2['catch'](117);

          case 126:
            if (!options.uploadLogs) {
              _context2.next = 130;
              break;
            }

            _context2.next = 129;
            return _uploadLogsAsync(info);

          case 129:
            info.url = _context2.sent;

          case 130:

            if (options.limitLengthForIntercom) {
              info = _lodash2.default.mapValues(info, function (value) {
                if (value && value.length > 100 && !value.startsWith('http')) {
                  return value.substring(0, 100);
                } else {
                  return value;
                }
              });
            }

            return _context2.abrupt('return', info);

          case 132:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this, [[4, 11], [13, 20], [22, 29], [31, 38], [40, 46], [48, 55], [57, 64], [66, 73], [86, 95], [99, 106], [108, 115], [117, 124]]);
  }));

  return function getDeviceInfoAsync(_x2) {
    return _ref2.apply(this, arguments);
  };
}();

require('instapromise');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _child_process = require('child_process');

var _child_process2 = _interopRequireDefault(_child_process);

var _formData = require('form-data');

var _formData2 = _interopRequireDefault(_formData);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _ip = require('ip');

var _ip2 = _interopRequireDefault(_ip);

var _jsonFile = require('@exponent/json-file');

var _jsonFile2 = _interopRequireDefault(_jsonFile);

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _rimraf = require('rimraf');

var _rimraf2 = _interopRequireDefault(_rimraf);

var _spawnAsync = require('@exponent/spawn-async');

var _spawnAsync2 = _interopRequireDefault(_spawnAsync);

var _tar = require('tar.gz');

var _tar2 = _interopRequireDefault(_tar);

var _Api = require('./Api');

var _Api2 = _interopRequireDefault(_Api);

var _Binaries = require('./Binaries');

var Binaries = _interopRequireWildcard(_Binaries);

var _Env = require('./Env');

var Env = _interopRequireWildcard(_Env);

var _User = require('./User');

var User = _interopRequireWildcard(_User);

var _UserSettings = require('./UserSettings');

var _UserSettings2 = _interopRequireDefault(_UserSettings);

var _Watchman = require('./Watchman');

var Watchman = _interopRequireWildcard(_Watchman);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// requires python, so might not be installed
var diskusage = void 0;
try {
  diskusage = require('diskusage');
} catch (e) {}

function _formatBytes(bytes) {
  if (bytes >= 1000000000) {
    return (bytes / 1000000000).toFixed(2) + ' GB';
  } else if (bytes >= 1000000) {
    return (bytes / 1000000).toFixed(2) + ' MB';
  } else if (bytes >= 1000) {
    return (bytes / 1000).toFixed(2) + ' KB';
  } else if (bytes > 1) {
    return bytes + ' bytes';
  } else if (bytes === 1) {
    return bytes + '${bytes} byte';
  } else {
    return '0 bytes';
  }
}
//# sourceMappingURL=__sourcemaps__/Diagnostics.js.map
