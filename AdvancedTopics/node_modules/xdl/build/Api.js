'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _callMethodAsync = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(url, method, requestBody) {
    var clientId, _ref2, username, headers, options, response, responseBody, responseObj, err;

    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return Session.clientIdAsync();

          case 2:
            clientId = _context.sent;
            _context.next = 5;
            return _UserSettings2.default.readAsync();

          case 5:
            _ref2 = _context.sent;
            username = _ref2.username;
            headers = {
              'Exp-ClientId': clientId
            };


            if (username) {
              headers['Exp-Username'] = username;
            }

            options = {
              url: url,
              method: method || 'get',
              headers: headers
            };
            response = void 0;
            // TODO: move everything from `request` to `got`

            if (!requestBody) {
              _context.next = 21;
              break;
            }

            if (!(requestBody instanceof _formData2.default)) {
              _context.next = 20;
              break;
            }

            // Use `got` library to handle FormData uploads
            options = (0, _extends3.default)({}, options, {
              body: requestBody
            });

            options.headers = (0, _extends3.default)({}, options.headers, requestBody.getHeaders());

            _context.next = 17;
            return (0, _got2.default)(url, options);

          case 17:
            response = _context.sent;
            _context.next = 21;
            break;

          case 20:
            options = (0, _extends3.default)({}, options, {
              body: requestBody,
              json: true
            });

          case 21:
            if (response) {
              _context.next = 25;
              break;
            }

            _context.next = 24;
            return _request2.default.promise(options);

          case 24:
            response = _context.sent;

          case 25:
            responseBody = response.body;

            if (!_lodash2.default.isString(responseBody)) {
              _context.next = 36;
              break;
            }

            _context.prev = 27;

            responseObj = JSON.parse(responseBody);
            _context.next = 34;
            break;

          case 31:
            _context.prev = 31;
            _context.t0 = _context['catch'](27);
            throw new Error("Invalid JSON returned from API: " + _context.t0 + ". Response body: " + responseBody);

          case 34:
            _context.next = 37;
            break;

          case 36:
            responseObj = responseBody;

          case 37:
            if (!responseObj.err) {
              _context.next = 43;
              break;
            }

            err = ApiError(responseObj.code || 'API_ERROR', "API Response Error: " + responseObj.err);
            // $FlowFixMe can't add arbitrary properties to error

            err.serverError = responseObj.err;
            throw err;

          case 43:
            return _context.abrupt('return', responseObj);

          case 44:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this, [[27, 31]]);
  }));

  return function _callMethodAsync(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();

require('instapromise');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _request = require('request');

var _request2 = _interopRequireDefault(_request);

var _formData = require('form-data');

var _formData2 = _interopRequireDefault(_formData);

var _got = require('got');

var _got2 = _interopRequireDefault(_got);

var _semver = require('semver');

var _semver2 = _interopRequireDefault(_semver);

var _ErrorCode = require('./ErrorCode');

var _ErrorCode2 = _interopRequireDefault(_ErrorCode);

var _XDLError = require('./XDLError');

var _XDLError2 = _interopRequireDefault(_XDLError);

var _Config = require('./Config');

var _Config2 = _interopRequireDefault(_Config);

var _Session = require('./Session');

var Session = _interopRequireWildcard(_Session);

var _UserSettings = require('./UserSettings');

var _UserSettings2 = _interopRequireDefault(_UserSettings);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ApiError(code, message) {
  var err = new Error(message);
  // $FlowFixMe error has no property code
  err.code = code;
  // $FlowFixMe error has no property _isApiError
  err._isApiError = true;
  return err;
}

var ROOT_BASE_URL = _Config2.default.api.scheme + '://' + _Config2.default.api.host;
if (_Config2.default.api.port) {
  ROOT_BASE_URL += ':' + _Config2.default.api.port;
}
var API_BASE_URL = ROOT_BASE_URL + '/--/api/';

var ApiClient = function () {
  function ApiClient() {
    (0, _classCallCheck3.default)(this, ApiClient);
  }

  (0, _createClass3.default)(ApiClient, null, [{
    key: 'callMethodAsync',
    value: function () {
      var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(methodName, args, method, requestBody) {
        var url;
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                url = API_BASE_URL + encodeURIComponent(methodName) + '/' + encodeURIComponent((0, _stringify2.default)(args));
                return _context2.abrupt('return', _callMethodAsync(url, method, requestBody));

              case 2:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function callMethodAsync(_x4, _x5, _x6, _x7) {
        return _ref3.apply(this, arguments);
      }

      return callMethodAsync;
    }()
  }, {
    key: 'callPathAsync',
    value: function () {
      var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(path, method, requestBody) {
        var url;
        return _regenerator2.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                url = ROOT_BASE_URL + path;
                return _context3.abrupt('return', _callMethodAsync(url, method, requestBody));

              case 2:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function callPathAsync(_x8, _x9, _x10) {
        return _ref4.apply(this, arguments);
      }

      return callPathAsync;
    }()
  }, {
    key: 'versionsAsync',
    value: function () {
      var _ref5 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4() {
        return _regenerator2.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return ApiClient.callPathAsync('/--/versions');

              case 2:
                return _context4.abrupt('return', _context4.sent);

              case 3:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function versionsAsync() {
        return _ref5.apply(this, arguments);
      }

      return versionsAsync;
    }()
  }, {
    key: 'sdkVersionsAsync',
    value: function () {
      var _ref6 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5() {
        var versions;
        return _regenerator2.default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return ApiClient.versionsAsync();

              case 2:
                versions = _context5.sent;
                return _context5.abrupt('return', versions.sdkVersions);

              case 4:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function sdkVersionsAsync() {
        return _ref6.apply(this, arguments);
      }

      return sdkVersionsAsync;
    }()
  }]);
  return ApiClient;
}();

ApiClient.host = _Config2.default.api.host;
ApiClient.port = _Config2.default.api.port || 80;
exports.default = ApiClient;
//# sourceMappingURL=__sourcemaps__/Api.js.map
