/**
 * Tests setting up an ngrok tunnel
 *
 */
'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

jest.disableAutomock();
jest.useRealTimers();
jasmine.DEFAULT_TIMEOUT_INTERVAL = 60000;

var request = require('request');
var path = require('path');

var xdl = require('../xdl');

describe('ngrok', function () {
  it('starts running and serves manifest', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
    var projectRoot, ngrokUrl, response, responseValue, bundleUrl, bundleResponse;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            projectRoot = path.resolve(__dirname, '../../../../apps/new-project-template');
            _context.next = 3;
            return xdl.Project.startAsync(projectRoot);

          case 3:
            _context.next = 5;
            return xdl.Project.getUrlAsync(projectRoot, {
              urlType: 'http',
              hostType: 'tunnel'
            });

          case 5:
            ngrokUrl = _context.sent;

            if (ngrokUrl) {
              _context.next = 8;
              break;
            }

            throw new Error("ngrok didn't return a URL");

          case 8:
            _context.next = 10;
            return request.promise.get(ngrokUrl);

          case 10:
            response = _context.sent;

            if (response.body) {
              _context.next = 13;
              break;
            }

            throw new Error("Didn't get expected manifest response");

          case 13:
            responseValue = JSON.parse(response.body);

            if (!(responseValue.error || response.statusCode !== 200)) {
              _context.next = 16;
              break;
            }

            throw new Error("Server responded with an error: " + responseValue.error);

          case 16:

            console.log("Successfully fetched manifest through ngrok and everything seems OK");

            bundleUrl = responseValue.bundleUrl;

            console.log('Fetching bundle at ' + bundleUrl);
            _context.next = 21;
            return request.promise.get(bundleUrl);

          case 21:
            bundleResponse = _context.sent;

            if (!(!bundleResponse.body || !bundleResponse.body.includes('sourceMappingURL'))) {
              _context.next = 24;
              break;
            }

            throw new Error("Didn't get expected bundle response");

          case 24:
            if (!(bundleResponse.statusCode !== 200)) {
              _context.next = 26;
              break;
            }

            throw new Error("Packager responded with bad status code: " + bundleResponse.statusCode);

          case 26:
            _context.next = 28;
            return xdl.Project.stopAsync(projectRoot);

          case 28:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  })));
});
//# sourceMappingURL=../__sourcemaps__/__integration_tests__/Ngrok-test.js.map
