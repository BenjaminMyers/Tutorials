'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _delayAsync = require('delay-async');

var _delayAsync2 = _interopRequireDefault(_delayAsync);

var _xdl = require('../xdl');

var _xdl2 = _interopRequireDefault(_xdl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

jest.disableAutomock();
jest.useRealTimers();
jasmine.DEFAULT_TIMEOUT_INTERVAL = 40000;

describe('simulator', function () {
  it('opens and loads url in exponent', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
    var Simulator;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            Simulator = _xdl2.default.Simulator;
            _context.next = 3;
            return Simulator._isSimulatorInstalledAsync();

          case 3:
            if (_context.sent) {
              _context.next = 5;
              break;
            }

            throw new Error("Simulator isn't installed on this computer; can't run this test.");

          case 5:
            _context.next = 7;
            return Simulator._isSimulatorRunningAsync();

          case 7:
            if (!_context.sent) {
              _context.next = 10;
              break;
            }

            _context.next = 10;
            return Simulator._quitSimulatorAsync();

          case 10:
            _context.next = 12;
            return (0, _delayAsync2.default)(1000);

          case 12:
            _context.next = 14;
            return Simulator._openSimulatorAsync();

          case 14:
            _context.next = 16;
            return (0, _delayAsync2.default)(9000);

          case 16:
            _context.next = 18;
            return Simulator._isSimulatorRunningAsync();

          case 18:
            if (_context.sent) {
              _context.next = 20;
              break;
            }

            throw new Error("Simulator should be running after being opened, but we're detecting that it isn't.");

          case 20:
            _context.next = 22;
            return Simulator._isExponentAppInstalledOnCurrentBootedSimulatorAsync();

          case 22:
            if (!_context.sent) {
              _context.next = 25;
              break;
            }

            _context.next = 25;
            return Simulator._uninstallExponentAppFromSimulatorAsync();

          case 25:
            _context.next = 27;
            return Simulator._isExponentAppInstalledOnCurrentBootedSimulatorAsync();

          case 27:
            if (!_context.sent) {
              _context.next = 29;
              break;
            }

            throw new Error("Exponent app shouldn't be installed on this simulator but it is");

          case 29:
            _context.next = 31;
            return Simulator._installExponentOnSimulatorAsync();

          case 31:
            _context.next = 33;
            return Simulator._isExponentAppInstalledOnCurrentBootedSimulatorAsync();

          case 33:
            if (_context.sent) {
              _context.next = 35;
              break;
            }

            throw new Error("Exponent app should be installed on this simulator but it isn't");

          case 35:
            _context.next = 37;
            return Simulator._openUrlInSimulatorAsync('exp://exp.host/@exponent/fluxpybird');

          case 37:
            _context.next = 39;
            return (0, _delayAsync2.default)(6000);

          case 39:
            _context.next = 41;
            return Simulator._uninstallExponentAppFromSimulatorAsync();

          case 41:
            _context.next = 43;
            return Simulator._isExponentAppInstalledOnCurrentBootedSimulatorAsync();

          case 43:
            if (!_context.sent) {
              _context.next = 45;
              break;
            }

            throw new Error("Exponent app shouldn't be installed on this simulator but it is (2)");

          case 45:
            _context.next = 47;
            return Simulator._quitSimulatorAsync();

          case 47:
            _context.next = 49;
            return Simulator._isSimulatorRunningAsync();

          case 49:
            if (!_context.sent) {
              _context.next = 51;
              break;
            }

            throw new Error("Simulator shouldn't be running but it is");

          case 51:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  })));
});
//# sourceMappingURL=../__sourcemaps__/__integration_tests__/Simulator-test.js.map
