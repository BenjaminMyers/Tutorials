'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.openUrlInSimulatorSafeAsync = exports._tryOpeningSimulatorInstallingExponentAndOpeningLinkAsync = exports._openUrlInSimulatorAsync = exports.upgradeExponentAsync = exports._uninstallExponentAppFromSimulatorAsync = exports._installExponentOnSimulatorAsync = exports._downloadSimulatorAppAsync = exports._checkExponentUpToDateAsync = exports._exponentVersionOnCurrentBootedSimulatorAsync = exports._waitForExponentAppInstalledOnCurrentBootedSimulatorAsync = exports._isExponentAppInstalledOnCurrentBootedSimulatorAsync = exports._quitSimulatorAsync = exports._isSimulatorRunningAsync = exports._openSimulatorAsync = exports._isSimulatorInstalledAsync = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _xcrunAsync = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(args) {
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return (0, _spawnAsync2.default)('xcrun', args);

          case 3:
            return _context.abrupt('return', _context.sent);

          case 6:
            _context.prev = 6;
            _context.t0 = _context['catch'](0);

            if (!(_isLicenseOutOfDate(_context.t0.stdout) || _isLicenseOutOfDate(_context.t0.stderr))) {
              _context.next = 12;
              break;
            }

            throw new _XDLError2.default(_ErrorCode2.default.XCODE_LICENSE_NOT_ACCEPTED, 'Xcode license is not accepted. Please run `sudo xcodebuild -license`.');

          case 12:
            _Logger2.default.global.error('Error running `xcrun ' + args.join(' ') + '`: ' + _context.t0.stderr);
            throw _context.t0;

          case 14:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this, [[0, 6]]);
  }));

  return function _xcrunAsync(_x) {
    return _ref.apply(this, arguments);
  };
}();

// Simulator installed


var _isSimulatorInstalledAsync = exports._isSimulatorInstalledAsync = function () {
  var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2() {
    var result;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            result = void 0;
            _context2.prev = 1;
            _context2.next = 4;
            return _osascript2.default.execAsync('id of app "Simulator"');

          case 4:
            result = _context2.sent.trim();
            _context2.next = 12;
            break;

          case 7:
            _context2.prev = 7;
            _context2.t0 = _context2['catch'](1);

            console.error("Can't determine id of Simulator app; the Simulator is most likely not installed on this machine", _context2.t0);
            _Logger2.default.global.error("Simulator not installed. Please visit https://developer.apple.com/xcode/download/ to download Xcode and the iOS simulator");
            return _context2.abrupt('return', false);

          case 12:
            if (!(result === 'com.apple.iphonesimulator')) {
              _context2.next = 16;
              break;
            }

            return _context2.abrupt('return', true);

          case 16:
            console.warn("Simulator is installed but is identified as '" + result + "'; don't know what that is.");
            _Logger2.default.global.error("Simulator not installed. Please visit https://developer.apple.com/xcode/download/ to download Xcode and the iOS simulator");
            return _context2.abrupt('return', false);

          case 19:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this, [[1, 7]]);
  }));

  return function _isSimulatorInstalledAsync() {
    return _ref2.apply(this, arguments);
  };
}();

// Simulator opened


var _openSimulatorAsync = exports._openSimulatorAsync = function () {
  var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3() {
    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return _isSimulatorRunningAsync();

          case 2:
            if (_context3.sent) {
              _context3.next = 8;
              break;
            }

            _Logger2.default.global.info("Opening iOS simulator");
            _context3.next = 6;
            return (0, _spawnAsync2.default)('open', ['-a', 'Simulator']);

          case 6:
            _context3.next = 8;
            return _waitForSimulatorRunningAsync();

          case 8:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  return function _openSimulatorAsync() {
    return _ref3.apply(this, arguments);
  };
}();

var _isSimulatorRunningAsync = exports._isSimulatorRunningAsync = function () {
  var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4() {
    var zeroMeansNo, bootedDevice;
    return _regenerator2.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return _osascript2.default.execAsync('tell app "System Events" to count processes whose name is "Simulator"');

          case 2:
            zeroMeansNo = _context4.sent.trim();

            if (!(zeroMeansNo === '0')) {
              _context4.next = 5;
              break;
            }

            return _context4.abrupt('return', false);

          case 5:
            _context4.next = 7;
            return _bootedSimulatorDeviceAsync();

          case 7:
            bootedDevice = _context4.sent;
            return _context4.abrupt('return', !!bootedDevice);

          case 9:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, this);
  }));

  return function _isSimulatorRunningAsync() {
    return _ref4.apply(this, arguments);
  };
}();

var _waitForSimulatorRunningAsync = function () {
  var _ref5 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5() {
    return _regenerator2.default.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return _isSimulatorRunningAsync();

          case 2:
            if (!_context5.sent) {
              _context5.next = 6;
              break;
            }

            return _context5.abrupt('return', true);

          case 6:
            _context5.next = 8;
            return (0, _delayAsync2.default)(100);

          case 8:
            _context5.next = 10;
            return _waitForSimulatorRunningAsync();

          case 10:
            return _context5.abrupt('return', _context5.sent);

          case 11:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, this);
  }));

  return function _waitForSimulatorRunningAsync() {
    return _ref5.apply(this, arguments);
  };
}();

var _listSimulatorDevicesAsync = function () {
  var _ref6 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee6() {
    var infoJson, info;
    return _regenerator2.default.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return _xcrunAsync(['simctl', 'list', 'devices', '--json']);

          case 2:
            infoJson = _context6.sent;
            info = JSON.parse(infoJson.stdout);
            return _context6.abrupt('return', info);

          case 5:
          case 'end':
            return _context6.stop();
        }
      }
    }, _callee6, this);
  }));

  return function _listSimulatorDevicesAsync() {
    return _ref6.apply(this, arguments);
  };
}();

var _bootedSimulatorDeviceAsync = function () {
  var _ref7 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee7() {
    var simulatorDeviceInfo, runtime, devices, i, device;
    return _regenerator2.default.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            _context7.next = 2;
            return _listSimulatorDevicesAsync();

          case 2:
            simulatorDeviceInfo = _context7.sent;
            _context7.t0 = _regenerator2.default.keys(simulatorDeviceInfo.devices);

          case 4:
            if ((_context7.t1 = _context7.t0()).done) {
              _context7.next = 17;
              break;
            }

            runtime = _context7.t1.value;
            devices = simulatorDeviceInfo.devices[runtime];
            i = 0;

          case 8:
            if (!(i < devices.length)) {
              _context7.next = 15;
              break;
            }

            device = devices[i];

            if (!(device.state === 'Booted')) {
              _context7.next = 12;
              break;
            }

            return _context7.abrupt('return', device);

          case 12:
            i++;
            _context7.next = 8;
            break;

          case 15:
            _context7.next = 4;
            break;

          case 17:
            return _context7.abrupt('return', null);

          case 18:
          case 'end':
            return _context7.stop();
        }
      }
    }, _callee7, this);
  }));

  return function _bootedSimulatorDeviceAsync() {
    return _ref7.apply(this, arguments);
  };
}();

var _quitSimulatorAsync = exports._quitSimulatorAsync = function () {
  var _ref8 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee8() {
    return _regenerator2.default.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            _context8.next = 2;
            return _osascript2.default.execAsync('tell application "Simulator" to quit');

          case 2:
            return _context8.abrupt('return', _context8.sent);

          case 3:
          case 'end':
            return _context8.stop();
        }
      }
    }, _callee8, this);
  }));

  return function _quitSimulatorAsync() {
    return _ref8.apply(this, arguments);
  };
}();

// Exponent installed


var _isExponentAppInstalledOnCurrentBootedSimulatorAsync = exports._isExponentAppInstalledOnCurrentBootedSimulatorAsync = function () {
  var _ref9 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee9() {
    var device, simDir, matches;
    return _regenerator2.default.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _context9.next = 2;
            return _bootedSimulatorDeviceAsync();

          case 2:
            device = _context9.sent;

            if (device) {
              _context9.next = 5;
              break;
            }

            return _context9.abrupt('return', false);

          case 5:
            _context9.next = 7;
            return _dirForSimulatorDevice(device.udid);

          case 7:
            simDir = _context9.sent;
            _context9.next = 10;
            return _glob2.default.promise('./data/Containers/Data/Application/*/Library/Caches/Snapshots/host.exp.Exponent', { cwd: simDir });

          case 10:
            matches = _context9.sent;
            return _context9.abrupt('return', matches.length > 0);

          case 12:
          case 'end':
            return _context9.stop();
        }
      }
    }, _callee9, this);
  }));

  return function _isExponentAppInstalledOnCurrentBootedSimulatorAsync() {
    return _ref9.apply(this, arguments);
  };
}();

var _waitForExponentAppInstalledOnCurrentBootedSimulatorAsync = exports._waitForExponentAppInstalledOnCurrentBootedSimulatorAsync = function () {
  var _ref10 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee10() {
    return _regenerator2.default.wrap(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            _context10.next = 2;
            return _isExponentAppInstalledOnCurrentBootedSimulatorAsync();

          case 2:
            if (!_context10.sent) {
              _context10.next = 6;
              break;
            }

            return _context10.abrupt('return', true);

          case 6:
            _context10.next = 8;
            return (0, _delayAsync2.default)(100);

          case 8:
            _context10.next = 10;
            return _waitForExponentAppInstalledOnCurrentBootedSimulatorAsync();

          case 10:
            return _context10.abrupt('return', _context10.sent);

          case 11:
          case 'end':
            return _context10.stop();
        }
      }
    }, _callee10, this);
  }));

  return function _waitForExponentAppInstalledOnCurrentBootedSimulatorAsync() {
    return _ref10.apply(this, arguments);
  };
}();

var _exponentVersionOnCurrentBootedSimulatorAsync = exports._exponentVersionOnCurrentBootedSimulatorAsync = function () {
  var _ref11 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee11() {
    var device, simDir, matches, regex, regexMatch;
    return _regenerator2.default.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return _bootedSimulatorDeviceAsync();

          case 2:
            device = _context11.sent;

            if (device) {
              _context11.next = 5;
              break;
            }

            return _context11.abrupt('return', null);

          case 5:
            _context11.next = 7;
            return _dirForSimulatorDevice(device.udid);

          case 7:
            simDir = _context11.sent;
            _context11.next = 10;
            return _glob2.default.promise('./data/Containers/Bundle/Application/*/Exponent-*.app', { cwd: simDir });

          case 10:
            matches = _context11.sent;

            if (!(matches.length === 0)) {
              _context11.next = 13;
              break;
            }

            return _context11.abrupt('return', null);

          case 13:
            regex = /Exponent\-([0-9\.]+)\.app/;
            regexMatch = regex.exec(matches[0]);

            if (!(regexMatch.length < 2)) {
              _context11.next = 17;
              break;
            }

            return _context11.abrupt('return', null);

          case 17:
            return _context11.abrupt('return', regexMatch[1]);

          case 18:
          case 'end':
            return _context11.stop();
        }
      }
    }, _callee11, this);
  }));

  return function _exponentVersionOnCurrentBootedSimulatorAsync() {
    return _ref11.apply(this, arguments);
  };
}();

var _checkExponentUpToDateAsync = exports._checkExponentUpToDateAsync = function () {
  var _ref12 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee12() {
    var versions, installedVersion;
    return _regenerator2.default.wrap(function _callee12$(_context12) {
      while (1) {
        switch (_context12.prev = _context12.next) {
          case 0:
            _context12.next = 2;
            return _Api2.default.versionsAsync();

          case 2:
            versions = _context12.sent;
            _context12.next = 5;
            return _exponentVersionOnCurrentBootedSimulatorAsync();

          case 5:
            installedVersion = _context12.sent;


            if (!installedVersion || _semver2.default.lt(installedVersion, versions.iosVersion)) {
              _Logger2.default.notifications.warn({ code: _NotificationCode2.default.OLD_IOS_APP_VERSION }, 'This version of the Exponent app is out of date. Uninstall the app and run again to upgrade.');
            }

          case 7:
          case 'end':
            return _context12.stop();
        }
      }
    }, _callee12, this);
  }));

  return function _checkExponentUpToDateAsync() {
    return _ref12.apply(this, arguments);
  };
}();

var _downloadSimulatorAppAsync = exports._downloadSimulatorAppAsync = function () {
  var _ref13 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee13() {
    var versions, dir, filesInDir, url;
    return _regenerator2.default.wrap(function _callee13$(_context13) {
      while (1) {
        switch (_context13.prev = _context13.next) {
          case 0:
            _context13.next = 2;
            return _Api2.default.versionsAsync();

          case 2:
            versions = _context13.sent;
            dir = _path2.default.join(_simulatorCacheDirectory(), 'Exponent-' + versions.iosVersion + '.app');
            _context13.next = 6;
            return (0, _existsAsync2.default)(dir);

          case 6:
            if (!_context13.sent) {
              _context13.next = 15;
              break;
            }

            _context13.next = 9;
            return _fs2.default.promise.readdir(dir);

          case 9:
            filesInDir = _context13.sent;

            if (!(filesInDir.length > 0)) {
              _context13.next = 14;
              break;
            }

            return _context13.abrupt('return', dir);

          case 14:
            _rimraf2.default.sync(dir);

          case 15:

            _mkdirp2.default.sync(dir);
            _context13.prev = 16;
            url = 'https://s3.amazonaws.com/exp-ios-simulator-apps/Exponent-' + versions.iosVersion + '.app.zip';
            _context13.next = 20;
            return (0, _download2.default)(url, dir, { extract: true });

          case 20:
            _context13.next = 26;
            break;

          case 22:
            _context13.prev = 22;
            _context13.t0 = _context13['catch'](16);

            _rimraf2.default.sync(dir);
            throw _context13.t0;

          case 26:
            return _context13.abrupt('return', dir);

          case 27:
          case 'end':
            return _context13.stop();
        }
      }
    }, _callee13, this, [[16, 22]]);
  }));

  return function _downloadSimulatorAppAsync() {
    return _ref13.apply(this, arguments);
  };
}();

var _installExponentOnSimulatorAsync = exports._installExponentOnSimulatorAsync = function () {
  var _ref14 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee14() {
    var dir, result;
    return _regenerator2.default.wrap(function _callee14$(_context14) {
      while (1) {
        switch (_context14.prev = _context14.next) {
          case 0:
            _Logger2.default.global.info('Downloading latest version of Exponent');
            _Logger2.default.notifications.info({ code: _NotificationCode2.default.START_LOADING });
            _context14.next = 4;
            return _downloadSimulatorAppAsync();

          case 4:
            dir = _context14.sent;

            _Logger2.default.global.info("Installing Exponent on iOS simulator");
            _context14.next = 8;
            return _xcrunAsync(['simctl', 'install', 'booted', dir]);

          case 8:
            result = _context14.sent;

            _Logger2.default.notifications.info({ code: _NotificationCode2.default.STOP_LOADING });
            return _context14.abrupt('return', result);

          case 11:
          case 'end':
            return _context14.stop();
        }
      }
    }, _callee14, this);
  }));

  return function _installExponentOnSimulatorAsync() {
    return _ref14.apply(this, arguments);
  };
}();

var _uninstallExponentAppFromSimulatorAsync = exports._uninstallExponentAppFromSimulatorAsync = function () {
  var _ref15 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee15() {
    return _regenerator2.default.wrap(function _callee15$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            _context15.prev = 0;

            _Logger2.default.global.info('Uninstalling Exponent from iOS simulator.');
            _context15.next = 4;
            return _xcrunAsync(['simctl', 'uninstall', 'booted', 'host.exp.Exponent']);

          case 4:
            _context15.next = 14;
            break;

          case 6:
            _context15.prev = 6;
            _context15.t0 = _context15['catch'](0);

            if (!(_context15.t0.message && _context15.t0.message.includes('No devices are booted.'))) {
              _context15.next = 12;
              break;
            }

            return _context15.abrupt('return', null);

          case 12:
            console.error(_context15.t0);
            throw _context15.t0;

          case 14:
          case 'end':
            return _context15.stop();
        }
      }
    }, _callee15, this, [[0, 6]]);
  }));

  return function _uninstallExponentAppFromSimulatorAsync() {
    return _ref15.apply(this, arguments);
  };
}();

var upgradeExponentAsync = exports.upgradeExponentAsync = function () {
  var _ref16 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee16() {
    return _regenerator2.default.wrap(function _callee16$(_context16) {
      while (1) {
        switch (_context16.prev = _context16.next) {
          case 0:
            _context16.next = 2;
            return _isSimulatorInstalledAsync();

          case 2:
            if (_context16.sent) {
              _context16.next = 4;
              break;
            }

            return _context16.abrupt('return');

          case 4:
            _context16.next = 6;
            return _openSimulatorAsync();

          case 6:
            _context16.next = 8;
            return _uninstallExponentAppFromSimulatorAsync();

          case 8:
            _context16.next = 10;
            return _installExponentOnSimulatorAsync();

          case 10:
            if (!_lastUrl) {
              _context16.next = 15;
              break;
            }

            _Logger2.default.global.info('Opening ' + _lastUrl + ' in Exponent.');
            _context16.next = 14;
            return _xcrunAsync(['simctl', 'openurl', 'booted', _lastUrl]);

          case 14:
            _lastUrl = null;

          case 15:
          case 'end':
            return _context16.stop();
        }
      }
    }, _callee16, this);
  }));

  return function upgradeExponentAsync() {
    return _ref16.apply(this, arguments);
  };
}();

// Open Url


var _openUrlInSimulatorAsync = exports._openUrlInSimulatorAsync = function () {
  var _ref17 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee17(url) {
    return _regenerator2.default.wrap(function _callee17$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            _lastUrl = url;
            _checkExponentUpToDateAsync(); // let this run in background
            _context17.next = 4;
            return _xcrunAsync(['simctl', 'openurl', 'booted', url]);

          case 4:
            return _context17.abrupt('return', _context17.sent);

          case 5:
          case 'end':
            return _context17.stop();
        }
      }
    }, _callee17, this);
  }));

  return function _openUrlInSimulatorAsync(_x2) {
    return _ref17.apply(this, arguments);
  };
}();

var _tryOpeningSimulatorInstallingExponentAndOpeningLinkAsync = exports._tryOpeningSimulatorInstallingExponentAndOpeningLinkAsync = function () {
  var _ref18 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee18(url) {
    return _regenerator2.default.wrap(function _callee18$(_context18) {
      while (1) {
        switch (_context18.prev = _context18.next) {
          case 0:
            _context18.next = 2;
            return _openSimulatorAsync();

          case 2:
            _context18.next = 4;
            return _isExponentAppInstalledOnCurrentBootedSimulatorAsync();

          case 4:
            if (_context18.sent) {
              _context18.next = 9;
              break;
            }

            _context18.next = 7;
            return _installExponentOnSimulatorAsync();

          case 7:
            _context18.next = 9;
            return _waitForExponentAppInstalledOnCurrentBootedSimulatorAsync();

          case 9:

            _Logger2.default.global.info('Opening ' + url + ' in iOS simulator');
            _context18.next = 12;
            return _openUrlInSimulatorAsync(url);

          case 12:
          case 'end':
            return _context18.stop();
        }
      }
    }, _callee18, this);
  }));

  return function _tryOpeningSimulatorInstallingExponentAndOpeningLinkAsync(_x3) {
    return _ref18.apply(this, arguments);
  };
}();

var openUrlInSimulatorSafeAsync = exports.openUrlInSimulatorSafeAsync = function () {
  var _ref19 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee19(url) {
    return _regenerator2.default.wrap(function _callee19$(_context19) {
      while (1) {
        switch (_context19.prev = _context19.next) {
          case 0:
            _context19.next = 2;
            return _isSimulatorInstalledAsync();

          case 2:
            if (_context19.sent) {
              _context19.next = 4;
              break;
            }

            return _context19.abrupt('return');

          case 4:
            _context19.prev = 4;
            _context19.next = 7;
            return _tryOpeningSimulatorInstallingExponentAndOpeningLinkAsync(url);

          case 7:
            _context19.next = 24;
            break;

          case 9:
            _context19.prev = 9;
            _context19.t0 = _context19['catch'](4);

            if (!_context19.t0.isXDLError) {
              _context19.next = 14;
              break;
            }

            // Hit some internal error, don't try again.
            // This includes Xcode license errors
            _Logger2.default.global.error(_context19.t0.message);
            return _context19.abrupt('return');

          case 14:

            _Logger2.default.global.error('Error running app. Uninstalling exponent and trying again.');

            _context19.prev = 15;
            _context19.next = 18;
            return _uninstallExponentAppFromSimulatorAsync();

          case 18:
            _context19.next = 22;
            break;

          case 20:
            _context19.prev = 20;
            _context19.t1 = _context19['catch'](15);

          case 22:
            _context19.next = 24;
            return _tryOpeningSimulatorInstallingExponentAndOpeningLinkAsync(url);

          case 24:

            Analytics.logEvent('Open Url on Device', {
              platform: 'ios'
            });

          case 25:
          case 'end':
            return _context19.stop();
        }
      }
    }, _callee19, this, [[4, 9], [15, 20]]);
  }));

  return function openUrlInSimulatorSafeAsync(_x4) {
    return _ref19.apply(this, arguments);
  };
}();

exports.isPlatformSupported = isPlatformSupported;
exports._dirForSimulatorDevice = _dirForSimulatorDevice;
exports._simulatorCacheDirectory = _simulatorCacheDirectory;

require('instapromise');

var _delayAsync = require('delay-async');

var _delayAsync2 = _interopRequireDefault(_delayAsync);

var _download = require('download');

var _download2 = _interopRequireDefault(_download);

var _existsAsync = require('exists-async');

var _existsAsync2 = _interopRequireDefault(_existsAsync);

var _glob = require('glob');

var _glob2 = _interopRequireDefault(_glob);

var _homeDir = require('home-dir');

var _homeDir2 = _interopRequireDefault(_homeDir);

var _mkdirp = require('mkdirp');

var _mkdirp2 = _interopRequireDefault(_mkdirp);

var _osascript = require('@exponent/osascript');

var _osascript2 = _interopRequireDefault(_osascript);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _semver = require('semver');

var _semver2 = _interopRequireDefault(_semver);

var _spawnAsync = require('@exponent/spawn-async');

var _spawnAsync2 = _interopRequireDefault(_spawnAsync);

var _rimraf = require('rimraf');

var _rimraf2 = _interopRequireDefault(_rimraf);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _Analytics = require('./Analytics');

var Analytics = _interopRequireWildcard(_Analytics);

var _Api = require('./Api');

var _Api2 = _interopRequireDefault(_Api);

var _ErrorCode = require('./ErrorCode');

var _ErrorCode2 = _interopRequireDefault(_ErrorCode);

var _Logger = require('./Logger');

var _Logger2 = _interopRequireDefault(_Logger);

var _NotificationCode = require('./NotificationCode');

var _NotificationCode2 = _interopRequireDefault(_NotificationCode);

var _UserSettings = require('./UserSettings');

var _UserSettings2 = _interopRequireDefault(_UserSettings);

var _XDLError = require('./XDLError');

var _XDLError2 = _interopRequireDefault(_XDLError);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _lastUrl = null;

function isPlatformSupported() {
  return process.platform === 'darwin';
}

function _isLicenseOutOfDate(text) {
  if (!text) {
    return false;
  }

  var lower = text.toLowerCase();
  return lower.includes('xcode') && lower.includes('license');
}

function _dirForSimulatorDevice(udid) {
  return _path2.default.resolve((0, _homeDir2.default)(), 'Library/Developer/CoreSimulator/Devices', udid);
}

function _simulatorCacheDirectory() {
  var dotExponentHomeDirectory = _UserSettings2.default.dotExponentHomeDirectory();
  var dir = _path2.default.join(dotExponentHomeDirectory, 'ios-simulator-app-cache');
  _mkdirp2.default.sync(dir);
  return dir;
}
//# sourceMappingURL=__sourcemaps__/Simulator.js.map
