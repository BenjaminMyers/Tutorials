'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stopAsync = exports.startAsync = exports.getUrlAsync = exports.setOptionsAsync = exports.stopTunnelsAsync = exports.startTunnelsAsync = exports.stopExponentServerAsync = exports.startExponentServerAsync = exports.stopReactNativeServerAsync = exports.startReactNativeServerAsync = exports.buildAsync = exports.publishAsync = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _assertLoggedInAsync = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
    var user;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return User.getCurrentUserAsync();

          case 2:
            user = _context.sent;

            if (user) {
              _context.next = 5;
              break;
            }

            throw new _XDLError2.default(_ErrorCode2.default.NOT_LOGGED_IN, 'Not logged in');

          case 5:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function _assertLoggedInAsync() {
    return _ref.apply(this, arguments);
  };
}();

var _assertValidProjectRoot = function () {
  var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(projectRoot) {
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (projectRoot) {
              _context2.next = 2;
              break;
            }

            throw new _XDLError2.default(_ErrorCode2.default.NO_PROJECT_ROOT, 'No project root specified');

          case 2:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function _assertValidProjectRoot(_x) {
    return _ref2.apply(this, arguments);
  };
}();

var _getFreePortAsync = function () {
  var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(rangeStart) {
    var port;
    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return (0, _freeportAsync2.default)(rangeStart);

          case 2:
            port = _context3.sent;

            if (port) {
              _context3.next = 5;
              break;
            }

            throw new _XDLError2.default(_ErrorCode2.default.NO_PORT_FOUND, 'No available port found');

          case 5:
            return _context3.abrupt('return', port);

          case 6:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  return function _getFreePortAsync(_x2) {
    return _ref3.apply(this, arguments);
  };
}();

var _getForPlatformAsync = function () {
  var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4(url, platform, _ref5) {
    var errorCode = _ref5.errorCode,
        minLength = _ref5.minLength;
    var response;
    return _regenerator2.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            url = UrlUtils.getPlatformSpecificBundleUrl(url, platform);

            _context4.next = 3;
            return _request2.default.promise.get({
              url: url + '&platform=' + platform,
              headers: {
                'Exponent-Platform': platform
              }
            });

          case 3:
            response = _context4.sent;

            if (!(response.statusCode !== 200)) {
              _context4.next = 6;
              break;
            }

            throw new _XDLError2.default(errorCode, 'Packager returned unexpected code ' + response.statusCode);

          case 6:
            if (!(!response.body || minLength && response.body.length < minLength)) {
              _context4.next = 8;
              break;
            }

            throw new _XDLError2.default(errorCode, 'Body is: ' + response.body);

          case 8:
            return _context4.abrupt('return', response.body);

          case 9:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, this);
  }));

  return function _getForPlatformAsync(_x3, _x4, _x5) {
    return _ref4.apply(this, arguments);
  };
}();

var publishAsync = exports.publishAsync = function () {
  var _ref6 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5(projectRoot) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var schema, packagerInfo, entryPoint, publishUrl, assetsUrl, _ref7, _ref8, iosBundle, androidBundle, iosAssetsJson, androidAssetsJson, _ref9, exp, pkg, iosAssets, androidAssets, assets, form, response;

    return _regenerator2.default.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return _assertLoggedInAsync();

          case 2:
            _assertValidProjectRoot(projectRoot);

            Analytics.logEvent('Publish', {
              projectRoot: projectRoot
            });

            schema = _joi2.default.object().keys({
              // empty
            });
            _context5.prev = 5;
            _context5.next = 8;
            return _joi2.default.promise.validate(options, schema);

          case 8:
            _context5.next = 13;
            break;

          case 10:
            _context5.prev = 10;
            _context5.t0 = _context5['catch'](5);
            throw new _XDLError2.default(_ErrorCode2.default.INVALID_OPTIONS, _context5.t0.toString());

          case 13:
            _context5.next = 15;
            return ProjectSettings.readPackagerInfoAsync(projectRoot);

          case 15:
            packagerInfo = _context5.sent;

            if (packagerInfo.packagerPort) {
              _context5.next = 18;
              break;
            }

            throw new _XDLError2.default(_ErrorCode2.default.NO_PACKAGER_PORT, 'No packager found for project at ' + projectRoot + '.');

          case 18:
            _context5.next = 20;
            return Exp.determineEntryPointAsync(projectRoot);

          case 20:
            entryPoint = _context5.sent;
            _context5.next = 23;
            return UrlUtils.constructPublishUrlAsync(projectRoot, entryPoint);

          case 23:
            publishUrl = _context5.sent;
            _context5.next = 26;
            return UrlUtils.constructAssetsUrlAsync(projectRoot, entryPoint);

          case 26:
            assetsUrl = _context5.sent;
            _context5.next = 29;
            return _promise2.default.all([_getForPlatformAsync(publishUrl, 'ios', {
              errorCode: _ErrorCode2.default.INVALID_BUNDLE,
              minLength: MINIMUM_BUNDLE_SIZE
            }), _getForPlatformAsync(publishUrl, 'android', {
              errorCode: _ErrorCode2.default.INVALID_BUNDLE,
              minLength: MINIMUM_BUNDLE_SIZE
            }), _getForPlatformAsync(assetsUrl, 'ios', {
              errorCode: _ErrorCode2.default.INVALID_ASSETS
            }), _getForPlatformAsync(assetsUrl, 'android', {
              errorCode: _ErrorCode2.default.INVALID_ASSETS
            })]);

          case 29:
            _ref7 = _context5.sent;
            _ref8 = (0, _slicedToArray3.default)(_ref7, 4);
            iosBundle = _ref8[0];
            androidBundle = _ref8[1];
            iosAssetsJson = _ref8[2];
            androidAssetsJson = _ref8[3];
            _context5.next = 37;
            return ProjectUtils.readConfigJsonAsync(projectRoot);

          case 37:
            _ref9 = _context5.sent;
            exp = _ref9.exp;
            pkg = _ref9.pkg;

            if (!(!exp || !pkg)) {
              _context5.next = 42;
              break;
            }

            throw new _XDLError2.default(_ErrorCode2.default.NO_PACKAGE_JSON, 'Couldn\'t read exp.json file in project at ' + projectRoot);

          case 42:

            // Support version and name being specified in package.json for legacy
            // support pre: exp.json
            if (!exp.version && pkg.version) {
              exp.version = pkg.version;
            }
            if (!exp.slug && pkg.name) {
              exp.slug = pkg.name;
            }

            if (exp.android && exp.android.config) {
              delete exp.android.config;
            }

            if (exp.ios && exp.ios.config) {
              delete exp.ios.config;
            }

            // Upload asset files
            iosAssets = JSON.parse(iosAssetsJson);
            androidAssets = JSON.parse(androidAssetsJson);
            assets = iosAssets.concat(androidAssets);

            if (!(assets.length > 0 && assets[0].fileHashes)) {
              _context5.next = 52;
              break;
            }

            _context5.next = 52;
            return uploadAssetsAsync(projectRoot, assets);

          case 52:
            form = new _formData2.default();

            form.append('expJson', (0, _stringify2.default)(exp));
            form.append('iosBundle', iosBundle, {
              filename: 'iosBundle'
            });
            form.append('androidBundle', androidBundle, {
              filename: 'androidBundle'
            });

            _context5.next = 58;
            return _Api2.default.callMethodAsync('publish', [options], 'put', form);

          case 58:
            response = _context5.sent;
            return _context5.abrupt('return', response);

          case 60:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, this, [[5, 10]]);
  }));

  return function publishAsync(_x6, _x7) {
    return _ref6.apply(this, arguments);
  };
}();

// TODO(jesse): Add analytics for upload


var uploadAssetsAsync = function () {
  var _ref10 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee7(projectRoot, assets) {
    var _this = this;

    var paths, metas, missing;
    return _regenerator2.default.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            // Collect paths by key, also effectively handles duplicates in the array
            paths = {};

            assets.forEach(function (asset) {
              asset.files.forEach(function (path, index) {
                paths[asset.fileHashes[index]] = path;
              });
            });

            // Collect list of assets missing on host
            _context7.next = 4;
            return _Api2.default.callMethodAsync('assetsMetadata', [], 'post', {
              keys: (0, _keys2.default)(paths)
            });

          case 4:
            metas = _context7.sent.metadata;
            missing = (0, _keys2.default)(paths).filter(function (key) {
              return !metas[key].exists;
            });

            // Upload them!

            _context7.next = 8;
            return _promise2.default.all(_lodash2.default.chunk(missing, 5).map(function () {
              var _ref11 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee6(keys) {
                var form;
                return _regenerator2.default.wrap(function _callee6$(_context6) {
                  while (1) {
                    switch (_context6.prev = _context6.next) {
                      case 0:
                        form = new _formData2.default();

                        keys.forEach(function (key) {
                          ProjectUtils.logDebug(projectRoot, 'exponent', 'uploading ' + paths[key]);
                          form.append(key, _fs2.default.createReadStream(paths[key]), {
                            filename: paths[key]
                          });
                        });
                        _context6.next = 4;
                        return _Api2.default.callMethodAsync('uploadAssets', [], 'put', form);

                      case 4:
                      case 'end':
                        return _context6.stop();
                    }
                  }
                }, _callee6, _this);
              }));

              return function (_x11) {
                return _ref11.apply(this, arguments);
              };
            }()));

          case 8:
          case 'end':
            return _context7.stop();
        }
      }
    }, _callee7, this);
  }));

  return function uploadAssetsAsync(_x9, _x10) {
    return _ref10.apply(this, arguments);
  };
}();

var buildAsync = exports.buildAsync = function () {
  var _ref12 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee8(projectRoot) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var schema, _ref13, exp, pkg, response;

    return _regenerator2.default.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            _context8.next = 2;
            return _assertLoggedInAsync();

          case 2:
            _assertValidProjectRoot(projectRoot);

            Analytics.logEvent('Build Shell App', {
              projectRoot: projectRoot
            });

            schema = _joi2.default.object().keys({
              current: _joi2.default.boolean(),
              mode: _joi2.default.string(),
              platform: _joi2.default.any().valid('ios', 'android', 'all'),
              expIds: _joi2.default.array()
            });
            _context8.prev = 5;
            _context8.next = 8;
            return _joi2.default.promise.validate(options, schema);

          case 8:
            _context8.next = 13;
            break;

          case 10:
            _context8.prev = 10;
            _context8.t0 = _context8['catch'](5);
            throw new _XDLError2.default(_ErrorCode2.default.INVALID_OPTIONS, _context8.t0.toString());

          case 13:
            _context8.next = 15;
            return ProjectUtils.readConfigJsonAsync(projectRoot);

          case 15:
            _ref13 = _context8.sent;
            exp = _ref13.exp;
            pkg = _ref13.pkg;

            if (!(!exp || !pkg)) {
              _context8.next = 20;
              break;
            }

            throw new _XDLError2.default(_ErrorCode2.default.NO_PACKAGE_JSON, 'Couldn\'t read exp.json file in project at ' + projectRoot);

          case 20:

            // Support version and name being specified in package.json for legacy
            // support pre: exp.json
            if (!exp.version && pkg.version) {
              exp.version = pkg.version;
            }
            if (!exp.slug && pkg.name) {
              exp.slug = pkg.name;
            }

            if (!(options.platform === 'ios' || options.platform === 'all')) {
              _context8.next = 25;
              break;
            }

            if (!(!exp.ios || !exp.ios.bundleIdentifier)) {
              _context8.next = 25;
              break;
            }

            throw new _XDLError2.default(_ErrorCode2.default.INVALID_MANIFEST, 'Must specify a bundle identifier in order to build this experience for iOS. Please specify one in exp.json at "ios.bundleIdentifier"');

          case 25:
            if (!(options.platform === 'android' || options.platform === 'all')) {
              _context8.next = 28;
              break;
            }

            if (!(!exp.android || !exp.android.package)) {
              _context8.next = 28;
              break;
            }

            throw new _XDLError2.default(_ErrorCode2.default.INVALID_MANIFEST, 'Must specify a java package in order to build this experience for Android. Please specify one in exp.json at "android.package"');

          case 28:
            _context8.next = 30;
            return _Api2.default.callMethodAsync('build', [], 'put', {
              manifest: exp,
              options: options
            });

          case 30:
            response = _context8.sent;
            return _context8.abrupt('return', response);

          case 32:
          case 'end':
            return _context8.stop();
        }
      }
    }, _callee8, this, [[5, 10]]);
  }));

  return function buildAsync(_x12, _x13) {
    return _ref12.apply(this, arguments);
  };
}();

var _waitForRunningAsync = function () {
  var _ref14 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee9(url) {
    var response;
    return _regenerator2.default.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _context9.prev = 0;
            _context9.next = 3;
            return _request2.default.promise(url);

          case 3:
            response = _context9.sent;

            if (!(response.statusCode >= 200 && response.statusCode < 300 && response.body && response.body.includes('Cached Bundles'))) {
              _context9.next = 6;
              break;
            }

            return _context9.abrupt('return', true);

          case 6:
            _context9.next = 10;
            break;

          case 8:
            _context9.prev = 8;
            _context9.t0 = _context9['catch'](0);

          case 10:
            _context9.next = 12;
            return (0, _delayAsync2.default)(100);

          case 12:
            return _context9.abrupt('return', _waitForRunningAsync(url));

          case 13:
          case 'end':
            return _context9.stop();
        }
      }
    }, _callee9, this, [[0, 8]]);
  }));

  return function _waitForRunningAsync(_x15) {
    return _ref14.apply(this, arguments);
  };
}();

var _restartWatchmanAsync = function () {
  var _ref15 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee10(projectRoot) {
    var result;
    return _regenerator2.default.wrap(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            _context10.prev = 0;
            _context10.next = 3;
            return (0, _spawnAsync2.default)('watchman', ['watch-del', projectRoot]);

          case 3:
            result = _context10.sent;
            _context10.next = 6;
            return (0, _spawnAsync2.default)('watchman', ['watch-project', projectRoot]);

          case 6:
            if (!result.stdout.includes('root')) {
              _context10.next = 9;
              break;
            }

            ProjectUtils.logInfo(projectRoot, 'exponent', 'Restarted watchman.');
            return _context10.abrupt('return');

          case 9:
            _context10.next = 13;
            break;

          case 11:
            _context10.prev = 11;
            _context10.t0 = _context10['catch'](0);

          case 13:

            ProjectUtils.logError(projectRoot, 'exponent', 'Attempted to restart watchman but failed. Please try running `watchman watch-del-all`.');

          case 14:
          case 'end':
            return _context10.stop();
        }
      }
    }, _callee10, this, [[0, 11]]);
  }));

  return function _restartWatchmanAsync(_x16) {
    return _ref15.apply(this, arguments);
  };
}();

var startReactNativeServerAsync = exports.startReactNativeServerAsync = function () {
  var _ref16 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee12(projectRoot) {
    var _this2 = this;

    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var packagerPort, exp, packagerOpts, userPackagerOpts, cliOpts, defaultCliPath, cliPath, packagerCwd, nodePath, packagerProcess, packagerUrl;
    return _regenerator2.default.wrap(function _callee12$(_context12) {
      while (1) {
        switch (_context12.prev = _context12.next) {
          case 0:
            _context12.next = 2;
            return _assertLoggedInAsync();

          case 2:
            _assertValidProjectRoot(projectRoot);

            _context12.next = 5;
            return stopReactNativeServerAsync(projectRoot);

          case 5:
            _context12.next = 7;
            return Watchman.addToPathAsync();

          case 7:
            _context12.next = 9;
            return _getFreePortAsync(19001);

          case 9:
            packagerPort = _context12.sent;
            _context12.next = 12;
            return Exp.expConfigForRootAsync(projectRoot);

          case 12:
            exp = _context12.sent;


            // Create packager options
            packagerOpts = {
              port: packagerPort,
              projectRoots: projectRoot,
              assetRoots: projectRoot
            };
            userPackagerOpts = _lodash2.default.get(exp, 'packagerOpts');

            if (userPackagerOpts) {
              packagerOpts = (0, _extends3.default)({}, packagerOpts, userPackagerOpts);
            }

            cliOpts = _lodash2.default.reduce(packagerOpts, function (opts, val, key) {
              if (val && val !== '') {
                opts.push('--' + key, val);
              }
              return opts;
            }, ['start']);


            if (options.reset) {
              cliOpts.push('--reset-cache');
            }

            // Get custom CLI path from project package.json, but fall back to node_module path
            defaultCliPath = _path3.default.join(projectRoot, 'node_modules', 'react-native', 'local-cli', 'cli.js');
            cliPath = _lodash2.default.get(exp, 'rnCliPath', defaultCliPath);
            packagerCwd = void 0;
            nodePath = void 0;
            // When using a custom path for the RN CLI, we want it to use the project
            // root to look up config files and Node modules

            if (exp.rnCliPath) {
              packagerCwd = projectRoot;
              nodePath = _nodePathForProjectRoot(projectRoot);
            } else {
              packagerCwd = _path3.default.join(projectRoot, 'node_modules', 'react-native', 'packager');
              nodePath = null;
            }

            // Run the copy of Node that's embedded in Electron by setting the
            // ELECTRON_RUN_AS_NODE environment variable
            // Note: the CLI script sets up graceful-fs and sets ulimit to 4096 in the
            // child process
            packagerProcess = _child_process2.default.fork(cliPath, cliOpts, {
              cwd: packagerCwd,
              env: (0, _extends3.default)({}, process.env, {
                NODE_PATH: nodePath,
                ELECTRON_RUN_AS_NODE: 1
              }),
              silent: true
            });
            _context12.next = 26;
            return ProjectSettings.setPackagerInfoAsync(projectRoot, {
              packagerPort: packagerPort,
              packagerPid: packagerProcess.pid
            });

          case 26:

            // TODO: do we need this? don't know if it's ever called
            process.on('exit', function () {
              (0, _treeKill2.default)(packagerProcess.pid);
            });

            packagerProcess.stdout.setEncoding('utf8');
            packagerProcess.stderr.setEncoding('utf8');
            packagerProcess.stdout.on('data', function (data) {
              _logPackagerOutput(projectRoot, 'info', data);
            });

            packagerProcess.stderr.on('data', function (data) {
              _logPackagerOutput(projectRoot, 'error', data);
            });

            packagerProcess.on('exit', function () {
              var _ref17 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee11(code) {
                return _regenerator2.default.wrap(function _callee11$(_context11) {
                  while (1) {
                    switch (_context11.prev = _context11.next) {
                      case 0:
                        ProjectUtils.logDebug(projectRoot, 'exponent', 'packager process exited with code ' + code);

                      case 1:
                      case 'end':
                        return _context11.stop();
                    }
                  }
                }, _callee11, _this2);
              }));

              return function (_x20) {
                return _ref17.apply(this, arguments);
              };
            }());

            _context12.next = 34;
            return UrlUtils.constructBundleUrlAsync(projectRoot, {
              urlType: 'http',
              hostType: 'localhost'
            });

          case 34:
            packagerUrl = _context12.sent;
            _context12.next = 37;
            return _waitForRunningAsync(packagerUrl + '/debug');

          case 37:
          case 'end':
            return _context12.stop();
        }
      }
    }, _callee12, this);
  }));

  return function startReactNativeServerAsync(_x17, _x18) {
    return _ref16.apply(this, arguments);
  };
}();

var stopReactNativeServerAsync = exports.stopReactNativeServerAsync = function () {
  var _ref18 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee13(projectRoot) {
    var packagerInfo;
    return _regenerator2.default.wrap(function _callee13$(_context13) {
      while (1) {
        switch (_context13.prev = _context13.next) {
          case 0:
            _context13.next = 2;
            return _assertLoggedInAsync();

          case 2:
            _assertValidProjectRoot(projectRoot);

            _context13.next = 5;
            return ProjectSettings.readPackagerInfoAsync(projectRoot);

          case 5:
            packagerInfo = _context13.sent;

            if (!(!packagerInfo.packagerPort || !packagerInfo.packagerPid)) {
              _context13.next = 9;
              break;
            }

            ProjectUtils.logDebug(projectRoot, 'exponent', 'No packager found for project at ' + projectRoot + '.');
            return _context13.abrupt('return');

          case 9:

            ProjectUtils.logDebug(projectRoot, 'exponent', 'Killing packager process tree: ' + packagerInfo.packagerPid);
            _context13.prev = 10;
            _context13.next = 13;
            return _treeKill2.default.promise(packagerInfo.packagerPid, 'SIGKILL');

          case 13:
            _context13.next = 18;
            break;

          case 15:
            _context13.prev = 15;
            _context13.t0 = _context13['catch'](10);

            ProjectUtils.logDebug(projectRoot, 'exponent', 'Error stopping packager process: ' + _context13.t0.toString());

          case 18:
            _context13.next = 20;
            return ProjectSettings.setPackagerInfoAsync(projectRoot, {
              packagerPort: null,
              packagerPid: null
            });

          case 20:
          case 'end':
            return _context13.stop();
        }
      }
    }, _callee13, this, [[10, 15]]);
  }));

  return function stopReactNativeServerAsync(_x21) {
    return _ref18.apply(this, arguments);
  };
}();

var startExponentServerAsync = exports.startExponentServerAsync = function () {
  var _ref19 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee16(projectRoot) {
    var _this3 = this;

    var app, manifestHandler, exponentServerPort, server;
    return _regenerator2.default.wrap(function _callee16$(_context16) {
      while (1) {
        switch (_context16.prev = _context16.next) {
          case 0:
            _context16.next = 2;
            return _assertLoggedInAsync();

          case 2:
            _assertValidProjectRoot(projectRoot);

            _context16.next = 5;
            return stopExponentServerAsync(projectRoot);

          case 5:
            app = (0, _express2.default)();

            app.use(_bodyParser2.default.json({ limit: '10mb' }));
            app.use(_bodyParser2.default.urlencoded({ limit: '10mb', extended: true }));

            _context16.next = 10;
            return Doctor.validateWithNetworkAsync(projectRoot);

          case 10:
            _context16.t0 = _context16.sent;
            _context16.t1 = Doctor.FATAL;

            if (!(_context16.t0 === _context16.t1)) {
              _context16.next = 14;
              break;
            }

            throw new Error('Couldn\'t start project. Please fix the above issues and restart the project.');

          case 14:

            // Serve the manifest.
            manifestHandler = function () {
              var _ref20 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee14(req, res) {
                var _ref21, manifest, packagerOpts, bundleUrlPackagerOpts, entryPoint, _platform, mainModuleName, queryParams, _path, _manifestString, currentUser, publishInfo, _signedManifest;

                return _regenerator2.default.wrap(function _callee14$(_context14) {
                  while (1) {
                    switch (_context14.prev = _context14.next) {
                      case 0:
                        _context14.prev = 0;

                        // We intentionally don't `await`. We want to continue trying even
                        // if there is a potential error in the package.json and don't want to slow
                        // down the request
                        Doctor.validateWithNetworkAsync(projectRoot);

                        _context14.next = 4;
                        return ProjectUtils.readConfigJsonAsync(projectRoot);

                      case 4:
                        _ref21 = _context14.sent;
                        manifest = _ref21.exp;

                        if (manifest) {
                          _context14.next = 8;
                          break;
                        }

                        throw new Error('No exp.json file found');

                      case 8:
                        _context14.next = 10;
                        return ProjectSettings.getPackagerOptsAsync(projectRoot);

                      case 10:
                        packagerOpts = _context14.sent;
                        bundleUrlPackagerOpts = JSON.parse((0, _stringify2.default)(packagerOpts));

                        bundleUrlPackagerOpts.urlType = 'http';
                        if (bundleUrlPackagerOpts.hostType === 'redirect') {
                          bundleUrlPackagerOpts.hostType = 'tunnel';
                        }

                        manifest.xde = true; // deprecated
                        manifest.developer = {
                          tool: _Config2.default.developerTool
                        };
                        manifest.packagerOpts = packagerOpts;

                        _context14.next = 19;
                        return Exp.determineEntryPointAsync(projectRoot);

                      case 19:
                        entryPoint = _context14.sent;
                        _platform = req.headers['exponent-platform'] || 'ios';

                        entryPoint = UrlUtils.getPlatformSpecificBundleUrl(entryPoint, _platform);
                        mainModuleName = UrlUtils.guessMainModulePath(entryPoint);
                        _context14.next = 25;
                        return UrlUtils.constructBundleQueryParamsAsync(projectRoot, packagerOpts);

                      case 25:
                        queryParams = _context14.sent;
                        _path = '/' + mainModuleName + '.bundle?platform=' + _platform + '&' + queryParams;
                        _context14.next = 29;
                        return UrlUtils.constructBundleUrlAsync(projectRoot, bundleUrlPackagerOpts);

                      case 29:
                        _context14.t0 = _context14.sent;
                        _context14.t1 = _path;
                        manifest.bundleUrl = _context14.t0 + _context14.t1;
                        _context14.next = 34;
                        return UrlUtils.constructDebuggerHostAsync(projectRoot);

                      case 34:
                        manifest.debuggerHost = _context14.sent;

                        manifest.mainModuleName = mainModuleName;
                        _context14.next = 38;
                        return UrlUtils.constructManifestUrlAsync(projectRoot, {
                          urlType: 'http'
                        });

                      case 38:
                        _context14.t2 = _context14.sent;
                        manifest.logUrl = _context14.t2 + '/logs';
                        _manifestString = (0, _stringify2.default)(manifest);
                        _context14.next = 43;
                        return User.getCurrentUserAsync();

                      case 43:
                        currentUser = _context14.sent;

                        if (!(req.headers['exponent-accept-signature'] && currentUser)) {
                          _context14.next = 58;
                          break;
                        }

                        if (!(_cachedSignedManifest.manifestString === _manifestString)) {
                          _context14.next = 49;
                          break;
                        }

                        _manifestString = _cachedSignedManifest.signedManifest;
                        _context14.next = 58;
                        break;

                      case 49:
                        _context14.next = 51;
                        return Exp.getPublishInfoAsync(projectRoot);

                      case 51:
                        publishInfo = _context14.sent;
                        _context14.next = 54;
                        return _Api2.default.callMethodAsync('signManifest', [publishInfo.args], 'post', manifest);

                      case 54:
                        _signedManifest = _context14.sent;

                        _cachedSignedManifest.manifestString = _manifestString;
                        _cachedSignedManifest.signedManifest = _signedManifest.response;
                        _manifestString = _signedManifest.response;

                      case 58:

                        res.send(_manifestString);

                        Analytics.logEvent('Serve Manifest', {
                          projectRoot: projectRoot
                        });
                        _context14.next = 66;
                        break;

                      case 62:
                        _context14.prev = 62;
                        _context14.t3 = _context14['catch'](0);

                        ProjectUtils.logDebug(projectRoot, 'exponent', 'Error in manifestHandler: ' + _context14.t3 + ' ' + _context14.t3.stack);
                        // 5xx = Server Error HTTP code
                        res.status(520).send({ "error": _context14.t3.toString() });

                      case 66:
                      case 'end':
                        return _context14.stop();
                    }
                  }
                }, _callee14, _this3, [[0, 62]]);
              }));

              return function manifestHandler(_x23, _x24) {
                return _ref20.apply(this, arguments);
              };
            }();

            app.get('/', manifestHandler);
            app.get('/manifest', manifestHandler);
            app.get('/index.exp', manifestHandler);
            app.post('/logs', function () {
              var _ref22 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee15(req, res) {
                var deviceId, deviceName;
                return _regenerator2.default.wrap(function _callee15$(_context15) {
                  while (1) {
                    switch (_context15.prev = _context15.next) {
                      case 0:
                        try {
                          deviceId = req.get('Device-Id');
                          deviceName = req.get('Device-Name');

                          if (deviceId && deviceName && req.body) {
                            _handleDeviceLogs(projectRoot, deviceId, deviceName, req.body);
                          }
                        } catch (e) {
                          ProjectUtils.logError(projectRoot, 'exponent', 'Error getting device logs: ' + e + ' ' + e.stack);
                        }
                        res.send('Success');

                      case 2:
                      case 'end':
                        return _context15.stop();
                    }
                  }
                }, _callee15, _this3);
              }));

              return function (_x25, _x26) {
                return _ref22.apply(this, arguments);
              };
            }());

            _context16.next = 21;
            return _getFreePortAsync(19000);

          case 21:
            exponentServerPort = _context16.sent;
            _context16.next = 24;
            return ProjectSettings.setPackagerInfoAsync(projectRoot, {
              exponentServerPort: exponentServerPort
            });

          case 24:
            server = app.listen(exponentServerPort, function () {
              var host = server.address().address;
              var port = server.address().port;

              ProjectUtils.logDebug(projectRoot, 'exponent', 'Local server listening at http://' + host + ':' + port);
            });


            _projectRootToExponentServer[projectRoot] = server;
            _context16.next = 28;
            return Exp.saveRecentExpRootAsync(projectRoot);

          case 28:
          case 'end':
            return _context16.stop();
        }
      }
    }, _callee16, this);
  }));

  return function startExponentServerAsync(_x22) {
    return _ref19.apply(this, arguments);
  };
}();

// This only works when called from the same process that called
// startExponentServerAsync.


var stopExponentServerAsync = exports.stopExponentServerAsync = function () {
  var _ref23 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee17(projectRoot) {
    var server;
    return _regenerator2.default.wrap(function _callee17$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            _context17.next = 2;
            return _assertLoggedInAsync();

          case 2:
            _assertValidProjectRoot(projectRoot);

            server = _projectRootToExponentServer[projectRoot];

            if (server) {
              _context17.next = 7;
              break;
            }

            ProjectUtils.logDebug(projectRoot, 'exponent', 'No Exponent server found for project at ' + projectRoot + '.');
            return _context17.abrupt('return');

          case 7:
            _context17.prev = 7;
            _context17.next = 10;
            return server.promise.close();

          case 10:
            _context17.next = 14;
            break;

          case 12:
            _context17.prev = 12;
            _context17.t0 = _context17['catch'](7);

          case 14:
            _projectRootToExponentServer[projectRoot] = null;

            _context17.next = 17;
            return ProjectSettings.setPackagerInfoAsync(projectRoot, {
              exponentServerPort: null
            });

          case 17:
          case 'end':
            return _context17.stop();
        }
      }
    }, _callee17, this, [[7, 12]]);
  }));

  return function stopExponentServerAsync(_x27) {
    return _ref23.apply(this, arguments);
  };
}();

var _connectToNgrokAsync = function () {
  var _ref24 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee18(projectRoot, args, hostnameAsync, ngrokPid) {
    var attempts = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
    var configPath, hostname, url;
    return _regenerator2.default.wrap(function _callee18$(_context18) {
      while (1) {
        switch (_context18.prev = _context18.next) {
          case 0:
            _context18.prev = 0;
            configPath = _path3.default.join(_UserSettings2.default.dotExponentHomeDirectory(), 'ngrok.yml');
            _context18.next = 4;
            return hostnameAsync();

          case 4:
            hostname = _context18.sent;
            _context18.next = 7;
            return _ngrok2.default.promise.connect((0, _extends3.default)({
              hostname: hostname,
              configPath: configPath
            }, args));

          case 7:
            url = _context18.sent;
            return _context18.abrupt('return', url);

          case 11:
            _context18.prev = 11;
            _context18.t0 = _context18['catch'](0);

            if (!(attempts >= 2)) {
              _context18.next = 19;
              break;
            }

            if (!_context18.t0.message) {
              _context18.next = 18;
              break;
            }

            throw new _XDLError2.default(_ErrorCode2.default.NGROK_ERROR, _context18.t0.toString());

          case 18:
            throw new _XDLError2.default(_ErrorCode2.default.NGROK_ERROR, (0, _stringify2.default)(_context18.t0));

          case 19:

            if (!attempts) {
              attempts = 0;
            }

            // Attempt to fix the issue

            if (!(_context18.t0.error_code && _context18.t0.error_code === 103)) {
              _context18.next = 32;
              break;
            }

            if (!(attempts === 0)) {
              _context18.next = 30;
              break;
            }

            if (!ngrokPid) {
              _context18.next = 26;
              break;
            }

            try {
              process.kill(ngrokPid, 'SIGKILL');
            } catch (e) {
              ProjectUtils.logDebug(projectRoot, 'exponent', 'Couldn\'t kill ngrok with PID ' + ngrokPid);
            }
            _context18.next = 28;
            break;

          case 26:
            _context18.next = 28;
            return _ngrok2.default.promise.kill();

          case 28:
            _context18.next = 32;
            break;

          case 30:
            _context18.next = 32;
            return Exp.resetProjectRandomnessAsync(projectRoot);

          case 32:
            _context18.next = 34;
            return (0, _delayAsync2.default)(100);

          case 34:
            return _context18.abrupt('return', _connectToNgrokAsync(projectRoot, args, hostnameAsync, null, attempts + 1));

          case 35:
          case 'end':
            return _context18.stop();
        }
      }
    }, _callee18, this, [[0, 11]]);
  }));

  return function _connectToNgrokAsync(_x28, _x29, _x30, _x31, _x32) {
    return _ref24.apply(this, arguments);
  };
}();

var startTunnelsAsync = exports.startTunnelsAsync = function () {
  var _ref25 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee21(projectRoot) {
    var _this4 = this;

    var packagerInfo, optUsername, username, packageShortName, exponentServerNgrokUrl, packagerNgrokUrl;
    return _regenerator2.default.wrap(function _callee21$(_context21) {
      while (1) {
        switch (_context21.prev = _context21.next) {
          case 0:
            _context21.next = 2;
            return _assertLoggedInAsync();

          case 2:
            _assertValidProjectRoot(projectRoot);

            _context21.next = 5;
            return ProjectSettings.readPackagerInfoAsync(projectRoot);

          case 5:
            packagerInfo = _context21.sent;

            if (packagerInfo.packagerPort) {
              _context21.next = 8;
              break;
            }

            throw new _XDLError2.default(_ErrorCode2.default.NO_PACKAGER_PORT, 'No packager found for project at ' + projectRoot + '.');

          case 8:
            if (packagerInfo.exponentServerPort) {
              _context21.next = 10;
              break;
            }

            throw new _XDLError2.default(_ErrorCode2.default.NO_EXPONENT_SERVER_PORT, 'No Exponent server found for project at ' + projectRoot + '.');

          case 10:
            _context21.next = 12;
            return stopTunnelsAsync(projectRoot);

          case 12:
            _context21.next = 14;
            return Android.startAdbReverseAsync(projectRoot);

          case 14:
            if (!_context21.sent) {
              _context21.next = 16;
              break;
            }

            ProjectUtils.logInfo(projectRoot, 'exponent', 'Sucessfully ran `adb reverse`. Localhost urls should work on the connected Android device.');

          case 16:
            _context21.next = 18;
            return User.getUsernameAsync();

          case 18:
            optUsername = _context21.sent;

            if (optUsername) {
              _context21.next = 21;
              break;
            }

            throw new _XDLError2.default(_ErrorCode2.default.NOT_LOGGED_IN, 'Not logged in');

          case 21:
            username = optUsername; // For Flow bug

            packageShortName = _path3.default.parse(projectRoot).base;
            _context21.prev = 23;
            _context21.next = 26;
            return _connectToNgrokAsync(projectRoot, {
              authtoken: _Config2.default.ngrok.authToken,
              port: packagerInfo.exponentServerPort,
              proto: 'http'
            }, (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee19() {
              var randomness;
              return _regenerator2.default.wrap(function _callee19$(_context19) {
                while (1) {
                  switch (_context19.prev = _context19.next) {
                    case 0:
                      _context19.next = 2;
                      return Exp.getProjectRandomnessAsync(projectRoot);

                    case 2:
                      randomness = _context19.sent;
                      return _context19.abrupt('return', [randomness, UrlUtils.domainify(username), UrlUtils.domainify(packageShortName), _Config2.default.ngrok.domain].join('.'));

                    case 4:
                    case 'end':
                      return _context19.stop();
                  }
                }
              }, _callee19, _this4);
            })), packagerInfo.ngrokPid);

          case 26:
            exponentServerNgrokUrl = _context21.sent;
            _context21.next = 29;
            return _connectToNgrokAsync(projectRoot, {
              authtoken: _Config2.default.ngrok.authToken,
              port: packagerInfo.packagerPort,
              proto: 'http'
            }, (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee20() {
              var randomness;
              return _regenerator2.default.wrap(function _callee20$(_context20) {
                while (1) {
                  switch (_context20.prev = _context20.next) {
                    case 0:
                      _context20.next = 2;
                      return Exp.getProjectRandomnessAsync(projectRoot);

                    case 2:
                      randomness = _context20.sent;
                      return _context20.abrupt('return', ['packager', randomness, UrlUtils.domainify(username), UrlUtils.domainify(packageShortName), _Config2.default.ngrok.domain].join('.'));

                    case 4:
                    case 'end':
                      return _context20.stop();
                  }
                }
              }, _callee20, _this4);
            })), packagerInfo.ngrokPid);

          case 29:
            packagerNgrokUrl = _context21.sent;
            _context21.next = 32;
            return ProjectSettings.setPackagerInfoAsync(projectRoot, {
              exponentServerNgrokUrl: exponentServerNgrokUrl,
              packagerNgrokUrl: packagerNgrokUrl,
              ngrokPid: _ngrok2.default.process().pid
            });

          case 32:
            _context21.next = 38;
            break;

          case 34:
            _context21.prev = 34;
            _context21.t0 = _context21['catch'](23);

            ProjectUtils.logError(projectRoot, 'exponent', 'Error starting tunnel: ' + _context21.t0.toString());
            throw _context21.t0;

          case 38:
          case 'end':
            return _context21.stop();
        }
      }
    }, _callee21, this, [[23, 34]]);
  }));

  return function startTunnelsAsync(_x34) {
    return _ref25.apply(this, arguments);
  };
}();

var stopTunnelsAsync = exports.stopTunnelsAsync = function () {
  var _ref28 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee22(projectRoot) {
    var packagerInfo, ngrokProcess, ngrokProcessPid;
    return _regenerator2.default.wrap(function _callee22$(_context22) {
      while (1) {
        switch (_context22.prev = _context22.next) {
          case 0:
            _context22.next = 2;
            return _assertLoggedInAsync();

          case 2:
            _assertValidProjectRoot(projectRoot);

            // This will kill all ngrok tunnels in the process.
            // We'll need to change this if we ever support more than one project
            // open at a time in XDE.

            _context22.next = 5;
            return ProjectSettings.readPackagerInfoAsync(projectRoot);

          case 5:
            packagerInfo = _context22.sent;
            ngrokProcess = _ngrok2.default.process();
            ngrokProcessPid = ngrokProcess ? ngrokProcess.pid : null;

            if (!(packagerInfo.ngrokPid && packagerInfo.ngrokPid !== ngrokProcessPid)) {
              _context22.next = 12;
              break;
            }

            // Ngrok is running in some other process. Kill at the os level.
            try {
              process.kill(packagerInfo.ngrokPid);
            } catch (e) {
              ProjectUtils.logDebug(projectRoot, 'exponent', 'Couldn\'t kill ngrok with PID ' + packagerInfo.ngrokPid);
            }
            _context22.next = 14;
            break;

          case 12:
            _context22.next = 14;
            return _ngrok2.default.promise.kill();

          case 14:
            _context22.next = 16;
            return ProjectSettings.setPackagerInfoAsync(projectRoot, {
              exponentServerNgrokUrl: null,
              packagerNgrokUrl: null,
              ngrokPid: null
            });

          case 16:
            _context22.next = 18;
            return Android.stopAdbReverseAsync(projectRoot);

          case 18:
          case 'end':
            return _context22.stop();
        }
      }
    }, _callee22, this);
  }));

  return function stopTunnelsAsync(_x35) {
    return _ref28.apply(this, arguments);
  };
}();

var setOptionsAsync = exports.setOptionsAsync = function () {
  var _ref29 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee23(projectRoot, options) {
    var schema;
    return _regenerator2.default.wrap(function _callee23$(_context23) {
      while (1) {
        switch (_context23.prev = _context23.next) {
          case 0:
            _context23.next = 2;
            return _assertLoggedInAsync();

          case 2:
            _assertValidProjectRoot(projectRoot);

            // Check to make sure all options are valid
            schema = _joi2.default.object().keys({
              packagerPort: _joi2.default.number().integer()
            });
            _context23.prev = 4;
            _context23.next = 7;
            return _joi2.default.promise.validate(options, schema);

          case 7:
            _context23.next = 12;
            break;

          case 9:
            _context23.prev = 9;
            _context23.t0 = _context23['catch'](4);
            throw new _XDLError2.default(_ErrorCode2.default.INVALID_OPTIONS, _context23.t0.toString());

          case 12:
            _context23.next = 14;
            return ProjectSettings.setPackagerInfoAsync(projectRoot, options);

          case 14:
          case 'end':
            return _context23.stop();
        }
      }
    }, _callee23, this, [[4, 9]]);
  }));

  return function setOptionsAsync(_x36, _x37) {
    return _ref29.apply(this, arguments);
  };
}();

var getUrlAsync = exports.getUrlAsync = function () {
  var _ref30 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee24(projectRoot) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return _regenerator2.default.wrap(function _callee24$(_context24) {
      while (1) {
        switch (_context24.prev = _context24.next) {
          case 0:
            _context24.next = 2;
            return _assertLoggedInAsync();

          case 2:
            _assertValidProjectRoot(projectRoot);

            _context24.next = 5;
            return UrlUtils.constructManifestUrlAsync(projectRoot, options);

          case 5:
            return _context24.abrupt('return', _context24.sent);

          case 6:
          case 'end':
            return _context24.stop();
        }
      }
    }, _callee24, this);
  }));

  return function getUrlAsync(_x38, _x39) {
    return _ref30.apply(this, arguments);
  };
}();

var startAsync = exports.startAsync = function () {
  var _ref31 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee25(projectRoot) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var _ref32, exp;

    return _regenerator2.default.wrap(function _callee25$(_context25) {
      while (1) {
        switch (_context25.prev = _context25.next) {
          case 0:
            _context25.next = 2;
            return _assertLoggedInAsync();

          case 2:
            _assertValidProjectRoot(projectRoot);

            Analytics.logEvent('Start Project', {
              projectRoot: projectRoot
            });

            _context25.next = 6;
            return startExponentServerAsync(projectRoot);

          case 6:
            _context25.next = 8;
            return startReactNativeServerAsync(projectRoot, options);

          case 8:
            _context25.next = 10;
            return startTunnelsAsync(projectRoot);

          case 10:
            _context25.next = 12;
            return ProjectUtils.readConfigJsonAsync(projectRoot);

          case 12:
            _ref32 = _context25.sent;
            exp = _ref32.exp;
            return _context25.abrupt('return', exp);

          case 15:
          case 'end':
            return _context25.stop();
        }
      }
    }, _callee25, this);
  }));

  return function startAsync(_x41, _x42) {
    return _ref31.apply(this, arguments);
  };
}();

var stopAsync = exports.stopAsync = function () {
  var _ref33 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee26(projectRoot) {
    return _regenerator2.default.wrap(function _callee26$(_context26) {
      while (1) {
        switch (_context26.prev = _context26.next) {
          case 0:
            _context26.next = 2;
            return stopTunnelsAsync(projectRoot);

          case 2:
            _context26.next = 4;
            return stopReactNativeServerAsync(projectRoot);

          case 4:
            _context26.next = 6;
            return stopExponentServerAsync(projectRoot);

          case 6:
          case 'end':
            return _context26.stop();
        }
      }
    }, _callee26, this);
  }));

  return function stopAsync(_x44) {
    return _ref33.apply(this, arguments);
  };
}();

require('instapromise');

var _bodyParser = require('body-parser');

var _bodyParser2 = _interopRequireDefault(_bodyParser);

var _child_process = require('child_process');

var _child_process2 = _interopRequireDefault(_child_process);

var _delayAsync = require('delay-async');

var _delayAsync2 = _interopRequireDefault(_delayAsync);

var _express = require('express');

var _express2 = _interopRequireDefault(_express);

var _formData = require('form-data');

var _formData2 = _interopRequireDefault(_formData);

var _freeportAsync = require('freeport-async');

var _freeportAsync2 = _interopRequireDefault(_freeportAsync);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _joi = require('joi');

var _joi2 = _interopRequireDefault(_joi);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _ngrok = require('ngrok');

var _ngrok2 = _interopRequireDefault(_ngrok);

var _path2 = require('path');

var _path3 = _interopRequireDefault(_path2);

var _request = require('request');

var _request2 = _interopRequireDefault(_request);

var _spawnAsync = require('@exponent/spawn-async');

var _spawnAsync2 = _interopRequireDefault(_spawnAsync);

var _treeKill = require('tree-kill');

var _treeKill2 = _interopRequireDefault(_treeKill);

var _Analytics = require('./Analytics');

var Analytics = _interopRequireWildcard(_Analytics);

var _Android = require('./Android');

var Android = _interopRequireWildcard(_Android);

var _Api = require('./Api');

var _Api2 = _interopRequireDefault(_Api);

var _Config = require('./Config');

var _Config2 = _interopRequireDefault(_Config);

var _Doctor = require('./project/Doctor');

var Doctor = _interopRequireWildcard(_Doctor);

var _ErrorCode = require('./ErrorCode');

var _ErrorCode2 = _interopRequireDefault(_ErrorCode);

var _Exp = require('./Exp');

var Exp = _interopRequireWildcard(_Exp);

var _ProjectSettings = require('./ProjectSettings');

var ProjectSettings = _interopRequireWildcard(_ProjectSettings);

var _ProjectUtils = require('./project/ProjectUtils');

var ProjectUtils = _interopRequireWildcard(_ProjectUtils);

var _UrlUtils = require('./UrlUtils');

var UrlUtils = _interopRequireWildcard(_UrlUtils);

var _User = require('./User');

var User = _interopRequireWildcard(_User);

var _UserSettings = require('./UserSettings');

var _UserSettings2 = _interopRequireDefault(_UserSettings);

var _Watchman = require('./Watchman');

var Watchman = _interopRequireWildcard(_Watchman);

var _XDLError = require('./XDLError');

var _XDLError2 = _interopRequireDefault(_XDLError);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MINIMUM_BUNDLE_SIZE = 500;

var _projectRootToExponentServer = {};

var _cachedSignedManifest = {
  manifestString: null,
  signedManifest: null
};

function _stripPackagerOutputBox(output) {
  var re = /Running packager on port (\d+)/;
  var found = output.match(re);
  if (found && found.length >= 2) {
    return 'Running packager on port ' + found[1] + '\n';
  } else {
    return null;
  }
}

function _processPackagerLine(line) {
  // [10:02:59 AM]
  var timestampRe = /\s*\[\d+\:\d+\:\d+\ (AM)?(PM)?\]\s+/;
  // [11/8/2016, 10:02:59 AM]
  var sdk11AndUpTimestampRe = /\s*\[\d+\/\d+\/\d+, \d+\:\d+\:\d+\ (AM)?(PM)?\]\s+/;
  return line.replace(timestampRe, '').replace(sdk11AndUpTimestampRe, '');
}

function _logPackagerOutput(projectRoot, level, data) {
  var output = data.toString();
  if (output.includes('─────')) {
    output = _stripPackagerOutputBox(output);
    if (output) {
      ProjectUtils.logInfo(projectRoot, 'exponent', output);
    }
    return;
  }

  if (!output) {
    return;
  }

  // Fix watchman if it's being dumb
  if (Watchman.isPlatformSupported() && output.includes('watchman watch-del')) {
    _restartWatchmanAsync(projectRoot);
    return;
  }

  var lines = output.split(/\r?\n/);
  for (var i = 0; i < lines.length; i++) {
    lines[i] = _processPackagerLine(lines[i]);
  }
  output = lines.join('\n');

  if (level === 'info') {
    ProjectUtils.logInfo(projectRoot, 'packager', output);
  } else {
    ProjectUtils.logError(projectRoot, 'packager', output);
  }
}

function _handleDeviceLogs(projectRoot, deviceId, deviceName, logs) {
  for (var i = 0; i < logs.length; i++) {
    var log = logs[i];

    var body = typeof log.body === 'string' ? [log.body] : log.body;
    var string = body.map(function (obj) {
      if (typeof obj === 'undefined') {
        return 'undefined';
      }
      if (obj === 'null') {
        return 'null';
      }

      if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean') {
        return obj;
      }

      try {
        return (0, _stringify2.default)(obj);
      } catch (e) {
        return obj.toString();
      }
    }).join(' ');

    var level = log.level;
    var groupDepth = log.groupDepth;
    var shouldHide = log.shouldHide;
    ProjectUtils.logWithLevel(projectRoot, level, {
      tag: 'device',
      deviceId: deviceId,
      deviceName: deviceName,
      groupDepth: groupDepth,
      shouldHide: shouldHide
    }, string);
  }
}

function _nodePathForProjectRoot(projectRoot) {
  var paths = [];
  var directory = _path3.default.resolve(projectRoot);
  while (true) {
    paths.push(_path3.default.join(directory, 'node_modules'));
    var parentDirectory = _path3.default.dirname(directory);
    if (directory === parentDirectory) {
      break;
    }
    directory = parentDirectory;
  }
  return paths.join(_path3.default.delimiter);
}
//# sourceMappingURL=__sourcemaps__/Project.js.map
