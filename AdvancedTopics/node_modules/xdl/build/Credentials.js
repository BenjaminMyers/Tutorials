'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fetchPushCertificates = exports.ensureAppId = exports.fetchAppleCertificates = exports.validateCredentialsForPlatform = exports.removeCredentialsForPlatform = exports.updateCredentialsForPlatform = exports.credentialsExistForPlatformAsync = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var credentialsExistForPlatformAsync = exports.credentialsExistForPlatformAsync = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(_ref2) {
    var username = _ref2.username,
        experienceName = _ref2.experienceName,
        bundleIdentifier = _ref2.bundleIdentifier,
        platform = _ref2.platform;

    var _ref3, err, credentials;

    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _Api2.default.callMethodAsync('getCredentials', [], 'post', {
              username: username,
              experienceName: experienceName,
              bundleIdentifier: bundleIdentifier,
              platform: platform,
              decrypt: false
            });

          case 2:
            _ref3 = _context.sent;
            err = _ref3.err;
            credentials = _ref3.credentials;

            if (!err) {
              _context.next = 7;
              break;
            }

            throw new Error('Error fetching credentials.');

          case 7:
            return _context.abrupt('return', credentials);

          case 8:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function credentialsExistForPlatformAsync(_x) {
    return _ref.apply(this, arguments);
  };
}(); /**
      * 
      * @providesModule XDLCredentials
      */

var updateCredentialsForPlatform = exports.updateCredentialsForPlatform = function () {
  var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(platform, newCredentials, metadata) {
    var _ref5, err, credentials;

    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return _Api2.default.callMethodAsync('updateCredentials', [], 'post', (0, _extends3.default)({
              credentials: newCredentials,
              platform: platform
            }, metadata));

          case 2:
            _ref5 = _context2.sent;
            err = _ref5.err;
            credentials = _ref5.credentials;

            if (!(err || !credentials)) {
              _context2.next = 7;
              break;
            }

            throw new Error('Error updating credentials.');

          case 7:
            return _context2.abrupt('return');

          case 8:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function updateCredentialsForPlatform(_x2, _x3, _x4) {
    return _ref4.apply(this, arguments);
  };
}();

var removeCredentialsForPlatform = exports.removeCredentialsForPlatform = function () {
  var _ref6 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(platform, metadata) {
    var _ref7, err;

    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return _Api2.default.callMethodAsync('deleteCredentials', [], 'post', (0, _extends3.default)({
              platform: platform
            }, metadata));

          case 2:
            _ref7 = _context3.sent;
            err = _ref7.err;

            if (!err) {
              _context3.next = 6;
              break;
            }

            throw new Error('Error deleting credentials.');

          case 6:
            return _context3.abrupt('return');

          case 7:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  return function removeCredentialsForPlatform(_x5, _x6) {
    return _ref6.apply(this, arguments);
  };
}();

var validateCredentialsForPlatform = exports.validateCredentialsForPlatform = function () {
  var _ref8 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4(platform, validationType, credentials, metadata) {
    var _ref9, isValid, error, errorCode;

    return _regenerator2.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return _Api2.default.callMethodAsync('validateCredentials', [], 'post', (0, _extends3.default)({
              credentials: credentials,
              platform: platform,
              validationType: validationType
            }, metadata));

          case 2:
            _ref9 = _context4.sent;
            isValid = _ref9.isValid;
            error = _ref9.error;
            errorCode = _ref9.errorCode;

            if (!(!isValid || error)) {
              _context4.next = 13;
              break;
            }

            _context4.t0 = errorCode;
            _context4.next = _context4.t0 === "ERROR_CREDENTIALS_VALIDATION_TWOFACTOR" ? 10 : _context4.t0 === "ERROR_CREDENTIALS_VALIDATION_USERPASS" ? 11 : 12;
            break;

          case 10:
            throw new _XDLError2.default(_ErrorCode2.default.CREDENTIAL_ERROR, 'Two factor authentication is not yet supported. Stay tuned!');

          case 11:
            throw new _XDLError2.default(_ErrorCode2.default.CREDENTIAL_ERROR, 'Username/Password is incorrect.');

          case 12:
            throw new Error('Server error when validating credentials.');

          case 13:
            return _context4.abrupt('return');

          case 14:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, this);
  }));

  return function validateCredentialsForPlatform(_x7, _x8, _x9, _x10) {
    return _ref8.apply(this, arguments);
  };
}();

var fetchAppleCertificates = exports.fetchAppleCertificates = function () {
  var _ref10 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5(metadata) {
    var _ref11, err, success, error, errorCode;

    return _regenerator2.default.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return _Api2.default.callMethodAsync('fetchAppleCertificates', [], 'post', (0, _extends3.default)({}, metadata));

          case 2:
            _ref11 = _context5.sent;
            err = _ref11.err;
            success = _ref11.success;
            error = _ref11.error;
            errorCode = _ref11.errorCode;

            if (!(err || !success || error)) {
              _context5.next = 13;
              break;
            }

            _context5.t0 = errorCode;
            _context5.next = _context5.t0 === 'ERROR_CERT_VALIDATION_MAXIMUM_CERTS_REACHED' ? 11 : 12;
            break;

          case 11:
            throw new _XDLError2.default(_ErrorCode2.default.CREDENTIAL_ERROR, 'Maximum number of certificates have been reached in your developer portal. Please delete them or choose one of them to upload to Exponent.');

          case 12:
            throw new Error('Unable to fetch new certificates.');

          case 13:
            return _context5.abrupt('return', success);

          case 14:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, this);
  }));

  return function fetchAppleCertificates(_x11) {
    return _ref10.apply(this, arguments);
  };
}();

var ensureAppId = exports.ensureAppId = function () {
  var _ref12 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee6(metadata) {
    var _ref13, err, success;

    return _regenerator2.default.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return _Api2.default.callMethodAsync('ensureAppId', [], 'post', (0, _extends3.default)({}, metadata));

          case 2:
            _ref13 = _context6.sent;
            err = _ref13.err;
            success = _ref13.success;

            if (!(err || !success)) {
              _context6.next = 7;
              break;
            }

            throw new Error('Unable to create app id.');

          case 7:
            return _context6.abrupt('return', success);

          case 8:
          case 'end':
            return _context6.stop();
        }
      }
    }, _callee6, this);
  }));

  return function ensureAppId(_x12) {
    return _ref12.apply(this, arguments);
  };
}();

var fetchPushCertificates = exports.fetchPushCertificates = function () {
  var _ref14 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee7(metadata) {
    var _ref15, err, success;

    return _regenerator2.default.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            _context7.next = 2;
            return _Api2.default.callMethodAsync('fetchPushCertificates', [], 'post', (0, _extends3.default)({}, metadata));

          case 2:
            _ref15 = _context7.sent;
            err = _ref15.err;
            success = _ref15.success;

            if (!(err || !success)) {
              _context7.next = 7;
              break;
            }

            throw new Error('Unable to fetch push certificates.');

          case 7:
            return _context7.abrupt('return', success);

          case 8:
          case 'end':
            return _context7.stop();
        }
      }
    }, _callee7, this);
  }));

  return function fetchPushCertificates(_x13) {
    return _ref14.apply(this, arguments);
  };
}();

var _Api = require('./Api');

var _Api2 = _interopRequireDefault(_Api);

var _ErrorCode = require('./ErrorCode');

var _ErrorCode2 = _interopRequireDefault(_ErrorCode);

var _XDLError = require('./XDLError');

var _XDLError2 = _interopRequireDefault(_XDLError);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
//# sourceMappingURL=__sourcemaps__/Credentials.js.map
