'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sourceBashLoginScriptsAsync = exports.addToPathAsync = exports.installShellCommandsAsync = exports.OSX_SOURCE_PATH = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _binaryInstalledAsync = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(name) {
    var result;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return (0, _spawnAsync2.default)('which', [name]);

          case 3:
            result = _context.sent;
            return _context.abrupt('return', result.stdout && result.stdout.length > 1 && !result.stdout.includes(OSX_SOURCE_PATH));

          case 7:
            _context.prev = 7;
            _context.t0 = _context['catch'](0);

            console.log(_context.t0.toString());
            return _context.abrupt('return', false);

          case 11:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this, [[0, 7]]);
  }));

  return function _binaryInstalledAsync(_x2) {
    return _ref.apply(this, arguments);
  };
}();

var _installBinaryAsync = function () {
  var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(name) {
    var result;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return _binaryInstalledAsync(name);

          case 2:
            if (!_context2.sent) {
              _context2.next = 4;
              break;
            }

            return _context2.abrupt('return', false);

          case 4:
            _context2.prev = 4;

            if (!runas) {
              runas = require('runas');
            }
            result = runas('/bin/ln', ['-s', _path2.default.join(_exponentBinaryDirectory(), name), _path2.default.join(INSTALL_PATH, name)], {
              admin: true
            });
            return _context2.abrupt('return', result === 0);

          case 10:
            _context2.prev = 10;
            _context2.t0 = _context2['catch'](4);

            _Logger2.default.notifications.error({ code: _NotificationCode2.default.INSTALL_SHELL_COMMANDS_RESULT }, 'Error installing ' + name + ': ' + _context2.t0.message);
            throw _context2.t0;

          case 14:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this, [[4, 10]]);
  }));

  return function _installBinaryAsync(_x3) {
    return _ref2.apply(this, arguments);
  };
}();

var installShellCommandsAsync = exports.installShellCommandsAsync = function () {
  var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3() {
    var binaries, installedBinaries, i;
    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return sourceBashLoginScriptsAsync();

          case 2:
            if (!(process.platform !== 'darwin')) {
              _context3.next = 4;
              break;
            }

            throw new _XDLError2.default(_ErrorCode2.default.PLATFORM_NOT_SUPPORTED, 'Platform not supported.');

          case 4:
            _context3.next = 6;
            return ncpAsync(OSX_SOURCE_PATH, _exponentBinaryDirectory());

          case 6:
            binaries = ['adb', 'watchman'];
            installedBinaries = [];
            i = 0;

          case 9:
            if (!(i < binaries.length)) {
              _context3.next = 17;
              break;
            }

            _context3.next = 12;
            return _installBinaryAsync(binaries[i]);

          case 12:
            if (!_context3.sent) {
              _context3.next = 14;
              break;
            }

            installedBinaries.push(binaries[i]);

          case 14:
            i++;
            _context3.next = 9;
            break;

          case 17:

            if (installedBinaries.length === 0) {
              _Logger2.default.notifications.warn({ code: _NotificationCode2.default.INSTALL_SHELL_COMMANDS_RESULT }, 'Shell commands ' + binaries.join(', ') + ' are already installed');
            } else {
              _Logger2.default.notifications.info({ code: _NotificationCode2.default.INSTALL_SHELL_COMMANDS_RESULT }, 'Installed ' + installedBinaries.join(', ') + ' to your shell');
            }

          case 18:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  return function installShellCommandsAsync() {
    return _ref3.apply(this, arguments);
  };
}();

var addToPathAsync = exports.addToPathAsync = function () {
  var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4(name) {
    var binariesPath, delimiter;
    return _regenerator2.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return sourceBashLoginScriptsAsync();

          case 2:
            _context4.next = 4;
            return _hasbinAsync(name);

          case 4:
            if (!_context4.sent) {
              _context4.next = 6;
              break;
            }

            return _context4.abrupt('return');

          case 6:

            if (!process.env.PATH) {
              process.env.PATH = '';
            }

            binariesPath = getBinariesPath();
            delimiter = process.platform === 'win32' ? ';' : ':';

            process.env.PATH = '' + process.env.PATH + delimiter + binariesPath;

          case 10:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, this);
  }));

  return function addToPathAsync(_x4) {
    return _ref4.apply(this, arguments);
  };
}();

var sourceBashLoginScriptsAsync = exports.sourceBashLoginScriptsAsync = function () {
  var _ref5 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5() {
    var currentPath, result, _result, regexResult;

    return _regenerator2.default.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            if (!(hasSourcedBashLoginScripts || process.platform === 'win32')) {
              _context5.next = 2;
              break;
            }

            return _context5.abrupt('return');

          case 2:
            if (!(_Config2.default.developerTool === 'exp')) {
              _context5.next = 4;
              break;
            }

            return _context5.abrupt('return');

          case 4:

            hasSourcedBashLoginScripts = true;
            currentPath = process.env.PATH ? process.env.PATH : '';

            if (!_exponentRCFileExists()) {
              _context5.next = 20;
              break;
            }

            _context5.prev = 7;
            _context5.next = 10;
            return (0, _spawnAsync2.default)(_path2.default.join(getBinariesPath(), 'get-path-bash'), {
              env: {
                PATH: ''
              }
            });

          case 10:
            result = _context5.sent;


            if (result.stderr) {
              _Logger2.default.global.warn('Error sourcing ~/.exponent/bashrc script: ' + result.stderr);
            }

            if (result.stdout) {
              if (currentPath.length > 0) {
                currentPath = currentPath + ':';
              }

              currentPath = '' + currentPath + result.stdout;
            }
            _context5.next = 18;
            break;

          case 15:
            _context5.prev = 15;
            _context5.t0 = _context5['catch'](7);

            _Logger2.default.global.warn('Error sourcing ~/.exponent/bashrc script: ' + _context5.t0.stderr);

          case 18:
            _context5.next = 44;
            break;

          case 20:
            _context5.prev = 20;

            // No ~/.exponent/bashrc file found. Run `env` in process.env.SHELL.
            _result = void 0;

            if (!/t?csh$/.test(process.env.SHELL)) {
              _context5.next = 28;
              break;
            }

            _context5.next = 25;
            return (0, _spawnAsync2.default)(process.env.SHELL, ['-d', '-c', 'env']);

          case 25:
            _result = _context5.sent;
            _context5.next = 37;
            break;

          case 28:
            if (!/zsh$/.test(process.env.SHELL)) {
              _context5.next = 34;
              break;
            }

            _context5.next = 31;
            return (0, _spawnAsync2.default)(process.env.SHELL, ['-l', '-c', '-i', 'env']);

          case 31:
            _result = _context5.sent;
            _context5.next = 37;
            break;

          case 34:
            _context5.next = 36;
            return (0, _spawnAsync2.default)(process.env.SHELL, ['-l', '-c', 'env']);

          case 36:
            _result = _context5.sent;

          case 37:

            if (_result.stderr) {
              _Logger2.default.global.warn('Error sourcing shell startup scripts: ' + _result.stderr + '.' + ERROR_MESSAGE);
            }

            if (_result.stdout) {
              regexResult = _result.stdout.match(/(^|\n)PATH=(.+)/);


              if (regexResult.length >= 3) {
                if (currentPath.length > 0) {
                  currentPath = currentPath + ':';
                }

                currentPath = '' + currentPath + regexResult[2];
              } else {
                _Logger2.default.global.warn('Error parsing shell startup scripts output: ' + _result.stderr + '.' + ERROR_MESSAGE);
              }
            }
            _context5.next = 44;
            break;

          case 41:
            _context5.prev = 41;
            _context5.t1 = _context5['catch'](20);

            _Logger2.default.global.warn('Error sourcing shell startup scripts: ' + _context5.t1.stderr + '.' + ERROR_MESSAGE);

          case 44:

            process.env.PATH = currentPath;

          case 45:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, this, [[7, 15], [20, 41]]);
  }));

  return function sourceBashLoginScriptsAsync() {
    return _ref5.apply(this, arguments);
  };
}();

exports.ncpAsync = ncpAsync;
exports.getBinariesPath = getBinariesPath;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _hasbin = require('hasbin');

var _hasbin2 = _interopRequireDefault(_hasbin);

var _mkdirp = require('mkdirp');

var _mkdirp2 = _interopRequireDefault(_mkdirp);

var _ncp = require('ncp');

var _ncp2 = _interopRequireDefault(_ncp);

var _spawnAsync = require('@exponent/spawn-async');

var _spawnAsync2 = _interopRequireDefault(_spawnAsync);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _Config = require('./Config');

var _Config2 = _interopRequireDefault(_Config);

var _Env = require('./Env');

var Env = _interopRequireWildcard(_Env);

var _ErrorCode = require('./ErrorCode');

var _ErrorCode2 = _interopRequireDefault(_ErrorCode);

var _Logger = require('./Logger');

var _Logger2 = _interopRequireDefault(_Logger);

var _NotificationCode = require('./NotificationCode');

var _NotificationCode2 = _interopRequireDefault(_NotificationCode);

var _UserSettings = require('./UserSettings');

var _UserSettings2 = _interopRequireDefault(_UserSettings);

var _XDLError = require('./XDLError');

var _XDLError2 = _interopRequireDefault(_XDLError);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var runas = void 0; // Crashes on windows, so load this lazily


var hasSourcedBashLoginScripts = false;

var OSX_SOURCE_PATH = exports.OSX_SOURCE_PATH = _path2.default.join(__dirname, '..', 'binaries', 'osx');
var INSTALL_PATH = '/usr/local/bin';
var ERROR_MESSAGE = '\nPlease create a file at ~/.exponent/bashrc that exports your PATH.';

function ncpAsync(source, dest) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  return new _promise2.default(function (resolve, reject) {
    (0, _ncp2.default)(source, dest, options, function (err) {
      if (err) {
        reject();
      } else {
        resolve();
      }
    });
  });
}

function _hasbinAsync(name) {
  return new _promise2.default(function (resolve, reject) {
    (0, _hasbin2.default)(name, function (result) {
      resolve(result);
    });
  });
}

function _exponentBinaryDirectory() {
  var dotExponentHomeDirectory = _UserSettings2.default.dotExponentHomeDirectory();
  var dir = _path2.default.join(dotExponentHomeDirectory, 'bin');
  _mkdirp2.default.sync(dir);
  return dir;
}

function getBinariesPath() {
  if (process.platform === 'darwin') {
    return _path2.default.join(__dirname, '..', 'binaries', 'osx');
  } else if (process.platform === 'win32') {
    return _path2.default.join(__dirname, '..', 'binaries', 'windows');
  } else if (process.platform === 'linux') {
    return _path2.default.join(__dirname, '..', 'binaries', 'linux');
  } else {
    throw new _XDLError2.default(_ErrorCode2.default.PLATFORM_NOT_SUPPORTED, 'Platform not supported.');
  }
}

function _exponentRCFileExists() {
  try {
    return _fs2.default.statSync(_path2.default.join(Env.home(), '.exponent', 'bashrc')).isFile();
  } catch (e) {
    return false;
  }
}
//# sourceMappingURL=__sourcemaps__/Binaries.js.map
