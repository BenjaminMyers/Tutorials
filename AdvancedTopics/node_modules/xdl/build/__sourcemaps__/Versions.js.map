{"version":3,"sources":["Versions.js"],"names":["sdkVersionsAsync","sdkVersions","facebookReactNativeVersions","forEach","value","facebookReactNativeVersion","add","facebookReactNativeVersionsAsync","valid","INVALID_VERSION","currentSdkVersion","key","major","minor","gt","facebookReactNativeVersionToExponentVersionAsync","gteSdkVersion","parseSdkVersionFromTag","expJson","sdkVersion","gte","e","tag","startsWith","substring"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;wEAmCO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACmB,cAAIA,gBAAJ,EADnB;;AAAA;AACDC,uBADC;AAEDC,uCAFC,GAE6B,mBAF7B;;;AAIL,6BAAEC,OAAF,CAAUF,WAAV,EAAuB,UAACG,KAAD,EAAW;AAChC,kBAAIA,MAAMC,0BAAV,EAAsC;AACpCH,4CAA4BI,GAA5B,CAAgCF,MAAMC,0BAAtC;AACD;AACF,aAJD;;AAJK,6CAUE,oBAAWH,2BAAX,CAVF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeK,gC;;;;;;yEAaf,kBAAgEF,0BAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACA,iBAAOG,KAAP,CAAaH,0BAAb,CADA;AAAA;AAAA;AAAA;;AAAA,kBAEG,uBAAa,oBAAUI,eAAvB,EAA2CJ,0BAA3C,2DAFH;;AAAA;AAAA;AAAA,mBAKmB,cAAIL,gBAAJ,EALnB;;AAAA;AAKDC,uBALC;AAMDS,6BANC,GAMmB,IANnB;;;AAQL,6BAAEP,OAAF,CAAUF,WAAV,EAAuB,UAACG,KAAD,EAAQO,GAAR,EAAgB;AACrC,kBAAI,iBAAOC,KAAP,CAAaR,MAAMC,0BAAnB,MAAmD,iBAAOO,KAAP,CAAaP,0BAAb,CAAnD,IACA,iBAAOQ,KAAP,CAAaT,MAAMC,0BAAnB,MAAmD,iBAAOQ,KAAP,CAAaR,0BAAb,CADnD,KAEC,CAACK,iBAAD,IAAsB,iBAAOI,EAAP,CAAUH,GAAV,EAAeD,iBAAf,CAFvB,CAAJ,EAE+D;AAC7DA,oCAAoBC,GAApB;AACD;AACF,aAND;;AARK,8CAgBED,iBAhBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeK,gD;;;;;QArCNC,a,GAAAA,a;QAgBAC,sB,GAAAA,sB;;AAvBhB;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;;;AAEO,SAASD,aAAT,CAAuBE,OAAvB,EAAqCC,UAArC,EAAkE;AACvE,MAAI,CAACD,QAAQC,UAAb,EAAyB;AACvB,WAAO,KAAP;AACD;;AAED,MAAID,QAAQC,UAAR,KAAuB,aAA3B,EAA0C;AACxC,WAAO,IAAP;AACD;;AAED,MAAI;AACF,WAAO,iBAAOC,GAAP,CAAWF,QAAQC,UAAnB,EAA+BA,UAA/B,CAAP;AACD,GAFD,CAEE,OAAOE,CAAP,EAAU;AACV,UAAM,uBAAa,oBAAUZ,eAAvB,EAA2CS,QAAQC,UAAnD,2DAAN;AACD;AACF;;AAEM,SAASF,sBAAT,CAAgCK,GAAhC,EAA6C;AAClD,MAAIA,IAAIC,UAAJ,CAAe,MAAf,CAAJ,EAA4B;AAC1B,WAAOD,IAAIE,SAAJ,CAAc,CAAd,CAAP;AACD;;AAED,SAAOF,GAAP;AACD","file":"../Versions.js","sourcesContent":["/**\n * @flow\n */\n\nimport _ from 'lodash';\nimport semver from 'semver';\n\nimport Api from './Api';\nimport ErrorCode from './ErrorCode';\nimport XDLError from './XDLError';\n\nexport function gteSdkVersion(expJson: any, sdkVersion: string): boolean {\n  if (!expJson.sdkVersion) {\n    return false;\n  }\n\n  if (expJson.sdkVersion === 'UNVERSIONED') {\n    return true;\n  }\n\n  try {\n    return semver.gte(expJson.sdkVersion, sdkVersion);\n  } catch (e) {\n    throw new XDLError(ErrorCode.INVALID_VERSION, `${expJson.sdkVersion} is not a valid version. Must be in the form of x.y.z`);\n  }\n}\n\nexport function parseSdkVersionFromTag(tag: string) {\n  if (tag.startsWith('sdk-')) {\n    return tag.substring(4);\n  }\n\n  return tag;\n}\n\nexport async function facebookReactNativeVersionsAsync(): Promise<Array<string>> {\n  let sdkVersions = await Api.sdkVersionsAsync();\n  let facebookReactNativeVersions = new Set();\n\n  _.forEach(sdkVersions, (value) => {\n    if (value.facebookReactNativeVersion) {\n      facebookReactNativeVersions.add(value.facebookReactNativeVersion);\n    }\n  });\n\n  return Array.from(facebookReactNativeVersions);\n}\n\nexport async function facebookReactNativeVersionToExponentVersionAsync(facebookReactNativeVersion: string): Promise<? string> {\n  if (!semver.valid(facebookReactNativeVersion)) {\n    throw new XDLError(ErrorCode.INVALID_VERSION, `${facebookReactNativeVersion} is not a valid version. Must be in the form of x.y.z`);\n  }\n\n  let sdkVersions = await Api.sdkVersionsAsync();\n  let currentSdkVersion = null;\n\n  _.forEach(sdkVersions, (value, key) => {\n    if (semver.major(value.facebookReactNativeVersion) === semver.major(facebookReactNativeVersion) &&\n        semver.minor(value.facebookReactNativeVersion) === semver.minor(facebookReactNativeVersion) &&\n        (!currentSdkVersion || semver.gt(key, currentSdkVersion))) {\n      currentSdkVersion = key;\n    }\n  });\n\n  return currentSdkVersion;\n}\n"],"sourceRoot":"/Users/Jesse/Exponent/newuniverse/universe/dev/xdl/gulp/src"}