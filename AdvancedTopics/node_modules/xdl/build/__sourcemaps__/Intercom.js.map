{"version":3,"sources":["Intercom.js"],"names":["user_id","user_hash","_isWindowDefined","deviceInfo","Diagnostics","getDeviceInfoAsync","limitLengthForIntercom","console","error","data","app_id","_version","version","_isBooted","window","Intercom","IntercomUpdateStyle","update","trackEvent","showNewMessage","setVersionName","name","metadata","e","message"],"mappings":";;;;;;;;;;;;;;;;;;;;wEAaO,iBAAsBA,OAAtB,EAAwCC,SAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,iBAECC,kBAFD;AAAA;AAAA;AAAA;;AAGGC,sBAHH,GAGgB,EAHhB;AAAA;AAAA;AAAA,mBAMoBC,YAAYC,kBAAZ,CAA+B;AAChDC,sCAAwB;AADwB,aAA/B,CANpB;;AAAA;AAMCH,sBAND;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAUCI,oBAAQC,KAAR;;AAVD;AAaGC,gBAbH;AAcCC,sBAAQ,UAdT;AAeCV,8BAfD;AAgBCC;AAhBD,eAiBIE,UAjBJ;;;AAoBD,gBAAIQ,QAAJ,EAAc;AACZF,gDACKA,IADL;AAEEG,yBAASD;AAFX;AAID;;AAED,gBAAIE,SAAJ,EAAe;AACb,kBAAIb,OAAJ,EAAa;AACX;AACA;AACAc,uBAAOC,QAAP,CAAgB,QAAhB,EAA0BN,IAA1B;AACD,eAJD,MAIO;AACL;AACAK,uBAAOC,QAAP,CAAgB,UAAhB;AACAD,uBAAOC,QAAP,CAAgB,MAAhB,EAAwBN,IAAxB;AACD;AACF,aAVD,MAUO;AACLK,qBAAOC,QAAP,CAAgB,MAAhB,EAAwBN,IAAxB;AACAI,0BAAY,IAAZ;AACD;AACDC,mBAAOE,mBAAP;;AAzCC;AAAA;AAAA;;AAAA;AAAA;AAAA;;AA4CHT,oBAAQC,KAAR;;AA5CG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeS,M;;;;;QAgDNC,U,GAAAA,U;QAUAC,c,GAAAA,c;QAUAC,c,GAAAA,c;;AA7EhB;;IAAYhB,W;;;;;;AAEZ,IAAIO,iBAAJ;;AACA,IAAIE,YAAY,KAAhB;;AAEA,SAASX,gBAAT,GAA4B;AAC1B,SAAO,OAAOY,MAAP,KAAmB,WAAnB,IAAkCA,MAAlC,IAA4CA,OAAOC,QAA1D;AACD;;AAkDM,SAASG,UAAT,CAAoBG,IAApB,EAAkCC,QAAlC,EAAiD;AACtD,MAAI;AACF,QAAIpB,kBAAJ,EAAwB;AACtBY,aAAOC,QAAP,CAAgB,YAAhB,EAA8BM,IAA9B,EAAoCC,QAApC;AACD;AACF,GAJD,CAIE,OAAOC,CAAP,EAAU;AACVhB,YAAQC,KAAR,CAAce,CAAd;AACD;AACF;;AAEM,SAASJ,cAAT,CAAwBK,OAAxB,EAAyC;AAC9C,MAAI;AACF,QAAItB,kBAAJ,EAAwB;AACtBY,aAAOC,QAAP,CAAgB,gBAAhB,EAAkCS,OAAlC;AACD;AACF,GAJD,CAIE,OAAOD,CAAP,EAAU;AACVhB,YAAQC,KAAR,CAAce,CAAd;AACD;AACF;;AAEM,SAASH,cAAT,CAAwBC,IAAxB,EAAsC;AAC3CV,aAAWU,IAAX;AACD","file":"../Intercom.js","sourcesContent":["/**\n * @flow\n */\n\nimport * as Diagnostics from './Diagnostics';\n\nlet _version;\nlet _isBooted = false;\n\nfunction _isWindowDefined() {\n  return typeof(window) !== 'undefined' && window && window.Intercom;\n}\n\nexport async function update(user_id: ?string, user_hash: ?string) {\n  try {\n    if (_isWindowDefined()) {\n      let deviceInfo = {};\n\n      try {\n        deviceInfo = await Diagnostics.getDeviceInfoAsync({\n          limitLengthForIntercom: true,\n        });\n      } catch (e) {\n        console.error(e);\n      }\n\n      let data = {\n        app_id: 'fhlr5ht1',\n        user_id,\n        user_hash,\n        ...deviceInfo,\n      };\n\n      if (_version) {\n        data = {\n          ...data,\n          version: _version,\n        };\n      }\n\n      if (_isBooted) {\n        if (user_id) {\n          // Call update so that any conversations carry over from the logged out to\n          // the logged in user.\n          window.Intercom('update', data);\n        } else {\n          // Was logged in and is now logging out, restart intercom.\n          window.Intercom('shutdown');\n          window.Intercom('boot', data);\n        }\n      } else {\n        window.Intercom('boot', data);\n        _isBooted = true;\n      }\n      window.IntercomUpdateStyle();\n    }\n  } catch (e) {\n    console.error(e);\n  }\n}\n\nexport function trackEvent(name: string, metadata: any) {\n  try {\n    if (_isWindowDefined()) {\n      window.Intercom('trackEvent', name, metadata);\n    }\n  } catch (e) {\n    console.error(e);\n  }\n}\n\nexport function showNewMessage(message: string) {\n  try {\n    if (_isWindowDefined()) {\n      window.Intercom('showNewMessage', message);\n    }\n  } catch (e) {\n    console.error(e);\n  }\n}\n\nexport function setVersionName(name: string) {\n  _version = name;\n}\n"],"sourceRoot":"/Users/Jesse/Exponent/newuniverse/universe/dev/xdl/gulp/src"}