{"version":3,"sources":["Diagnostics.js"],"names":["info","User","getCurrentUserAsync","user","username","exponentHome","dotExponentHomeDirectory","infoJsonFile","join","writeAsync","tempDir","Env","home","archivePath","Binaries","ncpAsync","filter","filename","includes","settingsJsonFile","SETTINGS_FILE_NAME","readAsync","settingsJson","accessToken","console","error","compress","sync","file","createReadStream","form","append","callMethodAsync","response","url","_uploadLogsAsync","options","sourceBashLoginScriptsAsync","whichCommand","process","platform","result","nodeVersion","trim","stdout","nodePath","npmVersion","npmPath","Watchman","getVersionAsync","watchmanVersion","watchmanPath","adbVersion","adbPath","path","env","PATH","shell","SHELL","homedir","nvmPath","NVM_PATH","lang","LANG","dirname","__dirname","memoryFree","_formatBytes","freemem","memoryTotal","totalmem","ip","address","hostname","diskusage","promise","check","diskAvailable","available","diskFree","free","diskTotal","total","xdeProcesses","execSync","toString","e","numXdeProcesses","watchmanProcesses","numWatchmanProcesses","ngrokProcesses","numNgrokProcesses","xcrunVersion","xcodebuildVersion","launchctlLimit","uploadLogs","limitLengthForIntercom","mapValues","value","length","startsWith","substring","getDeviceInfoAsync","require","bytes","toFixed"],"mappings":"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","file":"../Diagnostics.js","sourcesContent":["/**\n * @flow\n */\n\nimport 'instapromise';\n\nimport _ from 'lodash';\nimport child_process from 'child_process';\nimport FormData from 'form-data';\nimport fs from 'fs';\nimport ip from 'ip';\nimport JsonFile from '@exponent/json-file';\nimport os from 'os';\nimport path from 'path';\nimport rimraf from 'rimraf';\nimport spawnAsync from '@exponent/spawn-async';\nimport targz from 'tar.gz';\n\nimport Api from './Api';\nimport * as Binaries from './Binaries';\nimport * as Env from './Env';\nimport * as User from './User';\nimport UserSettings from './UserSettings';\nimport * as Watchman from './Watchman';\n\n// requires python, so might not be installed\nlet diskusage;\ntry {\n  diskusage = require('diskusage');\n} catch (e) {}\n\nasync function _uploadLogsAsync(info) {\n  let user = await User.getCurrentUserAsync();\n  let username = user ? user.username : 'anonymous';\n\n  // write info to file\n  let exponentHome = UserSettings.dotExponentHomeDirectory();\n  let infoJsonFile = new JsonFile(path.join(exponentHome, 'debug-info.json'));\n  await infoJsonFile.writeAsync(info);\n\n  // copy files to tempDir\n  let tempDir = path.join(Env.home(), `${username}-diagnostics`);\n  let archivePath = path.join(exponentHome, 'diagnostics.tar.gz');\n  await Binaries.ncpAsync(exponentHome, tempDir, {\n    filter: (filename) => {\n      if (filename.includes('diagnostics') || filename.includes('starter-app-cache') || filename.includes('android-apk-cache') || filename.includes('ios-simulator-app-cache')) {\n        return false;\n      } else {\n        return true;\n      }\n    },\n  });\n\n  // remove access token\n  try {\n    let settingsJsonFile = new JsonFile(path.join(tempDir, UserSettings.SETTINGS_FILE_NAME));\n    let settingsJson = await settingsJsonFile.readAsync();\n    settingsJson.accessToken = 'redacted';\n    await settingsJsonFile.writeAsync(settingsJson);\n  } catch (e) {\n    console.error(e);\n  }\n\n  // compress\n  await targz().compress(tempDir, archivePath);\n  rimraf.sync(tempDir);\n\n  // upload\n  let file = fs.createReadStream(archivePath);\n  let form = new FormData();\n  form.append('archive', file);\n\n  let response = await Api.callMethodAsync('uploadDiagnostics', [{}], 'put', form);\n  return response.url;\n}\n\n/* eslint-disable prefer-template */\n// From http://stackoverflow.com/questions/15900485/correct-way-to-convert-size-in-bytes-to-kb-mb-gb-in-javascript\nfunction _formatBytes(bytes: number): string {\n  if (bytes >= 1000000000) { return (bytes / 1000000000).toFixed(2) + ' GB'; }\n  else if (bytes >= 1000000) { return (bytes / 1000000).toFixed(2) + ' MB'; }\n  else if (bytes >= 1000) { return (bytes / 1000).toFixed(2) + ' KB'; }\n  else if (bytes > 1) { return bytes + ' bytes'; }\n  else if (bytes === 1) { return bytes + '${bytes} byte'; }\n  else { return '0 bytes'; }\n}\n/* eslint-enable prefer-template */\n\nexport async function getDeviceInfoAsync(options: any = {}): Promise<any> {\n  let info = {};\n\n  await Binaries.sourceBashLoginScriptsAsync();\n  let whichCommand = (process.platform === 'win32') ? 'where' : 'which';\n\n  try {\n    let result = await spawnAsync('node', ['--version']);\n    info.nodeVersion = _.trim(result.stdout);\n  } catch (e) {}\n\n  try {\n    let result = await spawnAsync(whichCommand, ['node']);\n    info.nodePath = _.trim(result.stdout);\n  } catch (e) {}\n\n  try {\n    let result = await spawnAsync('npm', ['--version']);\n    info.npmVersion = _.trim(result.stdout);\n  } catch (e) {}\n\n  try {\n    let result = await spawnAsync(whichCommand, ['npm']);\n    info.npmPath = _.trim(result.stdout);\n  } catch (e) {}\n\n  try {\n    info.watchmanVersion = await Watchman.getVersionAsync();\n  } catch (e) {}\n\n  try {\n    let result = await spawnAsync(whichCommand, ['watchman']);\n    info.watchmanPath = _.trim(result.stdout);\n  } catch (e) {}\n\n  try {\n    let result = await spawnAsync('adb', ['version']);\n    info.adbVersion = _.trim(result.stdout);\n  } catch (e) {}\n\n  try {\n    let result = await spawnAsync(whichCommand, ['adb']);\n    info.adbPath = _.trim(result.stdout);\n  } catch (e) {}\n\n  info.path = process.env.PATH;\n  info.shell = process.env.SHELL;\n  info.home = os.homedir();\n  info.nvmPath = process.env.NVM_PATH;\n  info.lang = process.env.LANG;\n  info.dirname = __dirname;\n  info.memoryFree = _formatBytes(os.freemem());\n  info.memoryTotal = _formatBytes(os.totalmem());\n  info.ip = ip.address();\n  info.hostname = os.hostname();\n\n  if (diskusage) {\n    try {\n      let result = await diskusage.promise.check((process.platform === 'win32') ? 'c:' : '/');\n      info.diskAvailable = _formatBytes(result.available);\n      info.diskFree = _formatBytes(result.free);\n      info.diskTotal = _formatBytes(result.total);\n    } catch (e) {}\n  }\n\n  // TODO: fix these commands on linux\n  if (process.platform === 'darwin') { // || process.platform === 'linux') {\n    try {\n      info.xdeProcesses = _.trim(child_process.execSync('pgrep XDE | xargs ps -p').toString());\n    } catch (e) {}\n\n    try {\n      info.numXdeProcesses = _.trim(child_process.execSync('pgrep XDE | wc -l').toString());\n    } catch (e) {}\n\n    try {\n      info.watchmanProcesses = _.trim(child_process.execSync('pgrep watchman | xargs ps -p').toString());\n    } catch (e) {}\n\n    try {\n      info.numWatchmanProcesses = _.trim(child_process.execSync('pgrep watchman | wc -l').toString());\n    } catch (e) {}\n\n    try {\n      info.ngrokProcesses = _.trim(child_process.execSync('pgrep ngrok | xargs ps -p').toString());\n    } catch (e) {}\n\n    try {\n      info.numNgrokProcesses = _.trim(child_process.execSync('pgrep ngrok | wc -l').toString());\n    } catch (e) {}\n  }\n\n  if (process.platform === 'darwin') {\n    try {\n      let result = await spawnAsync('xcrun', ['--version']);\n      info.xcrunVersion = _.trim(result.stdout);\n    } catch (e) {}\n\n    try {\n      let result = await spawnAsync('xcodebuild', ['-version']);\n      info.xcodebuildVersion = _.trim(result.stdout);\n    } catch (e) {}\n\n    try {\n      let result = await spawnAsync('launchctl', ['limit']);\n      info.launchctlLimit = _.trim(result.stdout);\n    } catch (e) {}\n  }\n\n  if (options.uploadLogs) {\n    info.url = await _uploadLogsAsync(info);\n  }\n\n  if (options.limitLengthForIntercom) {\n    info = _.mapValues(info, (value) => {\n      if (value && value.length > 100 && !value.startsWith('http')) {\n        return value.substring(0, 100);\n      } else {\n        return value;\n      }\n    });\n  }\n\n  return info;\n}\n"],"sourceRoot":"/Users/Jesse/Exponent/newuniverse/universe/dev/xdl/gulp/src"}