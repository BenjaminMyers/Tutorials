{"version":3,"sources":["Exp.js"],"names":["root","pkg","exp","packageJsonForRoot","readAsync","expJsonForRoot","expConfigForRootAsync","pkgJson","main","entryPoint","hasSeparateIosAndAndroidFiles","_doesFileExist","join","_getPlatformSpecificEntryPoint","ENTRY_POINT_PLATFORM_TEMPLATE_STRING","determineEntryPointAsync","templateId","versionsAsync","versions","templateApp","i","templates","length","id","INVALID_OPTIONS","starterAppVersion","version","starterAppName","filename","starterAppPath","_starterAppCacheDirectory","url","_downloadStarterAppAsync","archive","dir","dotExponentHomeDirectory","tmpDir","tmpFile","binary","Binaries","getBinariesPath","console","error","message","stderr","_extractWindowsAsync","process","platform","stdio","cwd","__dirname","extract","_extractAsync","selectedDir","extraPackageJsonFields","opts","schema","object","keys","name","string","required","promise","validate","toString","Analytics","logEvent","fileExists","statSync","e","DIRECTORY_ALREADY_EXISTS","notifications","info","code","PROGRESS","getAsync","author","packageJsonFile","JsonFile","packageJson","data","description","writeAsync","readFile","mainJs","customMainJs","replace","writeFile","expJson","customExpJson","initGitRepo","createNewExpAsync","insideGit","global","debug","resolve","recentExpsJsonFile","cantReadFileDefault","recentExps","filter","x","unshift","slice","saveRecentExpRootAsync","icon","iconUrl","readableRoot","makePathReadable","expInfoAsync","expInfoSafeAsync","User","getUsernameAsync","username","Error","slug","sdkVersion","remotePackageName","remoteUsername","remoteFullPackageName","bundleIdentifierIOS","ios","bundleIdentifier","packageNameAndroid","android","package","args","getPublishInfoAsync","all","map","results","filteredResults","result","recentValidExpsAsync","recipient","url_","callMethodAsync","sendAsync","projectRoot","ProjectSettings","ps","randomness","urlRandomness","resetProjectRandomnessAsync","getProjectRandomnessAsync","UrlUtils","someRandomness","setAsync","sync","clearXDLCacheAsync","default","require","json5","file","isFile","endsWith","substring","getHomeDir","env","pth","homedir","substr"],"mappings":"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","file":"../Exp.js","sourcesContent":["/**\n * @flow\n */\n\nlet JsonFile = require('@exponent/json-file');\n\nimport 'instapromise';\n\nimport targz from 'tar.gz';\nimport download from 'download';\nimport existsAsync from 'exists-async';\nimport fs from 'fs';\nimport mkdirp from 'mkdirp';\nimport path from 'path';\nimport spawnAsync from '@exponent/spawn-async';\nimport joi from 'joi';\nimport rimraf from 'rimraf';\n\nimport * as Analytics from './Analytics';\nimport Api from './Api';\nimport * as Binaries from './Binaries';\nimport ErrorCode from './ErrorCode';\nimport Logger from './Logger';\nimport NotificationCode from './NotificationCode';\nimport * as User from './User';\nimport * as UrlUtils from './UrlUtils';\nimport UserSettings from './UserSettings';\nimport XDLError from './XDLError';\nimport * as ProjectSettings from './ProjectSettings';\n\nexport const ENTRY_POINT_PLATFORM_TEMPLATE_STRING = 'PLATFORM_GOES_HERE';\n\nexport { default as convertProjectAsync } from './project/Convert';\n\nexport function packageJsonForRoot(root: string) {\n  return new JsonFile(path.join(root, 'package.json'));\n}\n\nexport function expJsonForRoot(root: string) {\n  return new JsonFile(path.join(root, 'exp.json'), {json5: true});\n}\n\nexport async function expConfigForRootAsync(root: string) {\n  let pkg, exp;\n  try {\n    pkg = await packageJsonForRoot(root).readAsync();\n    exp = await expJsonForRoot(root).readAsync();\n  } catch (e) {\n    // exp or pkg missing\n  }\n\n  if (!exp && pkg) {\n    exp = pkg.exp;\n  }\n\n  return exp;\n}\n\nfunction _doesFileExist(file) {\n  try {\n    return fs.statSync(file).isFile();\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPlatformSpecificEntryPoint(entryPoint, platform) {\n  if (entryPoint.endsWith('.js')) {\n    return `${entryPoint.substring(0, entryPoint.length - 3)}.${platform}.js`;\n  } else {\n    return `${entryPoint}.${platform}.js`;\n  }\n}\n\n// You must call UrlUtils.getPlatformSpecificBundleUrl to remove the platform template string\nexport async function determineEntryPointAsync(root: string) {\n  let exp = await expConfigForRootAsync(root);\n  let pkgJson = packageJsonForRoot(root);\n  let pkg = await pkgJson.readAsync();\n  let { main } = pkg;\n\n  // entryPoint is relative to the packager root and main is relative\n  // to the project root. So if your rn-cli.config.js points to a different\n  // root than the project root, these can be different. Most of the time\n  // you should use main.\n  let entryPoint = main || 'index.js';\n  if (exp && exp.entryPoint) {\n    entryPoint = exp.entryPoint;\n  }\n\n  let hasSeparateIosAndAndroidFiles = false;\n  if (!_doesFileExist(path.join(root, entryPoint)) &&\n    (_doesFileExist(path.join(root, _getPlatformSpecificEntryPoint(entryPoint, 'android'))) || _doesFileExist(path.join(root, _getPlatformSpecificEntryPoint(entryPoint, 'ios'))))) {\n    hasSeparateIosAndAndroidFiles = true;\n  }\n\n  if (hasSeparateIosAndAndroidFiles) {\n    return _getPlatformSpecificEntryPoint(entryPoint, ENTRY_POINT_PLATFORM_TEMPLATE_STRING);\n  } else {\n    return entryPoint;\n  }\n}\n\nfunction _starterAppCacheDirectory() {\n  let dotExponentHomeDirectory = UserSettings.dotExponentHomeDirectory();\n  let dir = path.join(dotExponentHomeDirectory, 'starter-app-cache');\n  mkdirp.sync(dir);\n  return dir;\n}\n\nasync function _downloadStarterAppAsync(templateId) {\n  let versions = await Api.versionsAsync();\n  let templateApp = null;\n  for (let i = 0; i < versions.templates.length; i++) {\n    if (templateId === versions.templates[i].id) {\n      templateApp = versions.templates[i];\n    }\n  }\n\n  if (!templateApp) {\n    throw new XDLError(ErrorCode.INVALID_OPTIONS, `No template app with id ${templateId}.`);\n  }\n\n  let starterAppVersion = templateApp.version;\n  let starterAppName = `${templateId}-${starterAppVersion}`;\n  let filename = `${starterAppName}.tar.gz`;\n  let starterAppPath = path.join(_starterAppCacheDirectory(), filename);\n\n  if (await existsAsync(starterAppPath)) {\n    return {\n      starterAppPath,\n      starterAppName,\n    };\n  }\n\n  let url = `https://s3.amazonaws.com/exp-starter-apps/${filename}`;\n  await download(url, _starterAppCacheDirectory());\n  return {\n    starterAppPath,\n    starterAppName,\n  };\n}\n\nasync function _extractWindowsAsync(archive, starterAppName, dir) {\n  let dotExponentHomeDirectory = UserSettings.dotExponentHomeDirectory();\n  let tmpDir = path.join(dotExponentHomeDirectory, 'starter-app-cache', 'tmp');\n  let tmpFile = path.join(tmpDir, `${starterAppName}.tar`);\n  let binary = path.join(Binaries.getBinariesPath(), '7z1602-extra', '7za');\n  try {\n    await spawnAsync(binary, ['x', archive, '-aoa', `-o${tmpDir}`]);\n    await spawnAsync(binary, ['x', tmpFile, '-aoa', `-o${dir}`]);\n  } catch (e) {\n    console.error(e.message);\n    console.error(e.stderr);\n    throw e;\n  }\n}\n\nasync function _extractAsync(archive, starterAppName, dir) {\n  try {\n    if (process.platform === 'win32') {\n      await _extractWindowsAsync(archive, starterAppName, dir);\n    } else {\n      await spawnAsync('tar', ['-xf', archive, '-C', dir], {\n        stdio: 'inherit',\n        cwd: __dirname,\n      });\n    }\n  } catch (e) {\n    // tar.gz node module doesn't work consistently with big files, so only\n    // use it as a backup.\n    console.error(e.message);\n    await targz().extract(archive, dir);\n  }\n}\n\nexport async function createNewExpAsync(templateId: string, selectedDir: string, extraPackageJsonFields: any, opts: any) {\n  // Validate\n  let schema = joi.object().keys({\n    name: joi.string().required(),\n  });\n\n  // Should we validate that name is a valid name here?\n\n  try {\n    await joi.promise.validate(opts, schema);\n  } catch (e) {\n    throw new XDLError(ErrorCode.INVALID_OPTIONS, e.toString());\n  }\n\n  let name = opts.name;\n  let root = path.join(selectedDir, name);\n\n  Analytics.logEvent('New Project', {\n    selectedDir,\n    name,\n  });\n\n  let fileExists = true;\n  try {\n    // If file doesn't exist it will throw an error.\n    // Don't want to continue unless there is nothing there.\n    fs.statSync(root);\n  } catch (e) {\n    fileExists = false;\n  }\n\n  if (fileExists) {\n    throw new XDLError(ErrorCode.DIRECTORY_ALREADY_EXISTS, `That directory already exists. Please choose a different parent directory or project name.`);\n  }\n\n  // Download files\n  await mkdirp.promise(root);\n\n  Logger.notifications.info({code: NotificationCode.PROGRESS}, 'Downloading project files...');\n  let { starterAppPath, starterAppName } = await _downloadStarterAppAsync(templateId);\n\n  // Extract files\n  Logger.notifications.info({code: NotificationCode.PROGRESS}, 'Extracting project files...');\n  await _extractAsync(starterAppPath, starterAppName, root);\n\n  // Update files\n  Logger.notifications.info({code: NotificationCode.PROGRESS}, 'Customizing project...');\n\n  let author = await UserSettings.getAsync('email', null);\n  let packageJsonFile = new JsonFile(path.join(root, 'package.json'));\n  let packageJson = await packageJsonFile.readAsync();\n  packageJson = Object.assign(packageJson, extraPackageJsonFields);\n\n  let data = Object.assign(packageJson, {\n    name,\n    version: '0.0.0',\n    description: \"Hello Exponent!\",\n    author,\n  });\n\n  await packageJsonFile.writeAsync(data);\n\n  // Custom code for replacing __NAME__ in main.js\n  let mainJs = await fs.readFile.promise(path.join(root, 'main.js'), 'utf8');\n  let customMainJs = mainJs.replace(/__NAME__/g, data.name);\n  await fs.writeFile.promise(path.join(root, 'main.js'), customMainJs, 'utf8');\n\n  // Update exp.json\n  let expJson = await fs.readFile.promise(path.join(root, 'exp.json'), 'utf8');\n  let customExpJson = expJson.replace(/\\\"My New Project\\\"/, `\"${data.name}\"`).replace(/\\\"my-new-project\\\"/, `\"${data.name}\"`);\n  await fs.writeFile.promise(path.join(root, 'exp.json'), customExpJson, 'utf8');\n\n  await initGitRepo(root);\n\n  Logger.notifications.info({code: NotificationCode.PROGRESS}, 'Starting project...');\n\n  return root;\n}\n\nasync function initGitRepo(root: string) {\n  // let's see if we're in a git tree\n  let insideGit = true;\n  try {\n    await spawnAsync('git', ['rev-parse', '--is-inside-work-tree'], { cwd: root });\n    Logger.global.debug('New project is already inside of a git repo, skipping git init.');\n  } catch (e) {\n    insideGit = false;\n  }\n\n  if (!insideGit) {\n    try {\n      await spawnAsync('git', ['init'], { cwd: root });\n    } catch (e) {\n      // no-op -- this is just a convenience and we don't care if it fails\n      Logger.global.debug(`Unable to initialize git repo: ${e.stderr}`);\n    }\n  }\n}\n\nexport async function saveRecentExpRootAsync(root: string) {\n  root = path.resolve(root);\n\n  // Write the recent Exps JSON file\n  let recentExpsJsonFile = UserSettings.recentExpsJsonFile();\n  let recentExps = await recentExpsJsonFile.readAsync({cantReadFileDefault: []});\n  // Filter out copies of this so we don't get dupes in this list\n  recentExps = recentExps.filter(function(x) {\n    return x !== root;\n  });\n  recentExps.unshift(root);\n  return await recentExpsJsonFile.writeAsync(recentExps.slice(0, 100));\n}\n\nfunction getHomeDir(): string {\n  return process.env[(process.platform === 'win32') ? 'USERPROFILE' : 'HOME'] || '';\n}\n\nfunction makePathReadable(pth) {\n  let homedir = getHomeDir();\n  if (pth.substr(0, homedir.length) === homedir) {\n    return `~${pth.substr(homedir.length)}`;\n  } else {\n    return pth;\n  }\n}\n\nexport async function expInfoAsync(root: string) {\n  let pkgJson = packageJsonForRoot(root);\n\n  let name, description, icon;\n  try {\n    let exp = await expJsonForRoot(root).readAsync();\n    name = exp.name;\n    description = exp.description;\n    icon = exp.iconUrl;\n  } catch (err) {\n    let pkg = await pkgJson.readAsync();\n    name = pkg.name;\n    description = pkg.description;\n    icon = pkg.exp && pkg.exp.iconUrl;\n  }\n\n  return {\n    readableRoot: makePathReadable(root),\n    root,\n    name,\n    description,\n    icon,\n  };\n}\n\nexport async function expInfoSafeAsync(root: string) {\n  try {\n    return await expInfoAsync(root);\n  } catch (e) {\n    return null;\n  }\n}\n\ntype PublishInfo = {\n  args: {\n    username: string,\n    remoteUsername: string,\n    remotePackageName: string,\n    remoteFullPackageName: string,\n    bundleIdentifierIOS: ?string,\n    packageNameAndroid: ?string,\n  },\n};\n\n// TODO: remove / change, no longer publishInfo, this is just used for signing\nexport async function getPublishInfoAsync(root: string): Promise<PublishInfo> {\n  let username = await User.getUsernameAsync();\n  if (!username) {\n    throw new Error(`Can't get username!`);\n  }\n  let pkg: any;\n  let exp: any;\n\n  try {\n    pkg = await packageJsonForRoot(root).readAsync();\n    exp = await expJsonForRoot(root).readAsync();\n  } catch (e) {\n    // exp or pkg missing\n  }\n\n  let name;\n  let version;\n  // Support legacy package.json with exp\n  if (!exp && pkg && pkg.exp) {\n    exp = pkg.exp;\n    name = pkg.name;\n    version = pkg.version;\n  } else if (exp && pkg) {\n    name = exp.slug;\n    version = pkg.version || exp.version;\n  }\n\n  if (!exp || !exp.sdkVersion) {\n    throw new Error(`sdkVersion is missing from exp.json`);\n  }\n\n  if (!name) {\n    throw new Error(`slug field is missing from exp.json`);\n  }\n\n  if (!version) {\n    throw new Error(`Can't get version of package.`);\n  }\n\n  let remotePackageName = name;\n  let remoteUsername = username;\n  let remoteFullPackageName = `@${remoteUsername}/${remotePackageName}`;\n  let bundleIdentifierIOS = exp.ios ? exp.ios.bundleIdentifier : null;\n  let packageNameAndroid = exp.android ? exp.android.package : null;\n\n  return {\n    args: {\n      username,\n      remoteUsername,\n      remotePackageName,\n      remoteFullPackageName,\n      bundleIdentifierIOS,\n      packageNameAndroid, // TODO: this isn't used anywhere\n    },\n  };\n}\n\nexport async function recentValidExpsAsync() {\n  let recentExpsJsonFile = UserSettings.recentExpsJsonFile();\n  let recentExps = await recentExpsJsonFile.readAsync({cantReadFileDefault: []});\n\n  let results = await Promise.all(recentExps.map(expInfoSafeAsync));\n  let filteredResults = results.filter(result => result);\n  return filteredResults.slice(0, 5);\n}\n\nexport async function sendAsync(recipient: string, url_: string) {\n  let result = await Api.callMethodAsync('send', [recipient, url_]);\n  return result;\n}\n\n// TODO: figure out where these functions should live\nexport async function getProjectRandomnessAsync(projectRoot: string) {\n  let ps = await ProjectSettings.readAsync(projectRoot);\n  let randomness = ps.urlRandomness;\n  if (randomness) {\n    return randomness;\n  } else {\n    return resetProjectRandomnessAsync(projectRoot);\n  }\n}\n\nexport async function resetProjectRandomnessAsync(projectRoot: string) {\n  let randomness = UrlUtils.someRandomness();\n  ProjectSettings.setAsync(projectRoot, {'urlRandomness': randomness});\n  return randomness;\n}\n\nexport async function clearXDLCacheAsync() {\n  let dotExponentHomeDirectory = UserSettings.dotExponentHomeDirectory();\n  rimraf.sync(path.join(dotExponentHomeDirectory, 'ios-simulator-app-cache'));\n  rimraf.sync(path.join(dotExponentHomeDirectory, 'android-apk-cache'));\n  rimraf.sync(path.join(dotExponentHomeDirectory, 'starter-app-cache'));\n  Logger.notifications.info(`Cleared cache`);\n}\n"],"sourceRoot":"/Users/Jesse/Exponent/newuniverse/universe/dev/xdl/gulp/src"}