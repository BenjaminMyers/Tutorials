{"version":3,"sources":["__mocks__/graceful-fs.js"],"names":["fs","jest","genMockFromModule","noop","asyncCallback","cb","apply","mtime","getTime","Math","ceil","random","realpath","mockImpl","filepath","callback","node","getToNode","e","SYMLINK","readdirSync","readdir","Error","readFile","encoding","arguments","length","writeFile","data","writeNode","mkdir","mode","mkdirSync","stat","isDirectory","isSymbolicLink","statSync","lstatSync","open","path","error","fd","buffer","Buffer","position","read","writeOffset","bytesWritten","copy","close","undefined","filesystem","__setMockFilesystem","object","__getMockFilesystem","__addLoggedInUser","match","substring","parts","split","slice","forEach","part","err","code","module","exports"],"mappings":"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","file":"../../__mocks__/graceful-fs.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n'use strict';\n\nconst fs = jest.genMockFromModule('fs');\nconst noop = () => {};\n\nfunction asyncCallback(cb) {\n  return function() {\n    setImmediate(() => cb.apply(this, arguments));\n  };\n}\n\nconst mtime = {\n  getTime: () => Math.ceil(Math.random() * 10000000),\n};\n\nfs.realpath.mockImpl((filepath, callback) => {\n  callback = asyncCallback(callback);\n  let node;\n  try {\n    node = getToNode(filepath);\n  } catch (e) {\n    return callback(e);\n  }\n  if (node && typeof node === 'object' && node.SYMLINK != null) {\n    return callback(null, node.SYMLINK);\n  }\n  callback(null, filepath);\n});\n\nfs.readdirSync.mockImpl((filepath) => Object.keys(getToNode(filepath)));\n\nfs.readdir.mockImpl((filepath, callback) => {\n  callback = asyncCallback(callback);\n  let node;\n  try {\n    node = getToNode(filepath);\n    if (node && typeof node === 'object' && node.SYMLINK != null) {\n      node = getToNode(node.SYMLINK);\n    }\n  } catch (e) {\n    return callback(e);\n  }\n\n  if (!(node && typeof node === 'object' && node.SYMLINK == null)) {\n    return callback(new Error(filepath + ' is not a directory.'));\n  }\n\n  callback(null, Object.keys(node));\n});\n\nfs.readFile.mockImpl(function(filepath, encoding, callback) {\n  callback = asyncCallback(callback);\n  if (arguments.length === 2) {\n    callback = encoding;\n    encoding = null;\n  }\n\n  let node;\n  try {\n    node = getToNode(filepath);\n    // dir check\n    if (node && typeof node === 'object' && node.SYMLINK == null) {\n      callback(new Error('Error readFile a dir: ' + filepath));\n    }\n    return callback(null, node);\n  } catch (e) {\n    return callback(e);\n  }\n});\n\nfs.writeFile.mockImpl(function(filepath, data, encoding, callback) {\n  callback = asyncCallback(callback);\n  if (arguments.length === 2) {\n    callback = encoding;\n    encoding = null;\n  }\n\n  try {\n    writeNode(filepath, data);\n    return callback(null);\n  } catch (e) {\n    return callback(e);\n  }\n});\n\nfs.mkdir.mockImpl(function(filepath, mode, callback) {\n  callback = asyncCallback(callback);\n  if (arguments.length === 2) {\n    callback = mode;\n    mode = null;\n  }\n\n  try {\n    writeNode(filepath, null, true);\n    return callback(null);\n  } catch (e) {\n    return callback(e);\n  }\n});\n\nfs.mkdirSync.mockImpl((filepath, mode) => {\n  writeNode(filepath, null, true);\n});\n\nfs.stat.mockImpl((filepath, callback) => {\n  callback = asyncCallback(callback);\n  let node;\n  try {\n    node = getToNode(filepath);\n  } catch (e) {\n    callback(e);\n    return;\n  }\n\n  if (node.SYMLINK) {\n    fs.stat(node.SYMLINK, callback);\n    return;\n  }\n\n  if (node && typeof node === 'object') {\n    callback(null, {\n      isDirectory: () => true,\n      isSymbolicLink: () => false,\n      mtime,\n    });\n  } else {\n    callback(null, {\n      isDirectory: () => false,\n      isSymbolicLink: () => false,\n      mtime,\n    });\n  }\n});\n\nfs.statSync.mockImpl((filepath) => {\n  const node = getToNode(filepath);\n\n  if (node.SYMLINK) {\n    return fs.statSync(node.SYMLINK);\n  }\n\n  return {\n    isDirectory: () => node && typeof node === 'object',\n    isSymbolicLink: () => false,\n    mtime,\n  };\n});\n\nfs.lstatSync.mockImpl((filepath) => {\n  const node = getToNode(filepath);\n\n  if (node.SYMLINK) {\n    return {\n      isDirectory: () => false,\n      isSymbolicLink: () => true,\n      mtime,\n    };\n  }\n\n  return {\n    isDirectory: () => node && typeof node === 'object',\n    isSymbolicLink: () => false,\n    mtime,\n  };\n});\n\nfs.open.mockImpl(function(path) {\n  const callback = arguments[arguments.length - 1] || noop;\n  let data, error, fd;\n  try {\n    data = getToNode(path);\n  } catch (e) {\n    error = e;\n  }\n\n  if (error || data == null) {\n    error = Error(`ENOENT: no such file or directory, open ${path}`);\n  }\n  if (data != null) {\n    /* global Buffer: true */\n    fd = {buffer: new Buffer(data, 'utf8'), position: 0};\n  }\n\n  callback(error, fd);\n});\n\nfs.read.mockImpl((fd, buffer, writeOffset, length, position, callback = noop) => {\n  let bytesWritten;\n  try {\n    if (position == null || position < 0) {\n      ({position} = fd);\n    }\n    bytesWritten = fd.buffer.copy(buffer, writeOffset, position, position + length);\n    fd.position = position + bytesWritten;\n  } catch (e) {\n    callback(Error('invalid argument'));\n    return;\n  }\n  callback(null, bytesWritten, buffer);\n});\n\nfs.close.mockImpl((fd, callback = noop) => {\n  try {\n    fd.buffer = fs.position = undefined;\n  } catch (e) {\n    callback(Error('invalid argument'));\n    return;\n  }\n  callback(null);\n});\n\nlet filesystem = {\n  // 'home': {},\n};\n\nfs.__setMockFilesystem = (object) => filesystem = object;\nfs.__getMockFilesystem = () => filesystem;\nfs.__addLoggedInUser = () => {\n  filesystem['home']['.exponent']['exponent.json'] = JSON.stringify({\n    'accessToken': 'c-mD8xpssIS9mhIhNW01ZegQ',\n    'type': 'client',\n    'username': 'jesse',\n  });\n};\n\nfunction getToNode(filepath) {\n  // Ignore the drive for Windows paths.\n  if (filepath.match(/^[a-zA-Z]:\\\\/)) {\n    filepath = filepath.substring(2);\n  }\n\n  const parts = filepath.split(/[\\/\\\\]/);\n  if (parts[0] !== '') {\n    throw new Error('Make sure all paths are absolute.');\n  }\n  let node = filesystem;\n  parts.slice(1).forEach((part) => {\n    if (node && node.SYMLINK) {\n      node = getToNode(node.SYMLINK);\n    }\n    node = node[part];\n  });\n\n  if (!node) {\n    throw new Error('No file exists at: ' + filepath);\n  }\n\n  return node;\n}\n\nfunction writeNode(filepath, data, mkdir) {\n  // Ignore the drive for Windows paths.\n  if (filepath.match(/^[a-zA-Z]:\\\\/)) {\n    filepath = filepath.substring(2);\n  }\n\n  const parts = filepath.split(/[\\/\\\\]/);\n  if (parts[0] !== '') {\n    throw new Error('Make sure all paths are absolute.');\n  }\n  let node = filesystem;\n  parts.slice(1, parts.length - 1).forEach((part) => {\n    if (node && node.SYMLINK) {\n      node = getToNode(node.SYMLINK);\n    }\n    node = node[part];\n\n    if (!node) {\n      let err = new Error('Does not exist.');\n      err.code = 'ENOENT';\n      throw err;\n    }\n  });\n\n  if (mkdir) {\n    if (node[parts[parts.length - 1]]) {\n      throw new Error('Node already exists at: ' + filepath);\n    } else {\n      node[parts[parts.length - 1]] = {};\n    }\n  } else {\n    if (typeof node !== 'object' || node.SYMLINK) {\n      throw new Error('Error not a dir: ' + filepath);\n    }\n\n    node[parts[parts.length - 1]] = data;\n  }\n}\n\nmodule.exports = fs;\n"],"sourceRoot":"/Users/Jesse/Exponent/newuniverse/universe/dev/xdl/gulp/src"}