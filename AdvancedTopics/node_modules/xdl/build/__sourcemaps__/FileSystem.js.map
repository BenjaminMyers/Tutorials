{"version":3,"sources":["FileSystem.js"],"names":["dir","process","platform","osascript","openFinderToFolderAsync","openFolderAsync","openFolderInTerminalAppAsync","exec","openConsoleAsync","Binaries","sourceBashLoginScriptsAsync","openInEditorAsync","env","EXPONENT_EDITOR","PLATFORM_NOT_SUPPORTED","openProjectInEditorAsync","openFolderName","openConsoleName","require"],"mappings":";;;;;;;;;;;;;;;;wEAgCO,iBAA+BA,GAA/B;AAAA;AAAA;AAAA;AAAA;AAAA,kBACDC,QAAQC,QAAR,KAAqB,QADpB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAEUC,UAAUC,uBAAV,CAAkCJ,GAAlC,CAFV;;AAAA;AAAA;;AAAA;AAAA,kBAGMC,QAAQC,QAAR,KAAqB,OAH3B;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAIU,0BAAW,UAAX,EAAuB,CAACF,GAAD,CAAvB,CAJV;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeK,e;;;;;;yEAQf,kBAAgCL,GAAhC;AAAA;AAAA;AAAA;AAAA;AAAA,kBACDC,QAAQC,QAAR,KAAqB,QADpB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAEUC,UAAUG,4BAAV,CAAuCN,GAAvC,CAFV;;AAAA;AAAA;;AAAA;AAGE,gBAAIC,QAAQC,QAAR,KAAqB,OAAzB,EAAkC;AACvC,sCAAcK,IAAd,0BAA0CP,GAA1C;AACD;;AALI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeQ,gB;;;;;;yEAQf,kBAAwCR,GAAxC;AAAA;AAAA;AAAA;AAAA;AAAA,kBACDC,QAAQC,QAAR,KAAqB,QADpB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAKGO,SAASC,2BAAT,EALH;;AAAA;AAAA;AAAA,mBAMUP,UAAUQ,iBAAV,CAA4BX,GAA5B,EAAiCC,QAAQW,GAAR,CAAYC,eAA7C,CANV;;AAAA;AAAA;;AAAA;AAAA,kBAOMZ,QAAQC,QAAR,KAAqB,OAP3B;AAAA;AAAA;AAAA;;AAAA,kBAQG,uBAAa,oBAAUY,sBAAvB,EAA+C,wCAA/C,CARH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeC,wB;;;;;QAhCNC,c,GAAAA,c;QAQAC,e,GAAAA,e;;AApBhB;;;;AACA;;;;AAEA;;IAAYR,Q;;AACZ;;;;AACA;;;;;;;;AAEA,IAAIN,kBAAJ;;AACA,IAAIF,QAAQC,QAAR,KAAqB,QAAzB,EAAmC;AACjCC,cAAYe,QAAQ,qBAAR,CAAZ;AACD;;AAEM,SAASF,cAAT,GAA0B;AAC/B,MAAIf,QAAQC,QAAR,KAAqB,QAAzB,EAAmC;AACjC,WAAO,gBAAP;AACD,GAFD,MAEO,IAAID,QAAQC,QAAR,KAAqB,OAAzB,EAAkC;AACvC,WAAO,uBAAP;AACD;AACF;;AAEM,SAASe,eAAT,GAA2B;AAChC,MAAIhB,QAAQC,QAAR,KAAqB,QAAzB,EAAmC;AACjC,WAAO,kBAAP;AACD,GAFD,MAEO,IAAID,QAAQC,QAAR,KAAqB,OAAzB,EAAkC;AACvC,WAAO,aAAP;AACD;AACF","file":"../FileSystem.js","sourcesContent":["/**\n * @flow\n */\n\nimport child_process from 'child_process';\nimport spawnAsync from '@exponent/spawn-async';\n\nimport * as Binaries from './Binaries';\nimport ErrorCode from './ErrorCode';\nimport XDLError from './XDLError';\n\nlet osascript;\nif (process.platform === 'darwin') {\n  osascript = require('@exponent/osascript');\n}\n\nexport function openFolderName() {\n  if (process.platform === 'darwin') {\n    return 'Show in Finder';\n  } else if (process.platform === 'win32') {\n    return 'Show in File Explorer';\n  }\n}\n\nexport function openConsoleName() {\n  if (process.platform === 'darwin') {\n    return 'Open in Terminal';\n  } else if (process.platform === 'win32') {\n    return 'Open in Cmd';\n  }\n}\n\nexport async function openFolderAsync(dir: string) {\n  if (process.platform === 'darwin') {\n    return await osascript.openFinderToFolderAsync(dir);\n  } else if (process.platform === 'win32') {\n    return await spawnAsync('explorer', [dir]);\n  }\n}\n\nexport async function openConsoleAsync(dir: string) {\n  if (process.platform === 'darwin') {\n    return await osascript.openFolderInTerminalAppAsync(dir);\n  } else if (process.platform === 'win32') {\n    child_process.exec(`start cmd /K \"cd /d ${dir}\"`);\n  }\n}\n\nexport async function openProjectInEditorAsync(dir: string) {\n  if (process.platform === 'darwin') {\n\n    // This will use the ENV var $EXPONENT_EDITOR if set, or else will try various\n    // popular editors, looking for one that is open, or if none are, one that is installed\n    await Binaries.sourceBashLoginScriptsAsync();\n    return await osascript.openInEditorAsync(dir, process.env.EXPONENT_EDITOR);\n  } else if (process.platform === 'win32') {\n    throw new XDLError(ErrorCode.PLATFORM_NOT_SUPPORTED, 'openProjectInEditorAsync not supported');\n  }\n}\n"],"sourceRoot":"/Users/Jesse/Exponent/newuniverse/universe/dev/xdl/gulp/src"}