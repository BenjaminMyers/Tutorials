{"version":3,"sources":["Api.js"],"names":["url","method","requestBody","Session","clientIdAsync","clientId","readAsync","username","headers","options","response","body","getHeaders","json","promise","responseBody","isString","responseObj","JSON","parse","Error","err","ApiError","code","serverError","_callMethodAsync","message","_isApiError","ROOT_BASE_URL","api","scheme","host","port","API_BASE_URL","ApiClient","methodName","args","encodeURIComponent","path","callPathAsync","versionsAsync","versions","sdkVersions"],"mappings":"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","file":"../Api.js","sourcesContent":["/**\n * @flow\n */\n\nimport 'instapromise';\n\nimport _ from 'lodash';\nimport request from 'request';\nimport FormData from 'form-data';\nimport got from 'got';\nimport semver from 'semver';\n\nimport ErrorCode from './ErrorCode';\nimport XDLError from './XDLError';\n\nimport Config from './Config';\nimport * as Session from './Session';\nimport UserSettings from './UserSettings';\n\nfunction ApiError(code, message) {\n  let err = new Error(message);\n  // $FlowFixMe error has no property code\n  err.code = code;\n  // $FlowFixMe error has no property _isApiError\n  err._isApiError = true;\n  return err;\n}\n\nlet ROOT_BASE_URL = `${Config.api.scheme}://${Config.api.host}`;\nif (Config.api.port) {\n  ROOT_BASE_URL += ':' + Config.api.port;\n}\nlet API_BASE_URL = ROOT_BASE_URL + '/--/api/';\n\nasync function _callMethodAsync(url, method, requestBody): Promise<any> {\n  let clientId = await Session.clientIdAsync();\n  let {username} = await UserSettings.readAsync();\n\n  let headers: any = {\n    'Exp-ClientId': clientId,\n  };\n\n  if (username) {\n    headers['Exp-Username'] = username;\n  }\n\n  let options = {\n    url,\n    method: method || 'get',\n    headers,\n  };\n\n  let response;\n  // TODO: move everything from `request` to `got`\n  if (requestBody) {\n    if (requestBody instanceof FormData) {\n      // Use `got` library to handle FormData uploads\n      options = {\n        ...options,\n        body: requestBody,\n      };\n\n      options.headers = {\n        ...options.headers,\n        ...requestBody.getHeaders(),\n      };\n\n      response = await got(url, options);\n    } else {\n      options = {\n        ...options,\n        body: requestBody,\n        json: true,\n      };\n    }\n  }\n\n  if (!response) {\n    // Use `got` only for FormData. Use `request` for everything else.\n    response = await request.promise(options);\n  }\n  let responseBody = response.body;\n  var responseObj;\n  if (_.isString(responseBody)) {\n    try {\n      responseObj = JSON.parse(responseBody);\n    } catch (e) {\n      throw new Error(\"Invalid JSON returned from API: \" + e + \". Response body: \" + responseBody);\n    }\n  } else {\n    responseObj = responseBody;\n  }\n  if (responseObj.err) {\n    let err = ApiError(responseObj.code || 'API_ERROR', \"API Response Error: \" + responseObj.err);\n    // $FlowFixMe can't add arbitrary properties to error\n    err.serverError = responseObj.err;\n    throw err;\n  } else {\n    return responseObj;\n  }\n}\n\nexport default class ApiClient {\n  static host: string = Config.api.host;\n  static port: number = Config.api.port || 80;\n\n  static async callMethodAsync(methodName: string, args: Array<*>, method: string, requestBody: Object): Promise<any> {\n    let url = API_BASE_URL + encodeURIComponent(methodName) + '/' +\n      encodeURIComponent(JSON.stringify(args));\n    return _callMethodAsync(url, method, requestBody);\n  }\n\n  static async callPathAsync(path, method, requestBody) {\n    let url = ROOT_BASE_URL + path;\n    return _callMethodAsync(url, method, requestBody);\n  }\n\n  static async versionsAsync() {\n    return await ApiClient.callPathAsync('/--/versions');\n  }\n\n  static async sdkVersionsAsync() {\n    let versions = await ApiClient.versionsAsync();\n    return versions.sdkVersions;\n  }\n}\n"],"sourceRoot":"/Users/Jesse/Exponent/newuniverse/universe/dev/xdl/gulp/src"}