{"version":3,"sources":["User.js"],"names":["getAsync","diskUsername","_currentUser","username","whoamiAsync","getCurrentUserAsync","args","type","password","Error","hashedPassword","Password","hashPassword","data","callMethodAsync","result","user","Analytics","setUserProperties","logEvent","Intercom","update","intercomUserHash","mergeAsync","loginAsync","deleteKeyAsync","logoutAsync","getUsernameAsync"],"mappings":"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","file":"../User.js","sourcesContent":["/**\n * @flow\n */\n\nimport * as Analytics from './Analytics';\nimport Api from './Api';\nimport * as Intercom from './Intercom';\nimport * as Password from './Password';\nimport UserSettings from './UserSettings';\n\nlet _currentUser = null;\n\ntype User = {\n  username: string\n};\n\nexport async function getCurrentUserAsync(): Promise<?User> {\n  let diskUsername = await UserSettings.getAsync('username', null);\n  if (_currentUser && _currentUser.username === diskUsername) {\n    return _currentUser;\n  }\n\n  await whoamiAsync();\n  return _currentUser;\n}\n\nexport async function loginAsync(args: any) {\n  // Default to `client` since xde is a client\n  args.type = args.type || 'client';\n\n  if (!args.username || !args.password) {\n    throw new Error(\"Both `username` and `password` are required to login or add a new user\");\n  }\n\n  let hashedPassword = Password.hashPassword(args.password);\n\n  let data = Object.assign({}, args, {hashedPassword});\n  delete data.password;\n\n  // console.log(\"data=\", data);\n\n  let result = await Api.callMethodAsync('adduser', data);\n  // console.log(\"result=\", result);\n  if (result.user) {\n    Analytics.setUserProperties(result.user.username, {\n      username: result.user.username,\n    });\n\n    Analytics.logEvent('Login', {\n      username: result.user.username,\n    });\n\n\n    Intercom.update(result.user.username, result.user.intercomUserHash);\n\n    delete result.type;\n    _currentUser = result.user;\n    // console.log(\"Login as\", result);\n    await UserSettings.mergeAsync(result.user);\n    return result.user;\n  } else {\n    return null;\n  }\n}\n\nexport async function logoutAsync() {\n  if (_currentUser) {\n    Analytics.logEvent('Logout', {\n      username: _currentUser.username,\n    });\n  }\n\n  let result = await Api.callMethodAsync('logout', []);\n  await UserSettings.deleteKeyAsync('username');\n  _currentUser = null;\n\n  Intercom.update(null, null);\n\n  return result;\n}\n\nexport async function whoamiAsync() {\n  try {\n    let result = await Api.callMethodAsync('whoami', []);\n    if (result.user) {\n      _currentUser = result.user;\n\n      Analytics.setUserProperties(result.user.username, {\n        username: result.user.username,\n      });\n\n      Intercom.update(result.user.username, result.user.intercomUserHash);\n    } else {\n      Intercom.update(null, null);\n    }\n    return result.user;\n  } catch (e) {\n    // Intercom should show up no matter what\n    Intercom.update(null, null);\n    throw e;\n  }\n}\n\nexport async function getUsernameAsync(): Promise<?string> {\n  let user = await getCurrentUserAsync();\n  if (user) {\n    return user.username;\n  } else {\n    return null;\n  }\n}\n"],"sourceRoot":"/Users/Jesse/Exponent/newuniverse/universe/dev/xdl/gulp/src"}