{"version":3,"sources":["Binaries.js"],"names":["name","result","stdout","length","includes","OSX_SOURCE_PATH","console","log","toString","_binaryInstalledAsync","runas","require","join","_exponentBinaryDirectory","INSTALL_PATH","admin","notifications","error","code","INSTALL_SHELL_COMMANDS_RESULT","message","_installBinaryAsync","sourceBashLoginScriptsAsync","process","platform","PLATFORM_NOT_SUPPORTED","ncpAsync","binaries","installedBinaries","i","push","warn","info","installShellCommandsAsync","_hasbinAsync","env","PATH","binariesPath","getBinariesPath","delimiter","addToPathAsync","hasSourcedBashLoginScripts","developerTool","currentPath","_exponentRCFileExists","stderr","global","test","SHELL","ERROR_MESSAGE","regexResult","match","Env","__dirname","source","dest","options","resolve","reject","err","dotExponentHomeDirectory","dir","sync","statSync","home","isFile","e"],"mappings":"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","file":"../Binaries.js","sourcesContent":["/**\n * @flow\n */\n\nimport fs from 'fs';\nimport hasbin from 'hasbin';\nimport mkdirp from 'mkdirp';\nimport ncp from 'ncp';\nimport spawnAsync from '@exponent/spawn-async';\nimport path from 'path';\n\nimport Config from './Config';\nimport * as Env from './Env';\nimport ErrorCode from './ErrorCode';\nimport Logger from './Logger';\nimport NotificationCode from './NotificationCode';\nimport UserSettings from './UserSettings';\nimport XDLError from './XDLError';\n\nlet runas; // Crashes on windows, so load this lazily\nlet hasSourcedBashLoginScripts = false;\n\nexport const OSX_SOURCE_PATH = path.join(__dirname, '..', 'binaries', 'osx');\nconst INSTALL_PATH = '/usr/local/bin';\nconst ERROR_MESSAGE = '\\nPlease create a file at ~/.exponent/bashrc that exports your PATH.';\n\nexport function ncpAsync(source: string, dest: string, options: any = {}) {\n  return new Promise((resolve, reject) => {\n    ncp(source, dest, options, (err) => {\n      if (err) {\n        reject();\n      } else {\n        resolve();\n      }\n    });\n  });\n}\n\nfunction _hasbinAsync(name) {\n  return new Promise((resolve, reject) => {\n    hasbin(name, (result) => {\n      resolve(result);\n    });\n  });\n}\n\nasync function _binaryInstalledAsync(name) {\n  try {\n    let result = await spawnAsync('which', [name]);\n    // We add watchman to PATH when starting packager, so make sure we're not using that version\n    return (result.stdout && result.stdout.length > 1 && !result.stdout.includes(OSX_SOURCE_PATH));\n  } catch (e) {\n    console.log(e.toString());\n    return false;\n  }\n}\n\nfunction _exponentBinaryDirectory() {\n  let dotExponentHomeDirectory = UserSettings.dotExponentHomeDirectory();\n  let dir = path.join(dotExponentHomeDirectory, 'bin');\n  mkdirp.sync(dir);\n  return dir;\n}\n\nasync function _installBinaryAsync(name) {\n  if (await _binaryInstalledAsync(name)) {\n    return false;\n  }\n\n  try {\n    if (!runas) {\n      runas = require('runas');\n    }\n    let result = runas('/bin/ln', ['-s', path.join(_exponentBinaryDirectory(), name), path.join(INSTALL_PATH, name)], {\n      admin: true,\n    });\n\n    return result === 0;\n  } catch (e) {\n    Logger.notifications.error({code: NotificationCode.INSTALL_SHELL_COMMANDS_RESULT}, `Error installing ${name}: ${e.message}`);\n    throw e;\n  }\n}\n\nexport async function installShellCommandsAsync() {\n  await sourceBashLoginScriptsAsync();\n\n  if (process.platform !== 'darwin') {\n    throw new XDLError(ErrorCode.PLATFORM_NOT_SUPPORTED, 'Platform not supported.');\n  }\n\n  await ncpAsync(OSX_SOURCE_PATH, _exponentBinaryDirectory());\n\n  let binaries = ['adb', 'watchman'];\n  let installedBinaries = [];\n  for (let i = 0; i < binaries.length; i++) {\n    if (await _installBinaryAsync(binaries[i])) {\n      installedBinaries.push(binaries[i]);\n    }\n  }\n\n  if (installedBinaries.length === 0) {\n    Logger.notifications.warn({code: NotificationCode.INSTALL_SHELL_COMMANDS_RESULT}, `Shell commands ${binaries.join(', ')} are already installed`);\n  } else {\n    Logger.notifications.info({code: NotificationCode.INSTALL_SHELL_COMMANDS_RESULT}, `Installed ${installedBinaries.join(', ')} to your shell`);\n  }\n}\n\nexport function getBinariesPath(): string {\n  if (process.platform === 'darwin') {\n    return path.join(__dirname, '..', 'binaries', 'osx');\n  } else if (process.platform === 'win32') {\n    return path.join(__dirname, '..', 'binaries', 'windows');\n  } else if (process.platform === 'linux') {\n    return path.join(__dirname, '..', 'binaries', 'linux');\n  } else {\n    throw new XDLError(ErrorCode.PLATFORM_NOT_SUPPORTED, 'Platform not supported.');\n  }\n}\n\nexport async function addToPathAsync(name: string) {\n  await sourceBashLoginScriptsAsync();\n\n  if (await _hasbinAsync(name)) {\n    return;\n  }\n\n  if (!process.env.PATH) {\n    process.env.PATH = '';\n  }\n\n  let binariesPath = getBinariesPath();\n  let delimiter = process.platform === 'win32' ? ';' : ':';\n  process.env.PATH = `${process.env.PATH}${delimiter}${binariesPath}`;\n}\n\nfunction _exponentRCFileExists() {\n  try {\n    return fs.statSync(path.join(Env.home(), '.exponent', 'bashrc')).isFile();\n  } catch (e) {\n    return false;\n  }\n}\n\nexport async function sourceBashLoginScriptsAsync() {\n  if (hasSourcedBashLoginScripts || process.platform === 'win32') {\n    return;\n  }\n\n  if (Config.developerTool === 'exp') {\n    return;\n  }\n\n  hasSourcedBashLoginScripts = true;\n  let currentPath = process.env.PATH ? process.env.PATH : '';\n\n  if (_exponentRCFileExists()) {\n    try {\n      // User has a ~/.exponent/bashrc. Run that and grab PATH.\n      let result = await spawnAsync(path.join(getBinariesPath(), `get-path-bash`), {\n        env: {\n          PATH: '',\n        },\n      });\n\n      if (result.stderr) {\n        Logger.global.warn(`Error sourcing ~/.exponent/bashrc script: ${result.stderr}`);\n      }\n\n      if (result.stdout) {\n        if (currentPath.length > 0) {\n          currentPath = `${currentPath}:`;\n        }\n\n        currentPath = `${currentPath}${result.stdout}`;\n      }\n    } catch (e) {\n      Logger.global.warn(`Error sourcing ~/.exponent/bashrc script: ${e.stderr}`);\n    }\n  } else {\n    try {\n      // No ~/.exponent/bashrc file found. Run `env` in process.env.SHELL.\n      let result;\n      if (/t?csh$/.test(process.env.SHELL)) {\n        // csh\n        result = await spawnAsync(process.env.SHELL, ['-d', '-c', 'env']);\n      } else if (/zsh$/.test(process.env.SHELL)) {\n        // zsh\n        result = await spawnAsync(process.env.SHELL, ['-l', '-c', '-i', 'env']);\n      } else {\n        // bash, fish\n        result = await spawnAsync(process.env.SHELL, ['-l', '-c', 'env']);\n      }\n\n      if (result.stderr) {\n        Logger.global.warn(`Error sourcing shell startup scripts: ${result.stderr}.${ERROR_MESSAGE}`);\n      }\n\n      if (result.stdout) {\n        let regexResult = result.stdout.match(/(^|\\n)PATH=(.+)/);\n\n        if (regexResult.length >= 3) {\n          if (currentPath.length > 0) {\n            currentPath = `${currentPath}:`;\n          }\n\n          currentPath = `${currentPath}${regexResult[2]}`;\n        } else {\n          Logger.global.warn(`Error parsing shell startup scripts output: ${result.stderr}.${ERROR_MESSAGE}`);\n        }\n      }\n    } catch (e) {\n      Logger.global.warn(`Error sourcing shell startup scripts: ${e.stderr}.${ERROR_MESSAGE}`);\n    }\n  }\n\n  process.env.PATH = currentPath;\n}\n"],"sourceRoot":"/Users/Jesse/Exponent/newuniverse/universe/dev/xdl/gulp/src"}