{"version":3,"sources":["ProjectSettings.js"],"names":["projectRoot","projectSettings","projectSettingsJsonFile","projectSettingsFile","readAsync","writeAsync","projectSettingsDefaults","hostType","defaults","json","mergeAsync","cantReadFileDefault","packagerInfoFile","setAsync","readPackagerInfoAsync","setPackagerInfoAsync","getPackagerOptsAsync","dotExponentProjectDirectory","dotExponentProjectDirectoryExists","lanType","dev","strict","minify","urlType","urlRandomness","filename","join","dirPath","statSync","isFile","unlinkSync","e","sync","isDirectory"],"mappings":"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","file":"../ProjectSettings.js","sourcesContent":["/**\n * @flow\n */\n\nimport 'instapromise';\n\nimport _ from 'lodash';\nimport JsonFile from '@exponent/json-file';\nimport fs from 'fs';\nimport mkdirp from 'mkdirp';\nimport path from 'path';\n\nlet projectSettingsFile = 'settings.json';\nlet projectSettingsDefaults = {\n  hostType: 'tunnel',\n  lanType: 'ip',\n  dev: true,\n  strict: false,\n  minify: false,\n  urlType: 'exp',\n  urlRandomness: null,\n};\nlet packagerInfoFile = 'packager-info.json';\n\nfunction projectSettingsJsonFile(projectRoot: string, filename: string) {\n  return new JsonFile(path.join(dotExponentProjectDirectory(projectRoot), filename));\n}\n\nexport async function readAsync(projectRoot: string) {\n  let projectSettings;\n  try {\n    projectSettings = await projectSettingsJsonFile(projectRoot, projectSettingsFile).readAsync();\n  } catch (e) {\n    projectSettings = await projectSettingsJsonFile(projectRoot, projectSettingsFile).writeAsync(projectSettingsDefaults);\n  }\n\n  if (projectSettings.hostType === 'ngrok') { // 'ngrok' is deprecated\n    projectSettings.hostType = 'tunnel';\n  }\n\n  // Set defaults for any missing fields\n  _.defaults(projectSettings, projectSettingsDefaults);\n  return projectSettings;\n}\n\nexport async function setAsync(projectRoot: string, json: any) {\n  try {\n    return await projectSettingsJsonFile(projectRoot, projectSettingsFile).mergeAsync(json, {cantReadFileDefault: projectSettingsDefaults});\n  } catch (e) {\n    return await projectSettingsJsonFile(projectRoot, packagerInfoFile).writeAsync(_.defaults(json, projectSettingsDefaults));\n  }\n}\n\nexport async function readPackagerInfoAsync(projectRoot: string) {\n  try {\n    return await projectSettingsJsonFile(projectRoot, packagerInfoFile).readAsync({cantReadFileDefault: {}});\n  } catch (e) {\n    return await projectSettingsJsonFile(projectRoot, packagerInfoFile).writeAsync({});\n  }\n}\n\nexport async function setPackagerInfoAsync(projectRoot: string, json: any) {\n  try {\n    return await projectSettingsJsonFile(projectRoot, packagerInfoFile).mergeAsync(json, {cantReadFileDefault: {}});\n  } catch (e) {\n    return await projectSettingsJsonFile(projectRoot, packagerInfoFile).writeAsync(json);\n  }\n}\n\nexport function dotExponentProjectDirectory(projectRoot: string) {\n  let dirPath = path.join(projectRoot, '.exponent');\n  try {\n    // remove .exponent file if it exists, we moved to a .exponent directory\n    if (fs.statSync(dirPath).isFile()) {\n      fs.unlinkSync(dirPath);\n    }\n  } catch (e) {\n    // no file or directory, continue\n  }\n\n  mkdirp.sync(dirPath);\n  return dirPath;\n}\n\nexport function dotExponentProjectDirectoryExists(projectRoot: string) {\n  let dirPath = path.join(projectRoot, '.exponent');\n  try {\n    if (fs.statSync(dirPath).isDirectory()) {\n      return true;\n    }\n  } catch (e) {\n    // file doesn't exist\n  }\n\n  return false;\n}\n\nexport async function getPackagerOptsAsync(projectRoot: string) {\n  let projectSettings = await readAsync(projectRoot);\n  return projectSettings;\n}\n"],"sourceRoot":"/Users/Jesse/Exponent/newuniverse/universe/dev/xdl/gulp/src"}