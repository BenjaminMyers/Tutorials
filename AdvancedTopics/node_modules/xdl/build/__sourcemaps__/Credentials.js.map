{"version":3,"sources":["Credentials.js"],"names":["username","experienceName","bundleIdentifier","platform","callMethodAsync","decrypt","err","credentials","Error","credentialsExistForPlatformAsync","newCredentials","metadata","updateCredentialsForPlatform","removeCredentialsForPlatform","validationType","isValid","error","errorCode","CREDENTIAL_ERROR","validateCredentialsForPlatform","success","fetchAppleCertificates","ensureAppId","fetchPushCertificates"],"mappings":"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","file":"../Credentials.js","sourcesContent":["/**\n * @flow\n * @providesModule XDLCredentials\n */\n\nimport Api from './Api';\nimport ErrorCode from './ErrorCode';\nimport XDLError from './XDLError';\n\nexport type AndroidCredentials = {\n  keystore: string,\n  keystoreAlias: string,\n  keystorePassword: string,\n  keyPassword: string,\n};\n\nexport type IOSCredentials = {\n  appleId?: string,\n  password?: string,\n  teamId?: string,\n  certP12?: string,\n  certPassword?: string,\n  pushP12?: string,\n  pushPassword?: string,\n};\n\nexport type Credentials = IOSCredentials & AndroidCredentials;\n\nexport type CredentialMetadata = {\n  username: string,\n  experienceName: string,\n  bundleIdentifier: string,\n  platform: string\n}\n\nexport async function credentialsExistForPlatformAsync({\n  username,\n  experienceName,\n  bundleIdentifier,\n  platform,\n}: CredentialMetadata): Promise<?Credentials> {\n  const { err, credentials } = await Api.callMethodAsync('getCredentials', [], 'post', {\n    username,\n    experienceName,\n    bundleIdentifier,\n    platform,\n    decrypt: false,\n  });\n\n  if (err) {\n    throw new Error('Error fetching credentials.');\n  }\n\n  return credentials;\n}\n\nexport async function updateCredentialsForPlatform(platform: string, newCredentials: Credentials, metadata: CredentialMetadata): Promise<void> {\n  const { err, credentials } = await Api.callMethodAsync('updateCredentials', [], 'post', {\n    credentials: newCredentials,\n    platform,\n    ...metadata,\n  });\n\n  if (err || !credentials) {\n    throw new Error('Error updating credentials.');\n  }\n\n  return;\n}\n\nexport async function removeCredentialsForPlatform(platform: string, metadata: CredentialMetadata): Promise<void> {\n  const { err } = await Api.callMethodAsync('deleteCredentials', [], 'post', {\n    platform,\n    ...metadata,\n  });\n\n  if (err) {\n    throw new Error('Error deleting credentials.');\n  }\n\n  return;\n}\n\nexport async function validateCredentialsForPlatform(\n  platform: string,\n  validationType: string,\n  credentials: ?Credentials,\n  metadata: CredentialMetadata\n): Promise<void> {\n  const { isValid, error, errorCode } = await Api.callMethodAsync('validateCredentials', [], 'post', {\n    credentials,\n    platform,\n    validationType,\n    ...metadata,\n  });\n\n  if (!isValid || error) {\n    switch (errorCode) {\n      case \"ERROR_CREDENTIALS_VALIDATION_TWOFACTOR\":\n        throw new XDLError(ErrorCode.CREDENTIAL_ERROR, 'Two factor authentication is not yet supported. Stay tuned!');\n      case \"ERROR_CREDENTIALS_VALIDATION_USERPASS\":\n        throw new XDLError(ErrorCode.CREDENTIAL_ERROR, 'Username/Password is incorrect.');\n      default:\n        throw new Error('Server error when validating credentials.');\n    }\n  }\n\n  return;\n}\n\nexport async function fetchAppleCertificates(\n  metadata: CredentialMetadata,\n): Promise<void> {\n  const { err, success, error, errorCode } = await Api.callMethodAsync('fetchAppleCertificates', [], 'post', {\n    ...metadata,\n  });\n\n  if (err || !success || error) {\n    switch (errorCode) {\n      case 'ERROR_CERT_VALIDATION_MAXIMUM_CERTS_REACHED':\n        throw new XDLError(ErrorCode.CREDENTIAL_ERROR, 'Maximum number of certificates have been reached in your developer portal. Please delete them or choose one of them to upload to Exponent.');\n      default:\n        throw new Error('Unable to fetch new certificates.');\n    }\n  }\n\n  return success;\n}\n\nexport async function ensureAppId(\n  metadata: CredentialMetadata,\n): Promise<void> {\n  const { err, success } = await Api.callMethodAsync('ensureAppId', [], 'post', {\n    ...metadata,\n  });\n\n  if (err || !success) {\n    throw new Error('Unable to create app id.');\n  }\n\n  return success;\n}\n\nexport async function fetchPushCertificates(\n  metadata: CredentialMetadata,\n): Promise<void> {\n  const { err, success } = await Api.callMethodAsync('fetchPushCertificates', [], 'post', {\n    ...metadata,\n  });\n\n  if (err || !success) {\n    throw new Error('Unable to fetch push certificates.');\n  }\n\n  return success;\n}\n"],"sourceRoot":"/Users/Jesse/Exponent/newuniverse/universe/dev/xdl/gulp/src"}