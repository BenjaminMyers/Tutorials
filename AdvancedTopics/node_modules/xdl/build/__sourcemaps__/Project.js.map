{"version":3,"sources":["Project.js"],"names":["User","getCurrentUserAsync","user","NOT_LOGGED_IN","_assertLoggedInAsync","projectRoot","NO_PROJECT_ROOT","_assertValidProjectRoot","rangeStart","port","NO_PORT_FOUND","_getFreePortAsync","url","platform","errorCode","minLength","UrlUtils","getPlatformSpecificBundleUrl","promise","get","headers","response","statusCode","body","length","_getForPlatformAsync","options","Analytics","logEvent","schema","object","keys","validate","INVALID_OPTIONS","toString","ProjectSettings","readPackagerInfoAsync","packagerInfo","packagerPort","NO_PACKAGER_PORT","Exp","determineEntryPointAsync","entryPoint","constructPublishUrlAsync","publishUrl","constructAssetsUrlAsync","assetsUrl","all","INVALID_BUNDLE","MINIMUM_BUNDLE_SIZE","INVALID_ASSETS","iosBundle","androidBundle","iosAssetsJson","androidAssetsJson","ProjectUtils","readConfigJsonAsync","exp","pkg","NO_PACKAGE_JSON","version","slug","name","android","config","ios","iosAssets","JSON","parse","androidAssets","assets","concat","fileHashes","uploadAssetsAsync","form","append","filename","callMethodAsync","publishAsync","paths","forEach","asset","files","path","index","metas","metadata","missing","filter","key","exists","chunk","map","logDebug","createReadStream","current","boolean","mode","string","any","valid","expIds","array","bundleIdentifier","INVALID_MANIFEST","package","manifest","buildAsync","includes","_waitForRunningAsync","result","stdout","logInfo","logError","_restartWatchmanAsync","stopReactNativeServerAsync","Watchman","addToPathAsync","expConfigForRootAsync","packagerOpts","projectRoots","assetRoots","userPackagerOpts","cliOpts","reduce","opts","val","push","reset","defaultCliPath","join","cliPath","packagerCwd","nodePath","rnCliPath","_nodePathForProjectRoot","packagerProcess","fork","cwd","env","process","NODE_PATH","ELECTRON_RUN_AS_NODE","silent","setPackagerInfoAsync","packagerPid","pid","on","setEncoding","stderr","data","_logPackagerOutput","code","constructBundleUrlAsync","urlType","hostType","packagerUrl","startReactNativeServerAsync","stopExponentServerAsync","app","use","json","limit","urlencoded","extended","Doctor","validateWithNetworkAsync","FATAL","Error","manifestHandler","req","res","getPackagerOptsAsync","bundleUrlPackagerOpts","xde","developer","tool","developerTool","mainModuleName","guessMainModulePath","constructBundleQueryParamsAsync","queryParams","bundleUrl","constructDebuggerHostAsync","debuggerHost","constructManifestUrlAsync","logUrl","manifestString","currentUser","_cachedSignedManifest","signedManifest","getPublishInfoAsync","publishInfo","args","send","stack","status","post","deviceId","deviceName","_handleDeviceLogs","e","exponentServerPort","server","listen","host","address","_projectRootToExponentServer","saveRecentExpRootAsync","startExponentServerAsync","close","hostnameAsync","ngrokPid","attempts","configPath","dotExponentHomeDirectory","hostname","connect","message","NGROK_ERROR","error_code","kill","resetProjectRandomnessAsync","_connectToNgrokAsync","NO_EXPONENT_SERVER_PORT","stopTunnelsAsync","Android","startAdbReverseAsync","getUsernameAsync","optUsername","username","packageShortName","base","authtoken","ngrok","authToken","proto","getProjectRandomnessAsync","randomness","domainify","domain","exponentServerNgrokUrl","packagerNgrokUrl","startTunnelsAsync","ngrokProcess","ngrokProcessPid","stopAdbReverseAsync","number","integer","setOptionsAsync","getUrlAsync","startAsync","stopAsync","_stripPackagerOutputBox","output","re","found","match","_processPackagerLine","line","timestampRe","sdk11AndUpTimestampRe","replace","level","isPlatformSupported","lines","split","i","logs","log","obj","groupDepth","shouldHide","logWithLevel","tag","directory","resolve","parentDirectory","dirname","delimiter"],"mappings":"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","file":"../Project.js","sourcesContent":["/**\n * @flow\n */\n\nimport 'instapromise';\n\nimport bodyParser from 'body-parser';\nimport child_process from 'child_process';\nimport delayAsync from 'delay-async';\nimport express from 'express';\nimport FormData from 'form-data';\nimport freeportAsync from 'freeport-async';\nimport fs from 'fs';\nimport joi from 'joi';\nimport _ from 'lodash';\nimport ngrok from 'ngrok';\nimport path from 'path';\nimport request from 'request';\nimport spawnAsync from '@exponent/spawn-async';\nimport treekill from 'tree-kill';\n\nimport * as Analytics from './Analytics';\nimport * as Android from './Android';\nimport Api from './Api';\nimport Config from './Config';\nimport * as Doctor from './project/Doctor';\nimport ErrorCode from './ErrorCode';\nimport * as Exp from './Exp';\nimport * as ProjectSettings from './ProjectSettings';\nimport * as ProjectUtils from './project/ProjectUtils';\nimport * as UrlUtils from './UrlUtils';\nimport * as User from './User';\nimport UserSettings from './UserSettings';\nimport * as Watchman from './Watchman';\nimport XDLError from './XDLError';\n\nconst MINIMUM_BUNDLE_SIZE = 500;\n\nlet _projectRootToExponentServer = {};\n\ntype CachedSignedManifest = {\n  manifestString: ?string,\n  signedManifest: ?string,\n};\n\nlet _cachedSignedManifest: CachedSignedManifest = {\n  manifestString: null,\n  signedManifest: null,\n};\n\nasync function _assertLoggedInAsync() {\n  let user = await User.getCurrentUserAsync();\n  if (!user) {\n    throw new XDLError(ErrorCode.NOT_LOGGED_IN, 'Not logged in');\n  }\n}\n\nasync function _assertValidProjectRoot(projectRoot) {\n  if (!projectRoot) {\n    throw new XDLError(ErrorCode.NO_PROJECT_ROOT, 'No project root specified');\n  }\n}\n\nasync function _getFreePortAsync(rangeStart) {\n  let port = await freeportAsync(rangeStart);\n  if (!port) {\n    throw new XDLError(ErrorCode.NO_PORT_FOUND, 'No available port found');\n  }\n\n  return port;\n}\n\nasync function _getForPlatformAsync(url, platform, { errorCode, minLength }) {\n  url = UrlUtils.getPlatformSpecificBundleUrl(url, platform);\n\n  let response = await request.promise.get({\n    url: `${url}&platform=${platform}`,\n    headers: {\n      'Exponent-Platform': platform,\n    },\n  });\n\n  if (response.statusCode !== 200) {\n    throw new XDLError(errorCode, `Packager returned unexpected code ${response.statusCode}`);\n  }\n\n  if (!response.body || (minLength && response.body.length < minLength)) {\n    throw new XDLError(errorCode, `Body is: ${response.body}`);\n  }\n\n  return response.body;\n}\n\nexport async function publishAsync(projectRoot: string, options: Object = {}) {\n  await _assertLoggedInAsync();\n  _assertValidProjectRoot(projectRoot);\n\n  Analytics.logEvent('Publish', {\n    projectRoot,\n  });\n\n  let schema = joi.object().keys({\n    // empty\n  });\n\n  try {\n    await joi.promise.validate(options, schema);\n  } catch (e) {\n    throw new XDLError(ErrorCode.INVALID_OPTIONS, e.toString());\n  }\n\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (!packagerInfo.packagerPort) {\n    throw new XDLError(ErrorCode.NO_PACKAGER_PORT, `No packager found for project at ${projectRoot}.`);\n  }\n\n  let entryPoint = await Exp.determineEntryPointAsync(projectRoot);\n  let publishUrl = await UrlUtils.constructPublishUrlAsync(projectRoot, entryPoint);\n  let assetsUrl = await UrlUtils.constructAssetsUrlAsync(projectRoot, entryPoint);\n  let [\n    iosBundle,\n    androidBundle,\n    iosAssetsJson,\n    androidAssetsJson,\n  ] = await Promise.all([\n    _getForPlatformAsync(publishUrl, 'ios', {\n      errorCode: ErrorCode.INVALID_BUNDLE,\n      minLength: MINIMUM_BUNDLE_SIZE,\n    }),\n    _getForPlatformAsync(publishUrl, 'android', {\n      errorCode: ErrorCode.INVALID_BUNDLE,\n      minLength: MINIMUM_BUNDLE_SIZE,\n    }),\n    _getForPlatformAsync(assetsUrl, 'ios', {\n      errorCode: ErrorCode.INVALID_ASSETS,\n    }),\n    _getForPlatformAsync(assetsUrl, 'android', {\n      errorCode: ErrorCode.INVALID_ASSETS,\n    }),\n  ]);\n\n  let { exp, pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n\n  if (!exp || !pkg) {\n    throw new XDLError(ErrorCode.NO_PACKAGE_JSON, `Couldn't read exp.json file in project at ${projectRoot}`);\n  }\n\n  // Support version and name being specified in package.json for legacy\n  // support pre: exp.json\n  if (!exp.version && pkg.version) {\n    exp.version = pkg.version;\n  }\n  if (!exp.slug && pkg.name) {\n    exp.slug = pkg.name;\n  }\n\n  if (exp.android && exp.android.config) {\n    delete exp.android.config;\n  }\n\n  if (exp.ios && exp.ios.config) {\n    delete exp.ios.config;\n  }\n\n  // Upload asset files\n  const iosAssets = JSON.parse(iosAssetsJson);\n  const androidAssets = JSON.parse(androidAssetsJson);\n  const assets = iosAssets.concat(androidAssets);\n  if (assets.length > 0 && assets[0].fileHashes) {\n    await uploadAssetsAsync(projectRoot, assets);\n  }\n\n  let form = new FormData();\n  form.append('expJson', JSON.stringify(exp));\n  form.append('iosBundle', iosBundle, {\n    filename: 'iosBundle',\n  });\n  form.append('androidBundle', androidBundle, {\n    filename: 'androidBundle',\n  });\n\n  let response = await Api.callMethodAsync('publish', [options], 'put', form);\n  return response;\n}\n\n// TODO(jesse): Add analytics for upload\nasync function uploadAssetsAsync(projectRoot, assets) {\n  // Collect paths by key, also effectively handles duplicates in the array\n  const paths = {};\n  assets.forEach(asset => {\n    asset.files.forEach((path, index) => {\n      paths[asset.fileHashes[index]] = path;\n    });\n  });\n\n  // Collect list of assets missing on host\n  const metas = (await Api.callMethodAsync('assetsMetadata', [], 'post', {\n    keys: Object.keys(paths),\n  })).metadata;\n  const missing = Object.keys(paths).filter(key => !metas[key].exists);\n\n  // Upload them!\n  await Promise.all(_.chunk(missing, 5).map(async (keys) => {\n    let form = new FormData();\n    keys.forEach(key => {\n      ProjectUtils.logDebug(projectRoot, 'exponent', `uploading ${paths[key]}`);\n      form.append(key, fs.createReadStream(paths[key]), {\n        filename: paths[key],\n      });\n    });\n    await Api.callMethodAsync('uploadAssets', [], 'put', form);\n  }));\n}\n\nexport async function buildAsync(projectRoot: string, options: {\n  current?: bool,\n  mode?: string,\n  platform?: string,\n  expIds?: Array<string>,\n} = {}) {\n  await _assertLoggedInAsync();\n  _assertValidProjectRoot(projectRoot);\n\n  Analytics.logEvent('Build Shell App', {\n    projectRoot,\n  });\n\n  let schema = joi.object().keys({\n    current: joi.boolean(),\n    mode: joi.string(),\n    platform: joi.any().valid('ios', 'android', 'all'),\n    expIds: joi.array(),\n  });\n\n  try {\n    await joi.promise.validate(options, schema);\n  } catch (e) {\n    throw new XDLError(ErrorCode.INVALID_OPTIONS, e.toString());\n  }\n\n  let { exp, pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n\n  if (!exp || !pkg) {\n    throw new XDLError(ErrorCode.NO_PACKAGE_JSON, `Couldn't read exp.json file in project at ${projectRoot}`);\n  }\n\n  // Support version and name being specified in package.json for legacy\n  // support pre: exp.json\n  if (!exp.version && pkg.version) {\n    exp.version = pkg.version;\n  }\n  if (!exp.slug && pkg.name) {\n    exp.slug = pkg.name;\n  }\n\n  if (options.platform === 'ios' || options.platform === 'all') {\n    if (!exp.ios || !exp.ios.bundleIdentifier) {\n      throw new XDLError(ErrorCode.INVALID_MANIFEST, 'Must specify a bundle identifier in order to build this experience for iOS. Please specify one in exp.json at \"ios.bundleIdentifier\"');\n    }\n  }\n\n  if (options.platform === 'android' || options.platform === 'all') {\n    if (!exp.android || !exp.android.package) {\n      throw new XDLError(ErrorCode.INVALID_MANIFEST, 'Must specify a java package in order to build this experience for Android. Please specify one in exp.json at \"android.package\"');\n    }\n  }\n\n  let response = await Api.callMethodAsync(\n    'build',\n    [],\n    'put',\n    {\n      manifest: exp,\n      options,\n    },\n  );\n\n  return response;\n}\n\nasync function _waitForRunningAsync(url) {\n  try {\n    let response = await request.promise(url);\n    // Looking for \"Cached Bundles\" string is hacky, but unfortunately\n    // ngrok returns a 200 when it succeeds but the port it's proxying\n    // isn't bound.\n    if (response.statusCode >= 200 && response.statusCode < 300 &&\n        response.body && response.body.includes('Cached Bundles')) {\n      return true;\n    }\n  } catch (e) {\n    // Try again after delay\n  }\n\n  await delayAsync(100);\n  return _waitForRunningAsync(url);\n}\n\nfunction _stripPackagerOutputBox(output: string) {\n  let re = /Running packager on port (\\d+)/;\n  let found = output.match(re);\n  if (found && found.length >= 2) {\n    return `Running packager on port ${found[1]}\\n`;\n  } else {\n    return null;\n  }\n}\n\nfunction _processPackagerLine(line: string) {\n  // [10:02:59 AM]\n  let timestampRe = /\\s*\\[\\d+\\:\\d+\\:\\d+\\ (AM)?(PM)?\\]\\s+/;\n  // [11/8/2016, 10:02:59 AM]\n  let sdk11AndUpTimestampRe = /\\s*\\[\\d+\\/\\d+\\/\\d+, \\d+\\:\\d+\\:\\d+\\ (AM)?(PM)?\\]\\s+/;\n  return line.replace(timestampRe, '').replace(sdk11AndUpTimestampRe, '');\n}\n\nasync function _restartWatchmanAsync(projectRoot: string) {\n  try {\n    let result = await spawnAsync('watchman', ['watch-del', projectRoot]);\n    await spawnAsync('watchman', ['watch-project', projectRoot]);\n    if (result.stdout.includes('root')) {\n      ProjectUtils.logInfo(projectRoot, 'exponent', 'Restarted watchman.');\n      return;\n    }\n  } catch (e) {}\n\n  ProjectUtils.logError(projectRoot, 'exponent', 'Attempted to restart watchman but failed. Please try running `watchman watch-del-all`.');\n}\n\nfunction _logPackagerOutput(projectRoot: string, level: string, data: Object) {\n  let output = data.toString();\n  if (output.includes('─────')) {\n    output = _stripPackagerOutputBox(output);\n    if (output) {\n      ProjectUtils.logInfo(projectRoot, 'exponent', output);\n    }\n    return;\n  }\n\n  if (!output) {\n    return;\n  }\n\n  // Fix watchman if it's being dumb\n  if (Watchman.isPlatformSupported() && output.includes('watchman watch-del')) {\n    _restartWatchmanAsync(projectRoot);\n    return;\n  }\n\n  let lines = output.split(/\\r?\\n/);\n  for (let i = 0; i < lines.length; i++) {\n    lines[i] = _processPackagerLine(lines[i]);\n  }\n  output = lines.join('\\n');\n\n  if (level === 'info') {\n    ProjectUtils.logInfo(projectRoot, 'packager', output);\n  } else {\n    ProjectUtils.logError(projectRoot, 'packager', output);\n  }\n}\n\nfunction _handleDeviceLogs(projectRoot: string, deviceId: string, deviceName: string, logs: any) {\n  for (let i = 0; i < logs.length; i++) {\n    let log = logs[i];\n\n    let body = typeof log.body === 'string' ? [log.body] : log.body;\n    let string = body.map(obj => {\n      if (typeof obj === 'undefined') {\n        return 'undefined';\n      }\n      if (obj === 'null') {\n        return 'null';\n      }\n\n      if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean') {\n        return obj;\n      }\n\n      try {\n        return JSON.stringify(obj);\n      } catch (e) {\n        return obj.toString();\n      }\n    }).join(' ');\n\n    let level = log.level;\n    let groupDepth = log.groupDepth;\n    let shouldHide = log.shouldHide;\n    ProjectUtils.logWithLevel(projectRoot, level, {\n      tag: 'device',\n      deviceId,\n      deviceName,\n      groupDepth,\n      shouldHide,\n    }, string);\n  }\n}\n\nexport async function startReactNativeServerAsync(projectRoot: string, options: Object = {}) {\n  await _assertLoggedInAsync();\n  _assertValidProjectRoot(projectRoot);\n\n  await stopReactNativeServerAsync(projectRoot);\n\n  await Watchman.addToPathAsync();\n\n  let packagerPort = await _getFreePortAsync(19001);\n\n  let exp = await Exp.expConfigForRootAsync(projectRoot);\n\n  // Create packager options\n  let packagerOpts = {\n    port: packagerPort,\n    projectRoots: projectRoot,\n    assetRoots: projectRoot,\n  };\n\n  const userPackagerOpts = _.get(exp, 'packagerOpts');\n  if (userPackagerOpts) {\n    packagerOpts = {\n      ...packagerOpts,\n      ...userPackagerOpts,\n    };\n  }\n\n  let cliOpts = _.reduce(packagerOpts, (opts, val, key) => {\n    if (val && val !== '') {\n      opts.push(`--${key}`, val);\n    }\n    return opts;\n  }, ['start']);\n\n  if (options.reset) {\n    cliOpts.push('--reset-cache');\n  }\n\n  // Get custom CLI path from project package.json, but fall back to node_module path\n  let defaultCliPath = path.join(projectRoot, 'node_modules', 'react-native', 'local-cli', 'cli.js');\n  const cliPath = _.get(exp, 'rnCliPath', defaultCliPath);\n\n  let packagerCwd;\n  let nodePath;\n  // When using a custom path for the RN CLI, we want it to use the project\n  // root to look up config files and Node modules\n  if (exp.rnCliPath) {\n    packagerCwd = projectRoot;\n    nodePath = _nodePathForProjectRoot(projectRoot);\n  } else {\n    packagerCwd = path.join(projectRoot, 'node_modules', 'react-native', 'packager');\n    nodePath = null;\n  }\n\n  // Run the copy of Node that's embedded in Electron by setting the\n  // ELECTRON_RUN_AS_NODE environment variable\n  // Note: the CLI script sets up graceful-fs and sets ulimit to 4096 in the\n  // child process\n  let packagerProcess = child_process.fork(cliPath, cliOpts, {\n    cwd: packagerCwd,\n    env: {\n      ...process.env,\n      NODE_PATH: nodePath,\n      ELECTRON_RUN_AS_NODE: 1,\n    },\n    silent: true,\n  });\n\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    packagerPort,\n    packagerPid: packagerProcess.pid,\n  });\n\n  // TODO: do we need this? don't know if it's ever called\n  process.on('exit', () => {\n    treekill(packagerProcess.pid);\n  });\n\n  packagerProcess.stdout.setEncoding('utf8');\n  packagerProcess.stderr.setEncoding('utf8');\n  packagerProcess.stdout.on('data', (data) => {\n    _logPackagerOutput(projectRoot, 'info', data);\n  });\n\n  packagerProcess.stderr.on('data', (data) => {\n    _logPackagerOutput(projectRoot, 'error', data);\n  });\n\n  packagerProcess.on('exit', async (code) => {\n    ProjectUtils.logDebug(projectRoot, 'exponent', `packager process exited with code ${code}`);\n  });\n\n  let packagerUrl = await UrlUtils.constructBundleUrlAsync(projectRoot, {\n    urlType: 'http',\n    hostType: 'localhost',\n  });\n\n  await _waitForRunningAsync(`${packagerUrl}/debug`);\n}\n\nfunction _nodePathForProjectRoot(projectRoot: string): string {\n  let paths = [];\n  let directory = path.resolve(projectRoot);\n  while (true) {\n    paths.push(path.join(directory, 'node_modules'));\n    let parentDirectory = path.dirname(directory);\n    if (directory === parentDirectory) {\n      break;\n    }\n    directory = parentDirectory;\n  }\n  return paths.join(path.delimiter);\n}\n\nexport async function stopReactNativeServerAsync(projectRoot: string) {\n  await _assertLoggedInAsync();\n  _assertValidProjectRoot(projectRoot);\n\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (!packagerInfo.packagerPort || !packagerInfo.packagerPid) {\n    ProjectUtils.logDebug(projectRoot, 'exponent', `No packager found for project at ${projectRoot}.`);\n    return;\n  }\n\n  ProjectUtils.logDebug(projectRoot, 'exponent', `Killing packager process tree: ${packagerInfo.packagerPid}`);\n  try {\n    await treekill.promise(packagerInfo.packagerPid, 'SIGKILL');\n  } catch (e) {\n    ProjectUtils.logDebug(projectRoot, 'exponent', `Error stopping packager process: ${e.toString()}`);\n  }\n\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    packagerPort: null,\n    packagerPid: null,\n  });\n}\n\nexport async function startExponentServerAsync(projectRoot: string) {\n  await _assertLoggedInAsync();\n  _assertValidProjectRoot(projectRoot);\n\n  await stopExponentServerAsync(projectRoot);\n\n  let app = express();\n  app.use(bodyParser.json({ limit: '10mb' }));\n  app.use(bodyParser.urlencoded({ limit: '10mb', extended: true }));\n\n  if (await Doctor.validateWithNetworkAsync(projectRoot) === Doctor.FATAL) {\n    throw new Error(`Couldn't start project. Please fix the above issues and restart the project.`);\n  }\n\n  // Serve the manifest.\n  let manifestHandler = async (req, res) => {\n    try {\n      // We intentionally don't `await`. We want to continue trying even\n      // if there is a potential error in the package.json and don't want to slow\n      // down the request\n      Doctor.validateWithNetworkAsync(projectRoot);\n\n      let { exp: manifest } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n      if (!manifest) {\n        throw new Error('No exp.json file found');\n      }\n\n      // Get packager opts and then copy into bundleUrlPackagerOpts\n      let packagerOpts = await ProjectSettings.getPackagerOptsAsync(projectRoot);\n      let bundleUrlPackagerOpts = JSON.parse(JSON.stringify(packagerOpts));\n      bundleUrlPackagerOpts.urlType = 'http';\n      if (bundleUrlPackagerOpts.hostType === 'redirect') {\n        bundleUrlPackagerOpts.hostType = 'tunnel';\n      }\n\n      manifest.xde = true; // deprecated\n      manifest.developer = {\n        tool: Config.developerTool,\n      };\n      manifest.packagerOpts = packagerOpts;\n\n      let entryPoint = await Exp.determineEntryPointAsync(projectRoot);\n      let platform = req.headers['exponent-platform'] || 'ios';\n      entryPoint = UrlUtils.getPlatformSpecificBundleUrl(entryPoint, platform);\n      let mainModuleName = UrlUtils.guessMainModulePath(entryPoint);\n      let queryParams = await UrlUtils.constructBundleQueryParamsAsync(projectRoot, packagerOpts);\n      let path = `/${mainModuleName}.bundle?platform=${platform}&${queryParams}`;\n      manifest.bundleUrl = await UrlUtils.constructBundleUrlAsync(projectRoot, bundleUrlPackagerOpts) + path;\n      manifest.debuggerHost = await UrlUtils.constructDebuggerHostAsync(projectRoot);\n      manifest.mainModuleName = mainModuleName;\n      manifest.logUrl = `${await UrlUtils.constructManifestUrlAsync(projectRoot, {\n        urlType: 'http',\n      })}/logs`;\n\n      let manifestString = JSON.stringify(manifest);\n      let currentUser = await User.getCurrentUserAsync();\n      if (req.headers['exponent-accept-signature'] && currentUser) {\n        if (_cachedSignedManifest.manifestString === manifestString) {\n          manifestString = _cachedSignedManifest.signedManifest;\n        } else {\n          let publishInfo = await Exp.getPublishInfoAsync(projectRoot);\n          let signedManifest = await Api.callMethodAsync('signManifest', [publishInfo.args], 'post', manifest);\n          _cachedSignedManifest.manifestString = manifestString;\n          _cachedSignedManifest.signedManifest = signedManifest.response;\n          manifestString = signedManifest.response;\n        }\n      }\n\n      res.send(manifestString);\n\n      Analytics.logEvent('Serve Manifest', {\n        projectRoot,\n      });\n    } catch (e) {\n      ProjectUtils.logDebug(projectRoot, 'exponent', `Error in manifestHandler: ${e} ${e.stack}`);\n      // 5xx = Server Error HTTP code\n      res.status(520).send({\"error\": e.toString()});\n    }\n  };\n\n  app.get('/', manifestHandler);\n  app.get('/manifest', manifestHandler);\n  app.get('/index.exp', manifestHandler);\n  app.post('/logs', async (req, res) => {\n    try {\n      let deviceId = req.get('Device-Id');\n      let deviceName = req.get('Device-Name');\n      if (deviceId && deviceName && req.body) {\n        _handleDeviceLogs(projectRoot, deviceId, deviceName, req.body);\n      }\n    } catch (e) {\n      ProjectUtils.logError(projectRoot, 'exponent', `Error getting device logs: ${e} ${e.stack}`);\n    }\n    res.send('Success');\n  });\n\n  let exponentServerPort = await _getFreePortAsync(19000);\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    exponentServerPort,\n  });\n  let server = app.listen(exponentServerPort, () => {\n    let host = server.address().address;\n    let port = server.address().port;\n\n    ProjectUtils.logDebug(projectRoot, 'exponent', `Local server listening at http://${host}:${port}`);\n  });\n\n  _projectRootToExponentServer[projectRoot] = server;\n  await Exp.saveRecentExpRootAsync(projectRoot);\n}\n\n// This only works when called from the same process that called\n// startExponentServerAsync.\nexport async function stopExponentServerAsync(projectRoot: string) {\n  await _assertLoggedInAsync();\n  _assertValidProjectRoot(projectRoot);\n\n  let server = _projectRootToExponentServer[projectRoot];\n  if (!server) {\n    ProjectUtils.logDebug(projectRoot, 'exponent', `No Exponent server found for project at ${projectRoot}.`);\n    return;\n  }\n\n  try {\n    await server.promise.close();\n  } catch (e) {\n    // don't care if this fails\n  }\n  _projectRootToExponentServer[projectRoot] = null;\n\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    exponentServerPort: null,\n  });\n}\n\nasync function _connectToNgrokAsync(projectRoot: string, args: mixed, hostnameAsync: Function, ngrokPid: ?number, attempts: number = 0) {\n  try {\n    let configPath = path.join(UserSettings.dotExponentHomeDirectory(), 'ngrok.yml');\n    let hostname = await hostnameAsync();\n    let url = await ngrok.promise.connect({\n      hostname,\n      configPath,\n      ...args,\n    });\n    return url;\n  } catch (e) {\n    // Attempt to connect 3 times\n    if (attempts >= 2) {\n      if (e.message) {\n        throw new XDLError(ErrorCode.NGROK_ERROR, e.toString());\n      } else {\n        throw new XDLError(ErrorCode.NGROK_ERROR, JSON.stringify(e));\n      }\n    }\n\n    if (!attempts) {\n      attempts = 0;\n    }\n\n    // Attempt to fix the issue\n    if (e.error_code && e.error_code === 103) {\n      if (attempts === 0) {\n        // Failed to start tunnel. Might be because url already bound to another session.\n        if (ngrokPid) {\n          try {\n            process.kill(ngrokPid, 'SIGKILL');\n          } catch (e) {\n            ProjectUtils.logDebug(projectRoot, 'exponent', `Couldn't kill ngrok with PID ${ngrokPid}`);\n          }\n        } else {\n          await ngrok.promise.kill();\n        }\n      } else {\n        // Change randomness to avoid conflict if killing ngrok didn't help\n        await Exp.resetProjectRandomnessAsync(projectRoot);\n      }\n    }\n\n    // Wait 100ms and then try again\n    await delayAsync(100);\n    return _connectToNgrokAsync(projectRoot, args, hostnameAsync, null, attempts + 1);\n  }\n}\n\nexport async function startTunnelsAsync(projectRoot: string) {\n  await _assertLoggedInAsync();\n  _assertValidProjectRoot(projectRoot);\n\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (!packagerInfo.packagerPort) {\n    throw new XDLError(ErrorCode.NO_PACKAGER_PORT, `No packager found for project at ${projectRoot}.`);\n  }\n\n  if (!packagerInfo.exponentServerPort) {\n    throw new XDLError(ErrorCode.NO_EXPONENT_SERVER_PORT, `No Exponent server found for project at ${projectRoot}.`);\n  }\n\n  await stopTunnelsAsync(projectRoot);\n\n  if (await Android.startAdbReverseAsync(projectRoot)) {\n    ProjectUtils.logInfo(projectRoot, 'exponent', 'Sucessfully ran `adb reverse`. Localhost urls should work on the connected Android device.');\n  }\n\n  let optUsername = await User.getUsernameAsync();\n  if (!optUsername) {\n    throw new XDLError(ErrorCode.NOT_LOGGED_IN, 'Not logged in');\n  }\n  let username = optUsername; // For Flow bug\n\n  let packageShortName = path.parse(projectRoot).base;\n\n  try {\n    let exponentServerNgrokUrl = await _connectToNgrokAsync(projectRoot, {\n      authtoken: Config.ngrok.authToken,\n      port: packagerInfo.exponentServerPort,\n      proto: 'http',\n    }, async () => {\n      let randomness = await Exp.getProjectRandomnessAsync(projectRoot);\n      return [randomness, UrlUtils.domainify(username), UrlUtils.domainify(packageShortName), Config.ngrok.domain].join('.');\n    }, packagerInfo.ngrokPid);\n\n    let packagerNgrokUrl = await _connectToNgrokAsync(projectRoot, {\n      authtoken: Config.ngrok.authToken,\n      port: packagerInfo.packagerPort,\n      proto: 'http',\n    }, async () => {\n      let randomness = await Exp.getProjectRandomnessAsync(projectRoot);\n      return ['packager', randomness, UrlUtils.domainify(username), UrlUtils.domainify(packageShortName), Config.ngrok.domain].join('.');\n    }, packagerInfo.ngrokPid);\n\n    await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n      exponentServerNgrokUrl,\n      packagerNgrokUrl,\n      ngrokPid: ngrok.process().pid,\n    });\n  } catch (e) {\n    ProjectUtils.logError(projectRoot, 'exponent', `Error starting tunnel: ${e.toString()}`);\n    throw e;\n  }\n}\n\nexport async function stopTunnelsAsync(projectRoot: string) {\n  await _assertLoggedInAsync();\n  _assertValidProjectRoot(projectRoot);\n\n  // This will kill all ngrok tunnels in the process.\n  // We'll need to change this if we ever support more than one project\n  // open at a time in XDE.\n\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  let ngrokProcess = ngrok.process();\n  let ngrokProcessPid = ngrokProcess ? ngrokProcess.pid : null;\n\n  if (packagerInfo.ngrokPid && packagerInfo.ngrokPid !== ngrokProcessPid) {\n    // Ngrok is running in some other process. Kill at the os level.\n    try {\n      process.kill(packagerInfo.ngrokPid);\n    } catch (e) {\n      ProjectUtils.logDebug(projectRoot, 'exponent', `Couldn't kill ngrok with PID ${packagerInfo.ngrokPid}`);\n    }\n  } else {\n    // Ngrok is running from the current process. Kill using ngrok api.\n    await ngrok.promise.kill();\n  }\n\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    exponentServerNgrokUrl: null,\n    packagerNgrokUrl: null,\n    ngrokPid: null,\n  });\n\n  await Android.stopAdbReverseAsync(projectRoot);\n}\n\nexport async function setOptionsAsync(projectRoot: string, options: { packagerPort?: number }) {\n  await _assertLoggedInAsync();\n  _assertValidProjectRoot(projectRoot);\n\n  // Check to make sure all options are valid\n  let schema = joi.object().keys({\n    packagerPort: joi.number().integer(),\n  });\n\n  try {\n    await joi.promise.validate(options, schema);\n  } catch (e) {\n    throw new XDLError(ErrorCode.INVALID_OPTIONS, e.toString());\n  }\n\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, options);\n}\n\nexport async function getUrlAsync(projectRoot: string, options: Object = {}) {\n  await _assertLoggedInAsync();\n  _assertValidProjectRoot(projectRoot);\n\n  return await UrlUtils.constructManifestUrlAsync(projectRoot, options);\n}\n\nexport async function startAsync(projectRoot: string, options: Object = {}): Promise<any> {\n  await _assertLoggedInAsync();\n  _assertValidProjectRoot(projectRoot);\n\n  Analytics.logEvent('Start Project', {\n    projectRoot,\n  });\n\n  await startExponentServerAsync(projectRoot);\n  await startReactNativeServerAsync(projectRoot, options);\n  await startTunnelsAsync(projectRoot);\n\n  let { exp } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n  return exp;\n}\n\nexport async function stopAsync(projectRoot: string): Promise<void> {\n  await stopTunnelsAsync(projectRoot);\n  await stopReactNativeServerAsync(projectRoot);\n  await stopExponentServerAsync(projectRoot);\n}\n"],"sourceRoot":"/Users/Jesse/Exponent/newuniverse/universe/dev/xdl/gulp/src"}