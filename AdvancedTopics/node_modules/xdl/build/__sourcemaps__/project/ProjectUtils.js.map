{"version":3,"sources":["project/ProjectUtils.js"],"names":["projectRoot","exp","pkg","Exp","packageJsonForRoot","readAsync","expJsonForRoot","isJsonFileError","message","startsWith","logError","cause","toString","readConfigJsonAsync","logWithLevel","logDebug","logInfo","logWarning","attachLoggerStream","Analytics","MAX_MESSAGE_LENGTH","_projectRootToLogger","_getLogger","logger","child","type","project","resolve","level","object","msg","debug","info","warn","error","tag","truncatedMessage","length","substring","logEvent","stream","addStream"],"mappings":"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","file":"../../project/ProjectUtils.js","sourcesContent":["/**\n * @flow\n */\n\nimport path from 'path';\n\nimport * as Analytics from '../Analytics';\nimport * as Exp from '../Exp';\nimport Logger from '../Logger';\n\nconst MAX_MESSAGE_LENGTH = 200;\nlet _projectRootToLogger = {};\n\nfunction _getLogger(projectRoot: string) {\n  let logger = _projectRootToLogger[projectRoot];\n  if (!logger) {\n    logger = Logger.child({type: 'project', project: path.resolve(projectRoot)});\n    _projectRootToLogger[projectRoot] = logger;\n  }\n\n  return logger;\n}\n\nexport function logWithLevel(projectRoot: string, level: string, object: any, msg: string) {\n  let logger = _getLogger(projectRoot);\n  switch (level) {\n    case 'debug':\n      logger.debug(object, msg);\n      return;\n    case 'info':\n      logger.info(object, msg);\n      return;\n    case 'warn':\n      logger.warn(object, msg);\n      return;\n    case 'error':\n      logger.error(object, msg);\n      return;\n    default:\n      logger.debug(object, msg);\n      return;\n  }\n}\n\nexport function logDebug(projectRoot: string, tag: string, message: string) {\n  _getLogger(projectRoot).debug({tag}, message.toString());\n}\n\nexport function logInfo(projectRoot: string, tag: string, message: string) {\n  _getLogger(projectRoot).info({tag}, message.toString());\n}\n\nexport function logError(projectRoot: string, tag: string, message: string) {\n  _getLogger(projectRoot).error({tag}, message.toString());\n\n  let truncatedMessage = message.toString();\n  if (truncatedMessage.length > MAX_MESSAGE_LENGTH) {\n    truncatedMessage = truncatedMessage.substring(0, MAX_MESSAGE_LENGTH);\n  }\n  Analytics.logEvent('Project Error', {\n    projectRoot,\n    tag,\n    message: truncatedMessage,\n  });\n}\n\nexport function logWarning(projectRoot: string, tag: string, message: string) {\n  _getLogger(projectRoot).warn({tag}, message.toString());\n\n  let truncatedMessage = message.toString();\n  if (truncatedMessage.length > MAX_MESSAGE_LENGTH) {\n    truncatedMessage = truncatedMessage.substring(0, MAX_MESSAGE_LENGTH);\n  }\n  Analytics.logEvent('Project Warning', {\n    projectRoot,\n    tag,\n    message: truncatedMessage,\n  });\n}\n\nexport function attachLoggerStream(projectRoot: string, stream: any) {\n  _getLogger(projectRoot).addStream(stream);\n}\n\nexport async function readConfigJsonAsync(projectRoot: string): Promise<any> {\n  let exp;\n  let pkg;\n\n  try {\n    pkg = await Exp.packageJsonForRoot(projectRoot).readAsync();\n    exp = await Exp.expJsonForRoot(projectRoot).readAsync();\n  } catch (e) {\n    if (e.isJsonFileError) {\n      // TODO: add error codes to json-file\n      if (e.message.startsWith('Error parsing JSON file')) {\n        logError(projectRoot, 'exponent', `Error parsing JSON file: ${e.cause.toString()}`);\n        return { exp: null, pkg: null };\n      }\n    }\n\n    // exp or pkg missing\n  }\n\n  // Easiest bail-out: package.json is missing\n  if (!pkg) {\n    logError(projectRoot, 'exponent', `Error: Can't find package.json`);\n    return { exp: null, pkg: null };\n  }\n\n  // Grab our exp config from package.json (legacy) or exp.json\n  if (!exp && pkg.exp) {\n    exp = pkg.exp;\n    logError(projectRoot, 'exponent', `Error: Move your \"exp\" config from package.json to exp.json.`);\n  } else if (!exp && !pkg.exp) {\n    logError(projectRoot, 'exponent', `Error: Missing exp.json. See https://docs.getexponent.com/`);\n    return { exp: null, pkg: null };\n  }\n\n  return { exp, pkg };\n}\n"],"sourceRoot":"/Users/Jesse/Exponent/newuniverse/universe/dev/xdl/gulp/src"}