{"version":3,"sources":["__tests__/UrlUtils-test.js"],"names":["jest","mock","UrlUtils","require","fs","projectPath","__setMockFilesystem","sdkVersion","describe","it","constructBundleUrlAsync","packagerUrl","expect","toEqual","urlType","hostType","constructManifestUrlAsync","constructPublishUrlAsync"],"mappings":"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","file":"../../__tests__/UrlUtils-test.js","sourcesContent":["jest.mock('analytics-node');\njest.mock('diskusage');\njest.mock('fs');\njest.mock('../Env');\n\nconst UrlUtils = require('../UrlUtils');\nconst fs = require('fs');\n\nconst projectPath = '/project';\nfs.__setMockFilesystem({\n  'project': {\n    '.exponent': {\n      'settings.json': JSON.stringify({\n        \"hostType\": \"tunnel\",\n        \"dev\": true,\n        \"strict\": false,\n        \"minify\": false,\n        \"urlType\": \"exp\",\n        \"urlRandomness\": \"ab-cde\",\n      }),\n      'packager-info.json': JSON.stringify({\n        \"packagerPort\": 19001,\n        \"exponentServerPort\": 19000,\n        \"exponentServerNgrokUrl\": \"http://ab-cde.jesse.test-project.exp.direct\",\n        \"packagerNgrokUrl\": \"https://packager.ab-cde.jesse.test-project.exp.direct\",\n      }),\n    },\n    'exp.json': JSON.stringify({\n      sdkVersion: '11.0.0',\n    }),\n  },\n});\n\ndescribe('constructBundleUrlAsync', () => {\n  it('returns the correct default packager url', async () => {\n    let packagerUrl = await UrlUtils.constructBundleUrlAsync(projectPath, {});\n    expect(packagerUrl).toEqual('exp://packager.ab-cde.jesse.test-project.exp.direct:80');\n  });\n\n  it('returns the correct http packager url', async () => {\n    let packagerUrl = await UrlUtils.constructBundleUrlAsync(projectPath, {\n      urlType: 'http',\n    });\n    expect(packagerUrl).toEqual('http://packager.ab-cde.jesse.test-project.exp.direct:80');\n  });\n\n  it('returns the correct localhost packager url', async () => {\n    let packagerUrl = await UrlUtils.constructBundleUrlAsync(projectPath, {\n      hostType: 'localhost',\n    });\n    expect(packagerUrl).toEqual('exp://localhost:19001');\n  });\n});\n\ndescribe('constructManifestUrlAsync', () => {\n  it('returns the correct default manifest url', async () => {\n    let packagerUrl = await UrlUtils.constructManifestUrlAsync(projectPath, {});\n    expect(packagerUrl).toEqual('exp://ab-cde.jesse.test-project.exp.direct:80');\n  });\n\n  it('returns the correct http manifest url', async () => {\n    let packagerUrl = await UrlUtils.constructManifestUrlAsync(projectPath, {\n      urlType: 'http',\n    });\n    expect(packagerUrl).toEqual('http://ab-cde.jesse.test-project.exp.direct:80');\n  });\n\n  it('returns the correct localhost manifest url', async () => {\n    let packagerUrl = await UrlUtils.constructManifestUrlAsync(projectPath, {\n      hostType: 'localhost',\n    });\n    expect(packagerUrl).toEqual('exp://localhost:19000');\n  });\n});\n\ndescribe('constructPublishUrlAsync', () => {\n  it('returns the correct publish url', async () => {\n    let packagerUrl = await UrlUtils.constructPublishUrlAsync(projectPath, 'test-project-entry-point');\n    expect(packagerUrl).toEqual('http://localhost:19001/test-project-entry-point.bundle?dev=false&minify=true&hot=false&assetPlugin=exponent/tools/hashAssetFiles');\n  });\n});\n"],"sourceRoot":"/Users/Jesse/Exponent/newuniverse/universe/dev/xdl/gulp/src"}