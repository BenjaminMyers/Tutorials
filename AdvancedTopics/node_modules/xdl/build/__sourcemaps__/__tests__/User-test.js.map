{"version":3,"sources":["__tests__/User-test.js"],"names":["jest","mock","jasmine","DEFAULT_TIMEOUT_INTERVAL","describe","it","fs","require","request","User","__setMockResponse","body","err","user","type","username","loginAsync","password","expect","calls","url","toEqual","configFile","JSON","parse","__getMockFilesystem","accessToken","toBeDefined","__addLoggedInUser","logoutAsync","toBeUndefined"],"mappings":"AAAA;;;;;;;;;;;;AAEAA,KAAKC,IAAL,CAAU,gBAAV;AACAD,KAAKC,IAAL,CAAU,IAAV;AACAD,KAAKC,IAAL,CAAU,QAAV;AACAD,KAAKC,IAAL,CAAU,SAAV;;AAEAC,QAAQC,wBAAR,GAAmC,KAAnC;;AAEAC,SAAS,YAAT,EAAuB,YAAM;AAC3BC,KAAG,yCAAH,6DAA8C;AAAA;AAAA;AAAA;AAAA;AAAA;AACtCC,cADsC,GACjCC,QAAQ,IAAR,CADiC;AAEtCC,mBAFsC,GAE5BD,QAAQ,SAAR,CAF4B;AAGtCE,gBAHsC,GAG/BF,QAAQ,SAAR,CAH+B;;;AAK5CC,oBAAQE,iBAAR,CAA0B;AACxBC,oBAAM;AACJC,qBAAK,IADD;AAEJC,sBAAM;AACJC,wBAAM,QADF;AAEJC,4BAAU;AAFN;AAFF;AADkB,aAA1B;;AAL4C;AAAA,mBAetCN,KAAKO,UAAL,CAAgB;AACpBD,wBAAU,OADU;AAEpBE,wBAAU;AAFU,aAAhB,CAfsC;;AAAA;;AAoB5C;AACAC,mBAAOV,QAAQP,IAAR,CAAakB,KAAb,CAAmB,CAAnB,EAAsB,CAAtB,EAAyBC,GAAhC,EAAqCC,OAArC,CAA6C,gKAA7C;;AAEA;AACIC,sBAxBwC,GAwB3BC,KAAKC,KAAL,CAAWlB,GAAGmB,mBAAH,GAAyB,MAAzB,EAAiC,WAAjC,EAA8C,eAA9C,CAAX,CAxB2B;;AAyB5CP,mBAAOI,WAAWI,WAAlB,EAA+BC,WAA/B;AACAT,mBAAOI,WAAWR,IAAlB,EAAwBO,OAAxB,CAAgC,QAAhC;AACAH,mBAAOI,WAAWP,QAAlB,EAA4BM,OAA5B,CAAoC,OAApC;;AA3B4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA9C;AA6BD,CA9BD;;AAgCAjB,SAAS,aAAT,EAAwB,YAAM;AAC5BC,KAAG,0CAAH,6DAA+C;AAAA;AAAA;AAAA;AAAA;AAAA;AACvCC,cADuC,GAClCC,QAAQ,IAAR,CADkC;AAEvCC,mBAFuC,GAE7BD,QAAQ,SAAR,CAF6B;AAGvCE,gBAHuC,GAGhCF,QAAQ,SAAR,CAHgC;;;AAK7CC,oBAAQE,iBAAR,CAA0B;AACxBC,oBAAM;AACJC,qBAAK;AADD;AADkB,aAA1B;;AAMAN,eAAGsB,iBAAH;;AAX6C;AAAA,mBAavCnB,KAAKoB,WAAL,EAbuC;;AAAA;;AAe7CX,mBAAOV,QAAQP,IAAR,CAAakB,KAAb,CAAmB,CAAnB,EAAsB,CAAtB,EAAyBC,GAAhC,EAAqCC,OAArC,CAA6C,uCAA7C;;AAEIC,sBAjByC,GAiB5BC,KAAKC,KAAL,CAAWlB,GAAGmB,mBAAH,GAAyB,MAAzB,EAAiC,WAAjC,EAA8C,eAA9C,CAAX,CAjB4B;;AAkB7CP,mBAAOI,WAAWP,QAAlB,EAA4Be,aAA5B;;AAlB6C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA/C;AAoBD,CArBD","file":"../../__tests__/User-test.js","sourcesContent":["'use strict';\n\njest.mock('analytics-node');\njest.mock('fs');\njest.mock('../Env');\njest.mock('request');\n\njasmine.DEFAULT_TIMEOUT_INTERVAL = 60000;\n\ndescribe('loginAsync', () => {\n  it('calls login Api and stores the username', async () => {\n    const fs = require('fs');\n    const request = require('request');\n    const User = require('../User');\n\n    request.__setMockResponse({\n      body: {\n        err: null,\n        user: {\n          type: 'client',\n          username: 'jesse',\n        },\n      },\n    });\n\n    await User.loginAsync({\n      username: 'jesse',\n      password: 'kicho0',\n    });\n\n    // Make sure Api request is correct\n    expect(request.mock.calls[0][0].url).toEqual('https://exp.host/--/api/adduser/%7B%22username%22%3A%22jesse%22%2C%22type%22%3A%22client%22%2C%22hashedPassword%22%3A%22eddd4a018e0b4d02230d991284620fd7%22%7D');\n\n    // Make sure the correct information was written to disk\n    let configFile = JSON.parse(fs.__getMockFilesystem()['home']['.exponent']['exponent.json']);\n    expect(configFile.accessToken).toBeDefined();\n    expect(configFile.type).toEqual('client');\n    expect(configFile.username).toEqual('jesse');\n  });\n});\n\ndescribe('logoutAsync', () => {\n  it('calls logout Api and cleans the username', async () => {\n    const fs = require('fs');\n    const request = require('request');\n    const User = require('../User');\n\n    request.__setMockResponse({\n      body: {\n        err: null,\n      },\n    });\n\n    fs.__addLoggedInUser();\n\n    await User.logoutAsync();\n\n    expect(request.mock.calls[0][0].url).toEqual('https://exp.host/--/api/logout/%5B%5D');\n\n    let configFile = JSON.parse(fs.__getMockFilesystem()['home']['.exponent']['exponent.json']);\n    expect(configFile.username).toBeUndefined();\n  });\n});\n"],"sourceRoot":"/Users/Jesse/Exponent/newuniverse/universe/dev/xdl/gulp/src"}