{"version":3,"sources":["__integration_tests__/Ngrok-test.js"],"names":["jest","disableAutomock","useRealTimers","jasmine","DEFAULT_TIMEOUT_INTERVAL","request","require","path","xdl","describe","it","projectRoot","resolve","__dirname","Project","startAsync","getUrlAsync","urlType","hostType","ngrokUrl","Error","promise","get","response","body","responseValue","JSON","parse","error","statusCode","console","log","bundleUrl","bundleResponse","includes","stopAsync"],"mappings":"AAAA;;;;AAIA;;;;;;;;;;;;AAEAA,KAAKC,eAAL;AACAD,KAAKE,aAAL;AACAC,QAAQC,wBAAR,GAAmC,KAAnC;;AAEA,IAAMC,UAAUC,QAAQ,SAAR,CAAhB;AACA,IAAMC,OAAOD,QAAQ,MAAR,CAAb;;AAEA,IAAME,MAAMF,QAAQ,QAAR,CAAZ;;AAEAG,SAAS,OAAT,EAAkB,YAAM;AACtBC,KAAG,oCAAH,6DAAyC;AAAA;AAAA;AAAA;AAAA;AAAA;AACnCC,uBADmC,GACrBJ,KAAKK,OAAL,CAAaC,SAAb,EAAwB,uCAAxB,CADqB;AAAA;AAAA,mBAEjCL,IAAIM,OAAJ,CAAYC,UAAZ,CAAuBJ,WAAvB,CAFiC;;AAAA;AAAA;AAAA,mBAGlBH,IAAIM,OAAJ,CAAYE,WAAZ,CAAwBL,WAAxB,EAAqC;AACxDM,uBAAS,MAD+C;AAExDC,wBAAU;AAF8C,aAArC,CAHkB;;AAAA;AAGnCC,oBAHmC;;AAAA,gBAOlCA,QAPkC;AAAA;AAAA;AAAA;;AAAA,kBAQ/B,IAAIC,KAAJ,CAAU,2BAAV,CAR+B;;AAAA;AAAA;AAAA,mBAUlBf,QAAQgB,OAAR,CAAgBC,GAAhB,CAAoBH,QAApB,CAVkB;;AAAA;AAUnCI,oBAVmC;;AAAA,gBAWlCA,SAASC,IAXyB;AAAA;AAAA;AAAA;;AAAA,kBAY/B,IAAIJ,KAAJ,CAAU,uCAAV,CAZ+B;;AAAA;AAcnCK,yBAdmC,GAcnBC,KAAKC,KAAL,CAAWJ,SAASC,IAApB,CAdmB;;AAAA,kBAenCC,cAAcG,KAAd,IAAuBL,SAASM,UAAT,KAAwB,GAfZ;AAAA;AAAA;AAAA;;AAAA,kBAgB/B,IAAIT,KAAJ,CAAU,qCAAqCK,cAAcG,KAA7D,CAhB+B;;AAAA;;AAmBvCE,oBAAQC,GAAR,CAAY,qEAAZ;;AAEIC,qBArBmC,GAqBvBP,cAAcO,SArBS;;AAsBvCF,oBAAQC,GAAR,yBAAkCC,SAAlC;AAtBuC;AAAA,mBAuBZ3B,QAAQgB,OAAR,CAAgBC,GAAhB,CAAoBU,SAApB,CAvBY;;AAAA;AAuBnCC,0BAvBmC;;AAAA,kBAwBnC,CAACA,eAAeT,IAAhB,IAAwB,CAACS,eAAeT,IAAf,CAAoBU,QAApB,CAA6B,kBAA7B,CAxBU;AAAA;AAAA;AAAA;;AAAA,kBAyB/B,IAAId,KAAJ,CAAU,qCAAV,CAzB+B;;AAAA;AAAA,kBA4BnCa,eAAeJ,UAAf,KAA8B,GA5BK;AAAA;AAAA;AAAA;;AAAA,kBA6B/B,IAAIT,KAAJ,CAAU,8CAA8Ca,eAAeJ,UAAvE,CA7B+B;;AAAA;AAAA;AAAA,mBAgCjCrB,IAAIM,OAAJ,CAAYqB,SAAZ,CAAsBxB,WAAtB,CAhCiC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAzC;AAkCD,CAnCD","file":"../../__integration_tests__/Ngrok-test.js","sourcesContent":["/**\n * Tests setting up an ngrok tunnel\n *\n */\n'use strict';\n\njest.disableAutomock();\njest.useRealTimers();\njasmine.DEFAULT_TIMEOUT_INTERVAL = 60000;\n\nconst request = require('request');\nconst path = require('path');\n\nconst xdl = require('../xdl');\n\ndescribe('ngrok', () => {\n  it('starts running and serves manifest', async () => {\n    let projectRoot = path.resolve(__dirname, '../../../../apps/new-project-template');\n    await xdl.Project.startAsync(projectRoot);\n    let ngrokUrl = await xdl.Project.getUrlAsync(projectRoot, {\n      urlType: 'http',\n      hostType: 'tunnel',\n    });\n    if (!ngrokUrl) {\n      throw new Error(\"ngrok didn't return a URL\");\n    }\n    let response = await request.promise.get(ngrokUrl);\n    if (!response.body) {\n      throw new Error(\"Didn't get expected manifest response\");\n    }\n    let responseValue = JSON.parse(response.body);\n    if (responseValue.error || response.statusCode !== 200) {\n      throw new Error(\"Server responded with an error: \" + responseValue.error);\n    }\n\n    console.log(\"Successfully fetched manifest through ngrok and everything seems OK\");\n\n    let bundleUrl = responseValue.bundleUrl;\n    console.log(`Fetching bundle at ${bundleUrl}`);\n    let bundleResponse = await request.promise.get(bundleUrl);\n    if (!bundleResponse.body || !bundleResponse.body.includes('sourceMappingURL')) {\n      throw new Error(\"Didn't get expected bundle response\");\n    }\n\n    if (bundleResponse.statusCode !== 200) {\n      throw new Error(\"Packager responded with bad status code: \" + bundleResponse.statusCode);\n    }\n\n    await xdl.Project.stopAsync(projectRoot);\n  });\n});\n"],"sourceRoot":"/Users/Jesse/Exponent/newuniverse/universe/dev/xdl/gulp/src"}