'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.update = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var update = exports.update = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(user_id, user_hash) {
    var deviceInfo, data;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;

            if (!_isWindowDefined()) {
              _context.next = 16;
              break;
            }

            deviceInfo = {};
            _context.prev = 3;
            _context.next = 6;
            return Diagnostics.getDeviceInfoAsync({
              limitLengthForIntercom: true
            });

          case 6:
            deviceInfo = _context.sent;
            _context.next = 12;
            break;

          case 9:
            _context.prev = 9;
            _context.t0 = _context['catch'](3);

            console.error(_context.t0);

          case 12:
            data = (0, _extends3.default)({
              app_id: 'fhlr5ht1',
              user_id: user_id,
              user_hash: user_hash
            }, deviceInfo);


            if (_version) {
              data = (0, _extends3.default)({}, data, {
                version: _version
              });
            }

            if (_isBooted) {
              if (user_id) {
                // Call update so that any conversations carry over from the logged out to
                // the logged in user.
                window.Intercom('update', data);
              } else {
                // Was logged in and is now logging out, restart intercom.
                window.Intercom('shutdown');
                window.Intercom('boot', data);
              }
            } else {
              window.Intercom('boot', data);
              _isBooted = true;
            }
            window.IntercomUpdateStyle();

          case 16:
            _context.next = 21;
            break;

          case 18:
            _context.prev = 18;
            _context.t1 = _context['catch'](0);

            console.error(_context.t1);

          case 21:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this, [[0, 18], [3, 9]]);
  }));

  return function update(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

exports.trackEvent = trackEvent;
exports.showNewMessage = showNewMessage;
exports.setVersionName = setVersionName;

var _Diagnostics = require('./Diagnostics');

var Diagnostics = _interopRequireWildcard(_Diagnostics);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _version = void 0;

var _isBooted = false;

function _isWindowDefined() {
  return typeof window !== 'undefined' && window && window.Intercom;
}

function trackEvent(name, metadata) {
  try {
    if (_isWindowDefined()) {
      window.Intercom('trackEvent', name, metadata);
    }
  } catch (e) {
    console.error(e);
  }
}

function showNewMessage(message) {
  try {
    if (_isWindowDefined()) {
      window.Intercom('showNewMessage', message);
    }
  } catch (e) {
    console.error(e);
  }
}

function setVersionName(name) {
  _version = name;
}
//# sourceMappingURL=__sourcemaps__/Intercom.js.map
