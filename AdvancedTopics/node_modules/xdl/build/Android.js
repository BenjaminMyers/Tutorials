'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stopAdbReverseAsync = exports.startAdbReverseAsync = exports.openProjectAsync = exports.openUrlSafeAsync = exports.upgradeExponentAsync = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getAdbOutputAsync = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(args) {
    var result, errorMessage;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return Binaries.addToPathAsync('adb');

          case 2:
            _context.prev = 2;
            _context.next = 5;
            return (0, _spawnAsync2.default)('adb', args);

          case 5:
            result = _context.sent;
            return _context.abrupt('return', result.stdout);

          case 9:
            _context.prev = 9;
            _context.t0 = _context['catch'](2);
            errorMessage = _lodash2.default.trim(_context.t0.stderr);

            if (errorMessage.startsWith(beginningOfAdbErrorMessage)) {
              errorMessage = errorMessage.substring(beginningOfAdbErrorMessage.length);
            }
            throw new Error(errorMessage);

          case 14:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this, [[2, 9]]);
  }));

  return function _getAdbOutputAsync(_x) {
    return _ref.apply(this, arguments);
  };
}();

// Device attached


var _isDeviceAttachedAsync = function () {
  var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2() {
    var devices, lines;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return _getAdbOutputAsync(['devices']);

          case 2:
            devices = _context2.sent;
            lines = _lodash2.default.trim(devices).split(/\r?\n/);
            // First line is "List of devices".

            return _context2.abrupt('return', lines.length > 1);

          case 5:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function _isDeviceAttachedAsync() {
    return _ref2.apply(this, arguments);
  };
}();

var _isDeviceAuthorizedAsync = function () {
  var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3() {
    var devices, lines, listOfDevicesWithoutFirstLine;
    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return _getAdbOutputAsync(['devices']);

          case 2:
            devices = _context3.sent;
            lines = _lodash2.default.trim(devices).split(/\r?\n/);

            lines.shift();
            listOfDevicesWithoutFirstLine = lines.join('\n');
            // result looks like "072c4cf200e333c7	device" when authorized
            // and "072c4cf200e333c7	unauthorized" when not.

            return _context3.abrupt('return', listOfDevicesWithoutFirstLine.includes('device'));

          case 7:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  return function _isDeviceAuthorizedAsync() {
    return _ref3.apply(this, arguments);
  };
}();

// Exponent installed


var _isExponentInstalledAsync = function () {
  var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4() {
    var packages, lines, i, line;
    return _regenerator2.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return _getAdbOutputAsync(['shell', 'pm', 'list', 'packages', '-f']);

          case 2:
            packages = _context4.sent;
            lines = packages.split(/\r?\n/);
            i = 0;

          case 5:
            if (!(i < lines.length)) {
              _context4.next = 14;
              break;
            }

            line = lines[i];

            if (!line.includes('host.exp.exponent.test')) {
              _context4.next = 9;
              break;
            }

            return _context4.abrupt('continue', 11);

          case 9:
            if (!line.includes('host.exp.exponent')) {
              _context4.next = 11;
              break;
            }

            return _context4.abrupt('return', true);

          case 11:
            i++;
            _context4.next = 5;
            break;

          case 14:
            return _context4.abrupt('return', false);

          case 15:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, this);
  }));

  return function _isExponentInstalledAsync() {
    return _ref4.apply(this, arguments);
  };
}();

var _exponentVersionAsync = function () {
  var _ref5 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5() {
    var info, regex, regexMatch;
    return _regenerator2.default.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return _getAdbOutputAsync(['shell', 'dumpsys', 'package', 'host.exp.exponent']);

          case 2:
            info = _context5.sent;
            regex = /versionName\=([0-9\.]+)/;
            regexMatch = regex.exec(info);

            if (!(regexMatch.length < 2)) {
              _context5.next = 7;
              break;
            }

            return _context5.abrupt('return', null);

          case 7:
            return _context5.abrupt('return', regexMatch[1]);

          case 8:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, this);
  }));

  return function _exponentVersionAsync() {
    return _ref5.apply(this, arguments);
  };
}();

var _checkExponentUpToDateAsync = function () {
  var _ref6 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee6() {
    var versions, installedVersion;
    return _regenerator2.default.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return _Api2.default.versionsAsync();

          case 2:
            versions = _context6.sent;
            _context6.next = 5;
            return _exponentVersionAsync();

          case 5:
            installedVersion = _context6.sent;


            if (!installedVersion || _semver2.default.lt(installedVersion, versions.androidVersion)) {
              _Logger2.default.notifications.warn({ code: _NotificationCode2.default.OLD_ANDROID_APP_VERSION }, 'This version of the Exponent app is out of date. Uninstall the app and run again to upgrade.');
            }

          case 7:
          case 'end':
            return _context6.stop();
        }
      }
    }, _callee6, this);
  }));

  return function _checkExponentUpToDateAsync() {
    return _ref6.apply(this, arguments);
  };
}();

var _downloadApkAsync = function () {
  var _ref7 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee7() {
    var versions, apkPath, url;
    return _regenerator2.default.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            _context7.next = 2;
            return _Api2.default.versionsAsync();

          case 2:
            versions = _context7.sent;
            apkPath = _path2.default.join(_apkCacheDirectory(), 'Exponent-' + versions.androidVersion + '.apk');
            _context7.next = 6;
            return (0, _existsAsync2.default)(apkPath);

          case 6:
            if (!_context7.sent) {
              _context7.next = 8;
              break;
            }

            return _context7.abrupt('return', apkPath);

          case 8:
            url = 'https://s3.amazonaws.com/exp-android-apks/Exponent-' + versions.androidVersion + '.apk';
            _context7.next = 11;
            return (0, _download2.default)(url, _apkCacheDirectory());

          case 11:
            return _context7.abrupt('return', apkPath);

          case 12:
          case 'end':
            return _context7.stop();
        }
      }
    }, _callee7, this);
  }));

  return function _downloadApkAsync() {
    return _ref7.apply(this, arguments);
  };
}();

var _installExponentAsync = function () {
  var _ref8 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee8() {
    var path, result;
    return _regenerator2.default.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            _Logger2.default.global.info('Downloading latest version of Exponent');
            _Logger2.default.notifications.info({ code: _NotificationCode2.default.START_LOADING });
            _context8.next = 4;
            return _downloadApkAsync();

          case 4:
            path = _context8.sent;

            _Logger2.default.global.info('Installing Exponent on device');
            _context8.next = 8;
            return _getAdbOutputAsync(['install', path]);

          case 8:
            result = _context8.sent;

            _Logger2.default.notifications.info({ code: _NotificationCode2.default.STOP_LOADING });
            return _context8.abrupt('return', result);

          case 11:
          case 'end':
            return _context8.stop();
        }
      }
    }, _callee8, this);
  }));

  return function _installExponentAsync() {
    return _ref8.apply(this, arguments);
  };
}();

var _uninstallExponentAsync = function () {
  var _ref9 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee9() {
    return _regenerator2.default.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _Logger2.default.global.info('Uninstalling Exponent from Android device.');
            _context9.next = 3;
            return _getAdbOutputAsync(['uninstall', 'host.exp.exponent']);

          case 3:
            return _context9.abrupt('return', _context9.sent);

          case 4:
          case 'end':
            return _context9.stop();
        }
      }
    }, _callee9, this);
  }));

  return function _uninstallExponentAsync() {
    return _ref9.apply(this, arguments);
  };
}();

var upgradeExponentAsync = exports.upgradeExponentAsync = function () {
  var _ref10 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee10() {
    return _regenerator2.default.wrap(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            _context10.prev = 0;
            _context10.next = 3;
            return _assertDeviceReadyAsync();

          case 3:
            if (_context10.sent) {
              _context10.next = 5;
              break;
            }

            return _context10.abrupt('return');

          case 5:
            _context10.next = 7;
            return _uninstallExponentAsync();

          case 7:
            _context10.next = 9;
            return _installExponentAsync();

          case 9:
            if (!_lastUrl) {
              _context10.next = 14;
              break;
            }

            _Logger2.default.global.info('Opening ' + _lastUrl + ' in Exponent.');
            _context10.next = 13;
            return _getAdbOutputAsync(['shell', 'am', 'start', '-a', 'android.intent.action.VIEW', '-d', _lastUrl]);

          case 13:
            _lastUrl = null;

          case 14:
            _context10.next = 19;
            break;

          case 16:
            _context10.prev = 16;
            _context10.t0 = _context10['catch'](0);

            _Logger2.default.global.error('Error running adb: ' + _context10.t0.message);

          case 19:
          case 'end':
            return _context10.stop();
        }
      }
    }, _callee10, this, [[0, 16]]);
  }));

  return function upgradeExponentAsync() {
    return _ref10.apply(this, arguments);
  };
}();

// Open Url


var _assertDeviceReadyAsync = function () {
  var _ref11 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee11() {
    var genymotionMessage;
    return _regenerator2.default.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            genymotionMessage = 'https://developer.android.com/studio/run/device.html#developer-device-options. If you are using Genymotion go to Settings -> ADB, select "Use custom Android SDK tools", and point it at your Android SDK directory.';
            _context11.next = 3;
            return _isDeviceAttachedAsync();

          case 3:
            if (_context11.sent) {
              _context11.next = 6;
              break;
            }

            _Logger2.default.global.error('No Android device found. Please connect a device and follow the instructions here to enable USB debugging:\n' + genymotionMessage);
            return _context11.abrupt('return', false);

          case 6:
            _context11.next = 8;
            return _isDeviceAuthorizedAsync();

          case 8:
            if (_context11.sent) {
              _context11.next = 11;
              break;
            }

            _Logger2.default.global.error('This computer is not authorized to debug the device. Please follow the instructions here to enable USB debugging:\n' + genymotionMessage);
            return _context11.abrupt('return', false);

          case 11:
            return _context11.abrupt('return', true);

          case 12:
          case 'end':
            return _context11.stop();
        }
      }
    }, _callee11, this);
  }));

  return function _assertDeviceReadyAsync() {
    return _ref11.apply(this, arguments);
  };
}();

var _openUrlAsync = function () {
  var _ref12 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee12(url) {
    return _regenerator2.default.wrap(function _callee12$(_context12) {
      while (1) {
        switch (_context12.prev = _context12.next) {
          case 0:
            _lastUrl = url;
            _checkExponentUpToDateAsync(); // let this run in background
            _context12.next = 4;
            return _getAdbOutputAsync(['shell', 'am', 'start', '-a', 'android.intent.action.VIEW', '-d', url]);

          case 4:
            return _context12.abrupt('return', _context12.sent);

          case 5:
          case 'end':
            return _context12.stop();
        }
      }
    }, _callee12, this);
  }));

  return function _openUrlAsync(_x2) {
    return _ref12.apply(this, arguments);
  };
}();

var openUrlSafeAsync = exports.openUrlSafeAsync = function () {
  var _ref13 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee13(url) {
    var installedExponent;
    return _regenerator2.default.wrap(function _callee13$(_context13) {
      while (1) {
        switch (_context13.prev = _context13.next) {
          case 0:
            _context13.prev = 0;
            _context13.next = 3;
            return _assertDeviceReadyAsync();

          case 3:
            if (_context13.sent) {
              _context13.next = 5;
              break;
            }

            return _context13.abrupt('return');

          case 5:
            installedExponent = false;
            _context13.next = 8;
            return _isExponentInstalledAsync();

          case 8:
            if (_context13.sent) {
              _context13.next = 12;
              break;
            }

            _context13.next = 11;
            return _installExponentAsync();

          case 11:
            installedExponent = true;

          case 12:

            _Logger2.default.global.info('Opening on Android device');
            _context13.next = 15;
            return _openUrlAsync(url);

          case 15:

            Analytics.logEvent('Open Url on Device', {
              platform: 'android',
              installedExponent: installedExponent
            });
            _context13.next = 21;
            break;

          case 18:
            _context13.prev = 18;
            _context13.t0 = _context13['catch'](0);

            _Logger2.default.global.error('Error running adb: ' + _context13.t0.message);

          case 21:
          case 'end':
            return _context13.stop();
        }
      }
    }, _callee13, this, [[0, 18]]);
  }));

  return function openUrlSafeAsync(_x3) {
    return _ref13.apply(this, arguments);
  };
}();

var openProjectAsync = exports.openProjectAsync = function () {
  var _ref14 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee14(projectRoot) {
    var projectUrl;
    return _regenerator2.default.wrap(function _callee14$(_context14) {
      while (1) {
        switch (_context14.prev = _context14.next) {
          case 0:
            _context14.prev = 0;
            _context14.next = 3;
            return startAdbReverseAsync(projectRoot);

          case 3:
            _context14.next = 5;
            return UrlUtils.constructManifestUrlAsync(projectRoot);

          case 5:
            projectUrl = _context14.sent;
            _context14.next = 8;
            return openUrlSafeAsync(projectUrl);

          case 8:
            _context14.next = 13;
            break;

          case 10:
            _context14.prev = 10;
            _context14.t0 = _context14['catch'](0);

            _Logger2.default.global.error('Error running adb: ' + _context14.t0.message);

          case 13:
          case 'end':
            return _context14.stop();
        }
      }
    }, _callee14, this, [[0, 10]]);
  }));

  return function openProjectAsync(_x4) {
    return _ref14.apply(this, arguments);
  };
}();

// Adb reverse


var startAdbReverseAsync = exports.startAdbReverseAsync = function () {
  var _ref15 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee15(projectRoot) {
    var packagerInfo;
    return _regenerator2.default.wrap(function _callee15$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            _context15.next = 2;
            return ProjectSettings.readPackagerInfoAsync(projectRoot);

          case 2:
            packagerInfo = _context15.sent;
            _context15.next = 5;
            return adbReverse(packagerInfo.packagerPort);

          case 5:
            _context15.t0 = _context15.sent;

            if (!_context15.t0) {
              _context15.next = 10;
              break;
            }

            _context15.next = 9;
            return adbReverse(packagerInfo.exponentServerPort);

          case 9:
            _context15.t0 = _context15.sent;

          case 10:
            return _context15.abrupt('return', _context15.t0);

          case 11:
          case 'end':
            return _context15.stop();
        }
      }
    }, _callee15, this);
  }));

  return function startAdbReverseAsync(_x5) {
    return _ref15.apply(this, arguments);
  };
}();

var stopAdbReverseAsync = exports.stopAdbReverseAsync = function () {
  var _ref16 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee16(projectRoot) {
    var packagerInfo;
    return _regenerator2.default.wrap(function _callee16$(_context16) {
      while (1) {
        switch (_context16.prev = _context16.next) {
          case 0:
            _context16.next = 2;
            return ProjectSettings.readPackagerInfoAsync(projectRoot);

          case 2:
            packagerInfo = _context16.sent;
            _context16.next = 5;
            return adbReverseRemove(packagerInfo.packagerPort);

          case 5:
            _context16.next = 7;
            return adbReverseRemove(packagerInfo.exponentServerPort);

          case 7:
          case 'end':
            return _context16.stop();
        }
      }
    }, _callee16, this);
  }));

  return function stopAdbReverseAsync(_x6) {
    return _ref16.apply(this, arguments);
  };
}();

var adbReverse = function () {
  var _ref17 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee17(port) {
    return _regenerator2.default.wrap(function _callee17$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            _context17.next = 2;
            return _isDeviceAuthorizedAsync();

          case 2:
            if (_context17.sent) {
              _context17.next = 4;
              break;
            }

            return _context17.abrupt('return', false);

          case 4:
            _context17.prev = 4;
            _context17.next = 7;
            return _getAdbOutputAsync(['reverse', 'tcp:' + port, 'tcp:' + port]);

          case 7:
            return _context17.abrupt('return', true);

          case 10:
            _context17.prev = 10;
            _context17.t0 = _context17['catch'](4);

            _Logger2.default.global.warn('Couldn\'t adb reverse: ' + _context17.t0.message);
            return _context17.abrupt('return', false);

          case 14:
          case 'end':
            return _context17.stop();
        }
      }
    }, _callee17, this, [[4, 10]]);
  }));

  return function adbReverse(_x7) {
    return _ref17.apply(this, arguments);
  };
}();

var adbReverseRemove = function () {
  var _ref18 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee18(port) {
    return _regenerator2.default.wrap(function _callee18$(_context18) {
      while (1) {
        switch (_context18.prev = _context18.next) {
          case 0:
            _context18.next = 2;
            return _isDeviceAuthorizedAsync();

          case 2:
            if (_context18.sent) {
              _context18.next = 4;
              break;
            }

            return _context18.abrupt('return', false);

          case 4:
            _context18.prev = 4;
            _context18.next = 7;
            return _getAdbOutputAsync(['reverse', '--remove', 'tcp:' + port]);

          case 7:
            return _context18.abrupt('return', true);

          case 10:
            _context18.prev = 10;
            _context18.t0 = _context18['catch'](4);

            // Don't send this to warn because we call this preemptively sometimes
            _Logger2.default.global.debug('Couldn\'t adb reverse remove: ' + _context18.t0.message);
            return _context18.abrupt('return', false);

          case 14:
          case 'end':
            return _context18.stop();
        }
      }
    }, _callee18, this, [[4, 10]]);
  }));

  return function adbReverseRemove(_x8) {
    return _ref18.apply(this, arguments);
  };
}();

exports.isPlatformSupported = isPlatformSupported;

require('instapromise');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _download = require('download');

var _download2 = _interopRequireDefault(_download);

var _spawnAsync = require('@exponent/spawn-async');

var _spawnAsync2 = _interopRequireDefault(_spawnAsync);

var _existsAsync = require('exists-async');

var _existsAsync2 = _interopRequireDefault(_existsAsync);

var _mkdirp = require('mkdirp');

var _mkdirp2 = _interopRequireDefault(_mkdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _semver = require('semver');

var _semver2 = _interopRequireDefault(_semver);

var _Analytics = require('./Analytics');

var Analytics = _interopRequireWildcard(_Analytics);

var _Binaries = require('./Binaries');

var Binaries = _interopRequireWildcard(_Binaries);

var _Api = require('./Api');

var _Api2 = _interopRequireDefault(_Api);

var _Logger = require('./Logger');

var _Logger2 = _interopRequireDefault(_Logger);

var _NotificationCode = require('./NotificationCode');

var _NotificationCode2 = _interopRequireDefault(_NotificationCode);

var _ProjectSettings = require('./ProjectSettings');

var ProjectSettings = _interopRequireWildcard(_ProjectSettings);

var _UserSettings = require('./UserSettings');

var _UserSettings2 = _interopRequireDefault(_UserSettings);

var _UrlUtils = require('./UrlUtils');

var UrlUtils = _interopRequireWildcard(_UrlUtils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _lastUrl = null;
var beginningOfAdbErrorMessage = 'error: ';

function isPlatformSupported() {
  return process.platform === 'darwin' || process.platform === 'win32' || process.platform === 'linux';
}

function _apkCacheDirectory() {
  var dotExponentHomeDirectory = _UserSettings2.default.dotExponentHomeDirectory();
  var dir = _path2.default.join(dotExponentHomeDirectory, 'android-apk-cache');
  _mkdirp2.default.sync(dir);
  return dir;
}
//# sourceMappingURL=__sourcemaps__/Android.js.map
