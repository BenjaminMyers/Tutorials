'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.readConfigJsonAsync = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var readConfigJsonAsync = exports.readConfigJsonAsync = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(projectRoot) {
    var exp, pkg;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            exp = void 0;
            pkg = void 0;
            _context.prev = 2;
            _context.next = 5;
            return Exp.packageJsonForRoot(projectRoot).readAsync();

          case 5:
            pkg = _context.sent;
            _context.next = 8;
            return Exp.expJsonForRoot(projectRoot).readAsync();

          case 8:
            exp = _context.sent;
            _context.next = 17;
            break;

          case 11:
            _context.prev = 11;
            _context.t0 = _context['catch'](2);

            if (!_context.t0.isJsonFileError) {
              _context.next = 17;
              break;
            }

            if (!_context.t0.message.startsWith('Error parsing JSON file')) {
              _context.next = 17;
              break;
            }

            logError(projectRoot, 'exponent', 'Error parsing JSON file: ' + _context.t0.cause.toString());
            return _context.abrupt('return', { exp: null, pkg: null });

          case 17:
            if (pkg) {
              _context.next = 20;
              break;
            }

            logError(projectRoot, 'exponent', 'Error: Can\'t find package.json');
            return _context.abrupt('return', { exp: null, pkg: null });

          case 20:
            if (!(!exp && pkg.exp)) {
              _context.next = 25;
              break;
            }

            exp = pkg.exp;
            logError(projectRoot, 'exponent', 'Error: Move your "exp" config from package.json to exp.json.');
            _context.next = 28;
            break;

          case 25:
            if (!(!exp && !pkg.exp)) {
              _context.next = 28;
              break;
            }

            logError(projectRoot, 'exponent', 'Error: Missing exp.json. See https://docs.getexponent.com/');
            return _context.abrupt('return', { exp: null, pkg: null });

          case 28:
            return _context.abrupt('return', { exp: exp, pkg: pkg });

          case 29:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this, [[2, 11]]);
  }));

  return function readConfigJsonAsync(_x) {
    return _ref.apply(this, arguments);
  };
}();

exports.logWithLevel = logWithLevel;
exports.logDebug = logDebug;
exports.logInfo = logInfo;
exports.logError = logError;
exports.logWarning = logWarning;
exports.attachLoggerStream = attachLoggerStream;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _Analytics = require('../Analytics');

var Analytics = _interopRequireWildcard(_Analytics);

var _Exp = require('../Exp');

var Exp = _interopRequireWildcard(_Exp);

var _Logger = require('../Logger');

var _Logger2 = _interopRequireDefault(_Logger);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MAX_MESSAGE_LENGTH = 200;
var _projectRootToLogger = {};

function _getLogger(projectRoot) {
  var logger = _projectRootToLogger[projectRoot];
  if (!logger) {
    logger = _Logger2.default.child({ type: 'project', project: _path2.default.resolve(projectRoot) });
    _projectRootToLogger[projectRoot] = logger;
  }

  return logger;
}

function logWithLevel(projectRoot, level, object, msg) {
  var logger = _getLogger(projectRoot);
  switch (level) {
    case 'debug':
      logger.debug(object, msg);
      return;
    case 'info':
      logger.info(object, msg);
      return;
    case 'warn':
      logger.warn(object, msg);
      return;
    case 'error':
      logger.error(object, msg);
      return;
    default:
      logger.debug(object, msg);
      return;
  }
}

function logDebug(projectRoot, tag, message) {
  _getLogger(projectRoot).debug({ tag: tag }, message.toString());
}

function logInfo(projectRoot, tag, message) {
  _getLogger(projectRoot).info({ tag: tag }, message.toString());
}

function logError(projectRoot, tag, message) {
  _getLogger(projectRoot).error({ tag: tag }, message.toString());

  var truncatedMessage = message.toString();
  if (truncatedMessage.length > MAX_MESSAGE_LENGTH) {
    truncatedMessage = truncatedMessage.substring(0, MAX_MESSAGE_LENGTH);
  }
  Analytics.logEvent('Project Error', {
    projectRoot: projectRoot,
    tag: tag,
    message: truncatedMessage
  });
}

function logWarning(projectRoot, tag, message) {
  _getLogger(projectRoot).warn({ tag: tag }, message.toString());

  var truncatedMessage = message.toString();
  if (truncatedMessage.length > MAX_MESSAGE_LENGTH) {
    truncatedMessage = truncatedMessage.substring(0, MAX_MESSAGE_LENGTH);
  }
  Analytics.logEvent('Project Warning', {
    projectRoot: projectRoot,
    tag: tag,
    message: truncatedMessage
  });
}

function attachLoggerStream(projectRoot, stream) {
  _getLogger(projectRoot).addStream(stream);
}
//# sourceMappingURL=../__sourcemaps__/project/ProjectUtils.js.map
