'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var installAndInstructAsync = function () {
  var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(projectDir, unsupportedPackagesUsed) {
    var nodeModulesPath, nextStepMessagePath, npmInstallError, nextStepMessage;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            nodeModulesPath = _path2.default.join(projectDir, '/node_modules');
            nextStepMessagePath = _path2.default.join(projectDir, '/exponent-next-steps.txt');


            _fsExtra2.default.removeSync(nodeModulesPath);
            console.log('Running npm install, this may take a few minutes.');
            console.log('-----------------------------------------------------');
            npmInstallError = false;
            _context2.prev = 6;
            _context2.next = 9;
            return (0, _spawnAsync2.default)('npm', ['install'], { cwd: projectDir, stdio: 'inherit' });

          case 9:
            _context2.next = 15;
            break;

          case 11:
            _context2.prev = 11;
            _context2.t0 = _context2['catch'](6);

            console.log('\n');
            npmInstallError = true;

          case 15:
            console.log('\n');
            console.log('#####################################################');
            console.log('             npm install complete');
            console.log('#####################################################');

            if (npmInstallError) {
              console.log('\n');
              console.log('* There was an error though, please read the error message, try to fix the issue and then run npm install again. No need to run exp convert again.');
            }

            console.log('\n');
            nextStepMessage = 'Next steps:\n------------\n1. Find your AppRegistry.registerComponent(\'YourApplicationName\', () => YourRootComponent) call and replace it with Exponent.registerRootComponent(YourRootComponent) (you will need to import Exponent from \'exponent\').\n2. Upload your app icon somewhere on the web and add it the newly created exp.json file, in the iconUrl and loading.iconUrl fields.\n3. Delete your \'android\' and \'ios\' directories if you have them -- you no longer need to compile any native code to run your app.\n4. ' + showCompatibilityMessage(unsupportedPackagesUsed) + '\n5. Open your app in XDE and run it, fix bugs as they arise.\n';

            console.log(nextStepMessage);
            _fsExtra2.default.outputFileSync(nextStepMessagePath, nextStepMessage);
            console.log('(This message has been saved to exponent-next-steps.txt for your convenience)');

          case 25:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this, [[6, 11]]);
  }));

  return function installAndInstructAsync(_x3, _x4) {
    return _ref3.apply(this, arguments);
  };
}();

var _slugify = require('slugify');

var _slugify2 = _interopRequireDefault(_slugify);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _jsonfile = require('jsonfile');

var _jsonfile2 = _interopRequireDefault(_jsonfile);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _spawnAsync = require('@exponent/spawn-async');

var _spawnAsync2 = _interopRequireDefault(_spawnAsync);

var _exp = require('./templates/exp');

var _exp2 = _interopRequireDefault(_exp);

var _babelrc = require('./templates/babelrc');

var _babelrc2 = _interopRequireDefault(_babelrc);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(projectDir, _ref2) {
    var projectName = _ref2.projectName,
        projectDescription = _ref2.projectDescription,
        projectEntryPoint = _ref2.projectEntryPoint;
    var projectSlug, expJsonTargetPath, babelRcTargetPath, packageJsonSourcePath, packageJsonTargetPath, expJson, unsupportedPackagesUsed, packageJson;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            projectSlug = (0, _slugify2.default)(projectName.toLowerCase());
            expJsonTargetPath = _path2.default.join(projectDir, '/exp.json');
            babelRcTargetPath = _path2.default.join(projectDir, '/.babelrc');
            packageJsonSourcePath = _path2.default.join(projectDir, '/package.json');
            packageJsonTargetPath = _path2.default.join(projectDir, '/package.json');

            // Add values to exp.json,) save to given path

            expJson = (0, _extends3.default)({}, _exp2.default);

            expJson.name = projectName;
            expJson.description = projectDescription || 'No description';
            expJson.slug = projectSlug;
            _jsonfile2.default.writeFileSync(expJsonTargetPath, expJson, { spaces: 2 });
            console.log('Wrote exp.json');

            // Add entry point and dependencies to package.json
            unsupportedPackagesUsed = [];
            packageJson = _jsonfile2.default.readFileSync(packageJsonSourcePath);

            packageJson.dependencies = (0, _extends3.default)({}, packageJson.dependencies, dependencies);

            // Remove
            (0, _keys2.default)(packageJson.dependencies).forEach(function (dep) {
              if (unsupportedPackages[dep]) {
                if (dep === 'react-native-vector-icons') {
                  packageJson.dependencies[dep] = 'github:exponentjs/react-native-vector-icons';
                } else {
                  delete packageJson.dependencies[dep];
                }
                unsupportedPackagesUsed.push(dep);
              }
            });

            if (projectEntryPoint !== 'index.*.js' && projectEntryPoint !== 'index.js' && projectEntryPoint !== 'index.ios.js' && projectEntryPoint !== 'index.android.js') {
              packageJson.main = projectEntryPoint;
            }
            _jsonfile2.default.writeFileSync(packageJsonTargetPath, packageJson, { spaces: 2 });
            console.log('Updated package.json');

            // TODO: Add import Exponent from 'exponent'; at the top of main file
            // TODO: Add .exponent/* to gitignore

            // Copy babelrc
            _jsonfile2.default.writeFileSync(babelRcTargetPath, _babelrc2.default, { spaces: 2 });
            console.log('Updated .babelrc');

            // Save next steps to a file, display, exit
            _context.next = 22;
            return installAndInstructAsync(projectDir, unsupportedPackagesUsed);

          case 22:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  function convertProjectAsync(_x, _x2) {
    return _ref.apply(this, arguments);
  }

  return convertProjectAsync;
}();

var dependencies = {
  "@exponent/vector-icons": "^1.0.1",
  "exponent": "^10.0.0",
  "react": "15.3.1",
  "react-native": "github:exponentjs/react-native#sdk-10.0.0"
};

var unsupportedPackages = {
  'react-native-vector-icons': 'We installed @exponent/vector-icons for you instead. When you feel like it, you can change any use of react-native-vector-icons to this. But no rush, we also installed our fork of react-native-vector-icons that uses @exponent/vector-icons behind the scenes, so you don\'t actually *need* to make any changes.\nWhen you want to convert it, you\'ll just need to do something like this: "import Icon from \'react-native-vector-icons/Ionicons\'" becomes "import { Ionicons as Icon } from \'@exponent/vector-icons\'" ',
  'react-native-video': 'Exponent provides a video component for you with the same API as react-native-video. You can use it with "import { Components } from \'exponent\';" and <Components.Video /> in your render function. ',
  'react-native-svg': 'Exponent provides react-native-svg for you. You can use it with "import { Components } from \'exponent\';" and <Components.Svg /> in your render function.',
  'react-native-maps': 'Exponent provides react-native-maps for you. You can use it with "import { Components } from \'exponent\';" and <Components.Map /> in your render function.',
  'react-native-linear-gradient': 'Exponent provides react-native-linear-gradient for you. You can use it with "import { Components } from \'exponent\';" and <Components.LinearGradient /> in your render function.'
};

function showCompatibilityMessage(packages) {
  if (packages.length) {
    return 'Resolve any issues with potentially incompatible packages: \n\n' + packages.map(function (pkg) {
      return '** ' + pkg + ': ' + unsupportedPackages[pkg];
    }).join('\n') + '\n** This may not be an exhaustive list of packages you will need to address -- any package that has a native code dependency will need to be converted to an Exponent equivalent or removed. Refer to the SDK API reference here: https://docs.getexponent.com/versions/latest/sdk/index.html';
  } else {
    return 'We didn\'t detect any known incompatible packages, but if you have any with native dependencies installed, you will need to remove them from your project.';
  }
}
//# sourceMappingURL=../__sourcemaps__/project/Convert.js.map
