'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clearXDLCacheAsync = exports.resetProjectRandomnessAsync = exports.getProjectRandomnessAsync = exports.sendAsync = exports.recentValidExpsAsync = exports.getPublishInfoAsync = exports.expInfoSafeAsync = exports.expInfoAsync = exports.saveRecentExpRootAsync = exports.createNewExpAsync = exports.determineEntryPointAsync = exports.expConfigForRootAsync = exports.convertProjectAsync = exports.ENTRY_POINT_PLATFORM_TEMPLATE_STRING = undefined;

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var expConfigForRootAsync = exports.expConfigForRootAsync = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(root) {
    var pkg, exp;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            pkg = void 0, exp = void 0;
            _context.prev = 1;
            _context.next = 4;
            return packageJsonForRoot(root).readAsync();

          case 4:
            pkg = _context.sent;
            _context.next = 7;
            return expJsonForRoot(root).readAsync();

          case 7:
            exp = _context.sent;
            _context.next = 12;
            break;

          case 10:
            _context.prev = 10;
            _context.t0 = _context['catch'](1);

          case 12:

            if (!exp && pkg) {
              exp = pkg.exp;
            }

            return _context.abrupt('return', exp);

          case 14:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this, [[1, 10]]);
  }));

  return function expConfigForRootAsync(_x) {
    return _ref.apply(this, arguments);
  };
}();

// You must call UrlUtils.getPlatformSpecificBundleUrl to remove the platform template string
var determineEntryPointAsync = exports.determineEntryPointAsync = function () {
  var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(root) {
    var exp, pkgJson, pkg, main, entryPoint, hasSeparateIosAndAndroidFiles;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return expConfigForRootAsync(root);

          case 2:
            exp = _context2.sent;
            pkgJson = packageJsonForRoot(root);
            _context2.next = 6;
            return pkgJson.readAsync();

          case 6:
            pkg = _context2.sent;
            main = pkg.main;

            // entryPoint is relative to the packager root and main is relative
            // to the project root. So if your rn-cli.config.js points to a different
            // root than the project root, these can be different. Most of the time
            // you should use main.

            entryPoint = main || 'index.js';

            if (exp && exp.entryPoint) {
              entryPoint = exp.entryPoint;
            }

            hasSeparateIosAndAndroidFiles = false;

            if (!_doesFileExist(_path2.default.join(root, entryPoint)) && (_doesFileExist(_path2.default.join(root, _getPlatformSpecificEntryPoint(entryPoint, 'android'))) || _doesFileExist(_path2.default.join(root, _getPlatformSpecificEntryPoint(entryPoint, 'ios'))))) {
              hasSeparateIosAndAndroidFiles = true;
            }

            if (!hasSeparateIosAndAndroidFiles) {
              _context2.next = 16;
              break;
            }

            return _context2.abrupt('return', _getPlatformSpecificEntryPoint(entryPoint, ENTRY_POINT_PLATFORM_TEMPLATE_STRING));

          case 16:
            return _context2.abrupt('return', entryPoint);

          case 17:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function determineEntryPointAsync(_x2) {
    return _ref2.apply(this, arguments);
  };
}();

var _downloadStarterAppAsync = function () {
  var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(templateId) {
    var versions, templateApp, i, starterAppVersion, starterAppName, filename, starterAppPath, url;
    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return _Api2.default.versionsAsync();

          case 2:
            versions = _context3.sent;
            templateApp = null;

            for (i = 0; i < versions.templates.length; i++) {
              if (templateId === versions.templates[i].id) {
                templateApp = versions.templates[i];
              }
            }

            if (templateApp) {
              _context3.next = 7;
              break;
            }

            throw new _XDLError2.default(_ErrorCode2.default.INVALID_OPTIONS, 'No template app with id ' + templateId + '.');

          case 7:
            starterAppVersion = templateApp.version;
            starterAppName = templateId + '-' + starterAppVersion;
            filename = starterAppName + '.tar.gz';
            starterAppPath = _path2.default.join(_starterAppCacheDirectory(), filename);
            _context3.next = 13;
            return (0, _existsAsync2.default)(starterAppPath);

          case 13:
            if (!_context3.sent) {
              _context3.next = 15;
              break;
            }

            return _context3.abrupt('return', {
              starterAppPath: starterAppPath,
              starterAppName: starterAppName
            });

          case 15:
            url = 'https://s3.amazonaws.com/exp-starter-apps/' + filename;
            _context3.next = 18;
            return (0, _download2.default)(url, _starterAppCacheDirectory());

          case 18:
            return _context3.abrupt('return', {
              starterAppPath: starterAppPath,
              starterAppName: starterAppName
            });

          case 19:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  return function _downloadStarterAppAsync(_x3) {
    return _ref3.apply(this, arguments);
  };
}();

var _extractWindowsAsync = function () {
  var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4(archive, starterAppName, dir) {
    var dotExponentHomeDirectory, tmpDir, tmpFile, binary;
    return _regenerator2.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            dotExponentHomeDirectory = _UserSettings2.default.dotExponentHomeDirectory();
            tmpDir = _path2.default.join(dotExponentHomeDirectory, 'starter-app-cache', 'tmp');
            tmpFile = _path2.default.join(tmpDir, starterAppName + '.tar');
            binary = _path2.default.join(Binaries.getBinariesPath(), '7z1602-extra', '7za');
            _context4.prev = 4;
            _context4.next = 7;
            return (0, _spawnAsync2.default)(binary, ['x', archive, '-aoa', '-o' + tmpDir]);

          case 7:
            _context4.next = 9;
            return (0, _spawnAsync2.default)(binary, ['x', tmpFile, '-aoa', '-o' + dir]);

          case 9:
            _context4.next = 16;
            break;

          case 11:
            _context4.prev = 11;
            _context4.t0 = _context4['catch'](4);

            console.error(_context4.t0.message);
            console.error(_context4.t0.stderr);
            throw _context4.t0;

          case 16:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, this, [[4, 11]]);
  }));

  return function _extractWindowsAsync(_x4, _x5, _x6) {
    return _ref4.apply(this, arguments);
  };
}();

var _extractAsync = function () {
  var _ref5 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5(archive, starterAppName, dir) {
    return _regenerator2.default.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.prev = 0;

            if (!(process.platform === 'win32')) {
              _context5.next = 6;
              break;
            }

            _context5.next = 4;
            return _extractWindowsAsync(archive, starterAppName, dir);

          case 4:
            _context5.next = 8;
            break;

          case 6:
            _context5.next = 8;
            return (0, _spawnAsync2.default)('tar', ['-xf', archive, '-C', dir], {
              stdio: 'inherit',
              cwd: __dirname
            });

          case 8:
            _context5.next = 15;
            break;

          case 10:
            _context5.prev = 10;
            _context5.t0 = _context5['catch'](0);

            // tar.gz node module doesn't work consistently with big files, so only
            // use it as a backup.
            console.error(_context5.t0.message);
            _context5.next = 15;
            return (0, _tar2.default)().extract(archive, dir);

          case 15:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, this, [[0, 10]]);
  }));

  return function _extractAsync(_x7, _x8, _x9) {
    return _ref5.apply(this, arguments);
  };
}();

var createNewExpAsync = exports.createNewExpAsync = function () {
  var _ref6 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee6(templateId, selectedDir, extraPackageJsonFields, opts) {
    var schema, name, root, fileExists, _ref7, starterAppPath, starterAppName, author, packageJsonFile, packageJson, data, mainJs, customMainJs, expJson, customExpJson;

    return _regenerator2.default.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            // Validate
            schema = _joi2.default.object().keys({
              name: _joi2.default.string().required()
            });

            // Should we validate that name is a valid name here?

            _context6.prev = 1;
            _context6.next = 4;
            return _joi2.default.promise.validate(opts, schema);

          case 4:
            _context6.next = 9;
            break;

          case 6:
            _context6.prev = 6;
            _context6.t0 = _context6['catch'](1);
            throw new _XDLError2.default(_ErrorCode2.default.INVALID_OPTIONS, _context6.t0.toString());

          case 9:
            name = opts.name;
            root = _path2.default.join(selectedDir, name);


            Analytics.logEvent('New Project', {
              selectedDir: selectedDir,
              name: name
            });

            fileExists = true;

            try {
              // If file doesn't exist it will throw an error.
              // Don't want to continue unless there is nothing there.
              _fs2.default.statSync(root);
            } catch (e) {
              fileExists = false;
            }

            if (!fileExists) {
              _context6.next = 16;
              break;
            }

            throw new _XDLError2.default(_ErrorCode2.default.DIRECTORY_ALREADY_EXISTS, 'That directory already exists. Please choose a different parent directory or project name.');

          case 16:
            _context6.next = 18;
            return _mkdirp2.default.promise(root);

          case 18:

            _Logger2.default.notifications.info({ code: _NotificationCode2.default.PROGRESS }, 'Downloading project files...');
            _context6.next = 21;
            return _downloadStarterAppAsync(templateId);

          case 21:
            _ref7 = _context6.sent;
            starterAppPath = _ref7.starterAppPath;
            starterAppName = _ref7.starterAppName;


            // Extract files
            _Logger2.default.notifications.info({ code: _NotificationCode2.default.PROGRESS }, 'Extracting project files...');
            _context6.next = 27;
            return _extractAsync(starterAppPath, starterAppName, root);

          case 27:

            // Update files
            _Logger2.default.notifications.info({ code: _NotificationCode2.default.PROGRESS }, 'Customizing project...');

            _context6.next = 30;
            return _UserSettings2.default.getAsync('email', null);

          case 30:
            author = _context6.sent;
            packageJsonFile = new JsonFile(_path2.default.join(root, 'package.json'));
            _context6.next = 34;
            return packageJsonFile.readAsync();

          case 34:
            packageJson = _context6.sent;

            packageJson = (0, _assign2.default)(packageJson, extraPackageJsonFields);

            data = (0, _assign2.default)(packageJson, {
              name: name,
              version: '0.0.0',
              description: "Hello Exponent!",
              author: author
            });
            _context6.next = 39;
            return packageJsonFile.writeAsync(data);

          case 39:
            _context6.next = 41;
            return _fs2.default.readFile.promise(_path2.default.join(root, 'main.js'), 'utf8');

          case 41:
            mainJs = _context6.sent;
            customMainJs = mainJs.replace(/__NAME__/g, data.name);
            _context6.next = 45;
            return _fs2.default.writeFile.promise(_path2.default.join(root, 'main.js'), customMainJs, 'utf8');

          case 45:
            _context6.next = 47;
            return _fs2.default.readFile.promise(_path2.default.join(root, 'exp.json'), 'utf8');

          case 47:
            expJson = _context6.sent;
            customExpJson = expJson.replace(/\"My New Project\"/, '"' + data.name + '"').replace(/\"my-new-project\"/, '"' + data.name + '"');
            _context6.next = 51;
            return _fs2.default.writeFile.promise(_path2.default.join(root, 'exp.json'), customExpJson, 'utf8');

          case 51:
            _context6.next = 53;
            return initGitRepo(root);

          case 53:

            _Logger2.default.notifications.info({ code: _NotificationCode2.default.PROGRESS }, 'Starting project...');

            return _context6.abrupt('return', root);

          case 55:
          case 'end':
            return _context6.stop();
        }
      }
    }, _callee6, this, [[1, 6]]);
  }));

  return function createNewExpAsync(_x10, _x11, _x12, _x13) {
    return _ref6.apply(this, arguments);
  };
}();

var initGitRepo = function () {
  var _ref8 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee7(root) {
    var insideGit;
    return _regenerator2.default.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            // let's see if we're in a git tree
            insideGit = true;
            _context7.prev = 1;
            _context7.next = 4;
            return (0, _spawnAsync2.default)('git', ['rev-parse', '--is-inside-work-tree'], { cwd: root });

          case 4:
            _Logger2.default.global.debug('New project is already inside of a git repo, skipping git init.');
            _context7.next = 10;
            break;

          case 7:
            _context7.prev = 7;
            _context7.t0 = _context7['catch'](1);

            insideGit = false;

          case 10:
            if (insideGit) {
              _context7.next = 19;
              break;
            }

            _context7.prev = 11;
            _context7.next = 14;
            return (0, _spawnAsync2.default)('git', ['init'], { cwd: root });

          case 14:
            _context7.next = 19;
            break;

          case 16:
            _context7.prev = 16;
            _context7.t1 = _context7['catch'](11);

            // no-op -- this is just a convenience and we don't care if it fails
            _Logger2.default.global.debug('Unable to initialize git repo: ' + _context7.t1.stderr);

          case 19:
          case 'end':
            return _context7.stop();
        }
      }
    }, _callee7, this, [[1, 7], [11, 16]]);
  }));

  return function initGitRepo(_x14) {
    return _ref8.apply(this, arguments);
  };
}();

var saveRecentExpRootAsync = exports.saveRecentExpRootAsync = function () {
  var _ref9 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee8(root) {
    var recentExpsJsonFile, recentExps;
    return _regenerator2.default.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            root = _path2.default.resolve(root);

            // Write the recent Exps JSON file
            recentExpsJsonFile = _UserSettings2.default.recentExpsJsonFile();
            _context8.next = 4;
            return recentExpsJsonFile.readAsync({ cantReadFileDefault: [] });

          case 4:
            recentExps = _context8.sent;

            // Filter out copies of this so we don't get dupes in this list
            recentExps = recentExps.filter(function (x) {
              return x !== root;
            });
            recentExps.unshift(root);
            _context8.next = 9;
            return recentExpsJsonFile.writeAsync(recentExps.slice(0, 100));

          case 9:
            return _context8.abrupt('return', _context8.sent);

          case 10:
          case 'end':
            return _context8.stop();
        }
      }
    }, _callee8, this);
  }));

  return function saveRecentExpRootAsync(_x15) {
    return _ref9.apply(this, arguments);
  };
}();

var expInfoAsync = exports.expInfoAsync = function () {
  var _ref10 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee9(root) {
    var pkgJson, name, description, icon, exp, pkg;
    return _regenerator2.default.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            pkgJson = packageJsonForRoot(root);
            name = void 0, description = void 0, icon = void 0;
            _context9.prev = 2;
            _context9.next = 5;
            return expJsonForRoot(root).readAsync();

          case 5:
            exp = _context9.sent;

            name = exp.name;
            description = exp.description;
            icon = exp.iconUrl;
            _context9.next = 19;
            break;

          case 11:
            _context9.prev = 11;
            _context9.t0 = _context9['catch'](2);
            _context9.next = 15;
            return pkgJson.readAsync();

          case 15:
            pkg = _context9.sent;

            name = pkg.name;
            description = pkg.description;
            icon = pkg.exp && pkg.exp.iconUrl;

          case 19:
            return _context9.abrupt('return', {
              readableRoot: makePathReadable(root),
              root: root,
              name: name,
              description: description,
              icon: icon
            });

          case 20:
          case 'end':
            return _context9.stop();
        }
      }
    }, _callee9, this, [[2, 11]]);
  }));

  return function expInfoAsync(_x16) {
    return _ref10.apply(this, arguments);
  };
}();

var expInfoSafeAsync = exports.expInfoSafeAsync = function () {
  var _ref11 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee10(root) {
    return _regenerator2.default.wrap(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            _context10.prev = 0;
            _context10.next = 3;
            return expInfoAsync(root);

          case 3:
            return _context10.abrupt('return', _context10.sent);

          case 6:
            _context10.prev = 6;
            _context10.t0 = _context10['catch'](0);
            return _context10.abrupt('return', null);

          case 9:
          case 'end':
            return _context10.stop();
        }
      }
    }, _callee10, this, [[0, 6]]);
  }));

  return function expInfoSafeAsync(_x17) {
    return _ref11.apply(this, arguments);
  };
}();

// TODO: remove / change, no longer publishInfo, this is just used for signing
var getPublishInfoAsync = exports.getPublishInfoAsync = function () {
  var _ref12 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee11(root) {
    var username, pkg, exp, name, version, remotePackageName, remoteUsername, remoteFullPackageName, bundleIdentifierIOS, packageNameAndroid;
    return _regenerator2.default.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return User.getUsernameAsync();

          case 2:
            username = _context11.sent;

            if (username) {
              _context11.next = 5;
              break;
            }

            throw new Error('Can\'t get username!');

          case 5:
            pkg = void 0;
            exp = void 0;
            _context11.prev = 7;
            _context11.next = 10;
            return packageJsonForRoot(root).readAsync();

          case 10:
            pkg = _context11.sent;
            _context11.next = 13;
            return expJsonForRoot(root).readAsync();

          case 13:
            exp = _context11.sent;
            _context11.next = 18;
            break;

          case 16:
            _context11.prev = 16;
            _context11.t0 = _context11['catch'](7);

          case 18:
            name = void 0;
            version = void 0;
            // Support legacy package.json with exp

            if (!exp && pkg && pkg.exp) {
              exp = pkg.exp;
              name = pkg.name;
              version = pkg.version;
            } else if (exp && pkg) {
              name = exp.slug;
              version = pkg.version || exp.version;
            }

            if (!(!exp || !exp.sdkVersion)) {
              _context11.next = 23;
              break;
            }

            throw new Error('sdkVersion is missing from exp.json');

          case 23:
            if (name) {
              _context11.next = 25;
              break;
            }

            throw new Error('slug field is missing from exp.json');

          case 25:
            if (version) {
              _context11.next = 27;
              break;
            }

            throw new Error('Can\'t get version of package.');

          case 27:
            remotePackageName = name;
            remoteUsername = username;
            remoteFullPackageName = '@' + remoteUsername + '/' + remotePackageName;
            bundleIdentifierIOS = exp.ios ? exp.ios.bundleIdentifier : null;
            packageNameAndroid = exp.android ? exp.android.package : null;
            return _context11.abrupt('return', {
              args: {
                username: username,
                remoteUsername: remoteUsername,
                remotePackageName: remotePackageName,
                remoteFullPackageName: remoteFullPackageName,
                bundleIdentifierIOS: bundleIdentifierIOS,
                packageNameAndroid: packageNameAndroid }
            });

          case 33:
          case 'end':
            return _context11.stop();
        }
      }
    }, _callee11, this, [[7, 16]]);
  }));

  return function getPublishInfoAsync(_x18) {
    return _ref12.apply(this, arguments);
  };
}();

var recentValidExpsAsync = exports.recentValidExpsAsync = function () {
  var _ref13 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee12() {
    var recentExpsJsonFile, recentExps, results, filteredResults;
    return _regenerator2.default.wrap(function _callee12$(_context12) {
      while (1) {
        switch (_context12.prev = _context12.next) {
          case 0:
            recentExpsJsonFile = _UserSettings2.default.recentExpsJsonFile();
            _context12.next = 3;
            return recentExpsJsonFile.readAsync({ cantReadFileDefault: [] });

          case 3:
            recentExps = _context12.sent;
            _context12.next = 6;
            return _promise2.default.all(recentExps.map(expInfoSafeAsync));

          case 6:
            results = _context12.sent;
            filteredResults = results.filter(function (result) {
              return result;
            });
            return _context12.abrupt('return', filteredResults.slice(0, 5));

          case 9:
          case 'end':
            return _context12.stop();
        }
      }
    }, _callee12, this);
  }));

  return function recentValidExpsAsync() {
    return _ref13.apply(this, arguments);
  };
}();

var sendAsync = exports.sendAsync = function () {
  var _ref14 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee13(recipient, url_) {
    var result;
    return _regenerator2.default.wrap(function _callee13$(_context13) {
      while (1) {
        switch (_context13.prev = _context13.next) {
          case 0:
            _context13.next = 2;
            return _Api2.default.callMethodAsync('send', [recipient, url_]);

          case 2:
            result = _context13.sent;
            return _context13.abrupt('return', result);

          case 4:
          case 'end':
            return _context13.stop();
        }
      }
    }, _callee13, this);
  }));

  return function sendAsync(_x19, _x20) {
    return _ref14.apply(this, arguments);
  };
}();

// TODO: figure out where these functions should live


var getProjectRandomnessAsync = exports.getProjectRandomnessAsync = function () {
  var _ref15 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee14(projectRoot) {
    var ps, randomness;
    return _regenerator2.default.wrap(function _callee14$(_context14) {
      while (1) {
        switch (_context14.prev = _context14.next) {
          case 0:
            _context14.next = 2;
            return ProjectSettings.readAsync(projectRoot);

          case 2:
            ps = _context14.sent;
            randomness = ps.urlRandomness;

            if (!randomness) {
              _context14.next = 8;
              break;
            }

            return _context14.abrupt('return', randomness);

          case 8:
            return _context14.abrupt('return', resetProjectRandomnessAsync(projectRoot));

          case 9:
          case 'end':
            return _context14.stop();
        }
      }
    }, _callee14, this);
  }));

  return function getProjectRandomnessAsync(_x21) {
    return _ref15.apply(this, arguments);
  };
}();

var resetProjectRandomnessAsync = exports.resetProjectRandomnessAsync = function () {
  var _ref16 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee15(projectRoot) {
    var randomness;
    return _regenerator2.default.wrap(function _callee15$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            randomness = UrlUtils.someRandomness();

            ProjectSettings.setAsync(projectRoot, { 'urlRandomness': randomness });
            return _context15.abrupt('return', randomness);

          case 3:
          case 'end':
            return _context15.stop();
        }
      }
    }, _callee15, this);
  }));

  return function resetProjectRandomnessAsync(_x22) {
    return _ref16.apply(this, arguments);
  };
}();

var clearXDLCacheAsync = exports.clearXDLCacheAsync = function () {
  var _ref17 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee16() {
    var dotExponentHomeDirectory;
    return _regenerator2.default.wrap(function _callee16$(_context16) {
      while (1) {
        switch (_context16.prev = _context16.next) {
          case 0:
            dotExponentHomeDirectory = _UserSettings2.default.dotExponentHomeDirectory();

            _rimraf2.default.sync(_path2.default.join(dotExponentHomeDirectory, 'ios-simulator-app-cache'));
            _rimraf2.default.sync(_path2.default.join(dotExponentHomeDirectory, 'android-apk-cache'));
            _rimraf2.default.sync(_path2.default.join(dotExponentHomeDirectory, 'starter-app-cache'));
            _Logger2.default.notifications.info('Cleared cache');

          case 5:
          case 'end':
            return _context16.stop();
        }
      }
    }, _callee16, this);
  }));

  return function clearXDLCacheAsync() {
    return _ref17.apply(this, arguments);
  };
}();

var _Convert = require('./project/Convert');

Object.defineProperty(exports, 'convertProjectAsync', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_Convert).default;
  }
});
exports.packageJsonForRoot = packageJsonForRoot;
exports.expJsonForRoot = expJsonForRoot;

require('instapromise');

var _tar = require('tar.gz');

var _tar2 = _interopRequireDefault(_tar);

var _download = require('download');

var _download2 = _interopRequireDefault(_download);

var _existsAsync = require('exists-async');

var _existsAsync2 = _interopRequireDefault(_existsAsync);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _mkdirp = require('mkdirp');

var _mkdirp2 = _interopRequireDefault(_mkdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _spawnAsync = require('@exponent/spawn-async');

var _spawnAsync2 = _interopRequireDefault(_spawnAsync);

var _joi = require('joi');

var _joi2 = _interopRequireDefault(_joi);

var _rimraf = require('rimraf');

var _rimraf2 = _interopRequireDefault(_rimraf);

var _Analytics = require('./Analytics');

var Analytics = _interopRequireWildcard(_Analytics);

var _Api = require('./Api');

var _Api2 = _interopRequireDefault(_Api);

var _Binaries = require('./Binaries');

var Binaries = _interopRequireWildcard(_Binaries);

var _ErrorCode = require('./ErrorCode');

var _ErrorCode2 = _interopRequireDefault(_ErrorCode);

var _Logger = require('./Logger');

var _Logger2 = _interopRequireDefault(_Logger);

var _NotificationCode = require('./NotificationCode');

var _NotificationCode2 = _interopRequireDefault(_NotificationCode);

var _User = require('./User');

var User = _interopRequireWildcard(_User);

var _UrlUtils = require('./UrlUtils');

var UrlUtils = _interopRequireWildcard(_UrlUtils);

var _UserSettings = require('./UserSettings');

var _UserSettings2 = _interopRequireDefault(_UserSettings);

var _XDLError = require('./XDLError');

var _XDLError2 = _interopRequireDefault(_XDLError);

var _ProjectSettings = require('./ProjectSettings');

var ProjectSettings = _interopRequireWildcard(_ProjectSettings);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var JsonFile = require('@exponent/json-file');

var ENTRY_POINT_PLATFORM_TEMPLATE_STRING = exports.ENTRY_POINT_PLATFORM_TEMPLATE_STRING = 'PLATFORM_GOES_HERE';

function packageJsonForRoot(root) {
  return new JsonFile(_path2.default.join(root, 'package.json'));
}

function expJsonForRoot(root) {
  return new JsonFile(_path2.default.join(root, 'exp.json'), { json5: true });
}

function _doesFileExist(file) {
  try {
    return _fs2.default.statSync(file).isFile();
  } catch (e) {
    return false;
  }
}

function _getPlatformSpecificEntryPoint(entryPoint, platform) {
  if (entryPoint.endsWith('.js')) {
    return entryPoint.substring(0, entryPoint.length - 3) + '.' + platform + '.js';
  } else {
    return entryPoint + '.' + platform + '.js';
  }
}

function _starterAppCacheDirectory() {
  var dotExponentHomeDirectory = _UserSettings2.default.dotExponentHomeDirectory();
  var dir = _path2.default.join(dotExponentHomeDirectory, 'starter-app-cache');
  _mkdirp2.default.sync(dir);
  return dir;
}

function getHomeDir() {
  return process.env[process.platform === 'win32' ? 'USERPROFILE' : 'HOME'] || '';
}

function makePathReadable(pth) {
  var homedir = getHomeDir();
  if (pth.substr(0, homedir.length) === homedir) {
    return '~' + pth.substr(homedir.length);
  } else {
    return pth;
  }
}
//# sourceMappingURL=__sourcemaps__/Exp.js.map
