'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.facebookReactNativeVersionToExponentVersionAsync = exports.facebookReactNativeVersionsAsync = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _from = require('babel-runtime/core-js/array/from');

var _from2 = _interopRequireDefault(_from);

var _set = require('babel-runtime/core-js/set');

var _set2 = _interopRequireDefault(_set);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var facebookReactNativeVersionsAsync = exports.facebookReactNativeVersionsAsync = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
    var sdkVersions, facebookReactNativeVersions;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _Api2.default.sdkVersionsAsync();

          case 2:
            sdkVersions = _context.sent;
            facebookReactNativeVersions = new _set2.default();


            _lodash2.default.forEach(sdkVersions, function (value) {
              if (value.facebookReactNativeVersion) {
                facebookReactNativeVersions.add(value.facebookReactNativeVersion);
              }
            });

            return _context.abrupt('return', (0, _from2.default)(facebookReactNativeVersions));

          case 6:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function facebookReactNativeVersionsAsync() {
    return _ref.apply(this, arguments);
  };
}();

var facebookReactNativeVersionToExponentVersionAsync = exports.facebookReactNativeVersionToExponentVersionAsync = function () {
  var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(facebookReactNativeVersion) {
    var sdkVersions, currentSdkVersion;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (_semver2.default.valid(facebookReactNativeVersion)) {
              _context2.next = 2;
              break;
            }

            throw new _XDLError2.default(_ErrorCode2.default.INVALID_VERSION, facebookReactNativeVersion + ' is not a valid version. Must be in the form of x.y.z');

          case 2:
            _context2.next = 4;
            return _Api2.default.sdkVersionsAsync();

          case 4:
            sdkVersions = _context2.sent;
            currentSdkVersion = null;


            _lodash2.default.forEach(sdkVersions, function (value, key) {
              if (_semver2.default.major(value.facebookReactNativeVersion) === _semver2.default.major(facebookReactNativeVersion) && _semver2.default.minor(value.facebookReactNativeVersion) === _semver2.default.minor(facebookReactNativeVersion) && (!currentSdkVersion || _semver2.default.gt(key, currentSdkVersion))) {
                currentSdkVersion = key;
              }
            });

            return _context2.abrupt('return', currentSdkVersion);

          case 8:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function facebookReactNativeVersionToExponentVersionAsync(_x) {
    return _ref2.apply(this, arguments);
  };
}();

exports.gteSdkVersion = gteSdkVersion;
exports.parseSdkVersionFromTag = parseSdkVersionFromTag;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _semver = require('semver');

var _semver2 = _interopRequireDefault(_semver);

var _Api = require('./Api');

var _Api2 = _interopRequireDefault(_Api);

var _ErrorCode = require('./ErrorCode');

var _ErrorCode2 = _interopRequireDefault(_ErrorCode);

var _XDLError = require('./XDLError');

var _XDLError2 = _interopRequireDefault(_XDLError);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function gteSdkVersion(expJson, sdkVersion) {
  if (!expJson.sdkVersion) {
    return false;
  }

  if (expJson.sdkVersion === 'UNVERSIONED') {
    return true;
  }

  try {
    return _semver2.default.gte(expJson.sdkVersion, sdkVersion);
  } catch (e) {
    throw new _XDLError2.default(_ErrorCode2.default.INVALID_VERSION, expJson.sdkVersion + ' is not a valid version. Must be in the form of x.y.z');
  }
}

function parseSdkVersionFromTag(tag) {
  if (tag.startsWith('sdk-')) {
    return tag.substring(4);
  }

  return tag;
}
//# sourceMappingURL=__sourcemaps__/Versions.js.map
