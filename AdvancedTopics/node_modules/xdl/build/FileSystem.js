'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.openProjectInEditorAsync = exports.openConsoleAsync = exports.openFolderAsync = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var openFolderAsync = exports.openFolderAsync = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(dir) {
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!(process.platform === 'darwin')) {
              _context.next = 6;
              break;
            }

            _context.next = 3;
            return osascript.openFinderToFolderAsync(dir);

          case 3:
            return _context.abrupt('return', _context.sent);

          case 6:
            if (!(process.platform === 'win32')) {
              _context.next = 10;
              break;
            }

            _context.next = 9;
            return (0, _spawnAsync2.default)('explorer', [dir]);

          case 9:
            return _context.abrupt('return', _context.sent);

          case 10:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function openFolderAsync(_x) {
    return _ref.apply(this, arguments);
  };
}();

var openConsoleAsync = exports.openConsoleAsync = function () {
  var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(dir) {
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!(process.platform === 'darwin')) {
              _context2.next = 6;
              break;
            }

            _context2.next = 3;
            return osascript.openFolderInTerminalAppAsync(dir);

          case 3:
            return _context2.abrupt('return', _context2.sent);

          case 6:
            if (process.platform === 'win32') {
              _child_process2.default.exec('start cmd /K "cd /d ' + dir + '"');
            }

          case 7:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function openConsoleAsync(_x2) {
    return _ref2.apply(this, arguments);
  };
}();

var openProjectInEditorAsync = exports.openProjectInEditorAsync = function () {
  var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(dir) {
    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (!(process.platform === 'darwin')) {
              _context3.next = 8;
              break;
            }

            _context3.next = 3;
            return Binaries.sourceBashLoginScriptsAsync();

          case 3:
            _context3.next = 5;
            return osascript.openInEditorAsync(dir, process.env.EXPONENT_EDITOR);

          case 5:
            return _context3.abrupt('return', _context3.sent);

          case 8:
            if (!(process.platform === 'win32')) {
              _context3.next = 10;
              break;
            }

            throw new _XDLError2.default(_ErrorCode2.default.PLATFORM_NOT_SUPPORTED, 'openProjectInEditorAsync not supported');

          case 10:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  return function openProjectInEditorAsync(_x3) {
    return _ref3.apply(this, arguments);
  };
}();

exports.openFolderName = openFolderName;
exports.openConsoleName = openConsoleName;

var _child_process = require('child_process');

var _child_process2 = _interopRequireDefault(_child_process);

var _spawnAsync = require('@exponent/spawn-async');

var _spawnAsync2 = _interopRequireDefault(_spawnAsync);

var _Binaries = require('./Binaries');

var Binaries = _interopRequireWildcard(_Binaries);

var _ErrorCode = require('./ErrorCode');

var _ErrorCode2 = _interopRequireDefault(_ErrorCode);

var _XDLError = require('./XDLError');

var _XDLError2 = _interopRequireDefault(_XDLError);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var osascript = void 0;

if (process.platform === 'darwin') {
  osascript = require('@exponent/osascript');
}

function openFolderName() {
  if (process.platform === 'darwin') {
    return 'Show in Finder';
  } else if (process.platform === 'win32') {
    return 'Show in File Explorer';
  }
}

function openConsoleName() {
  if (process.platform === 'darwin') {
    return 'Open in Terminal';
  } else if (process.platform === 'win32') {
    return 'Open in Cmd';
  }
}
//# sourceMappingURL=__sourcemaps__/FileSystem.js.map
