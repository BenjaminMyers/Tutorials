'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.constructUrlAsync = exports.constructBundleQueryParamsAsync = exports.constructDebuggerHostAsync = exports.constructAssetsUrlAsync = exports.constructPublishUrlAsync = exports.constructUrlWithExtensionAsync = exports.constructManifestUrlAsync = exports.constructBundleUrlAsync = undefined;

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var constructBundleUrlAsync = exports.constructBundleUrlAsync = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(projectRoot, opts) {
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt('return', constructUrlAsync(projectRoot, opts, true));

          case 1:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function constructBundleUrlAsync(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

var constructManifestUrlAsync = exports.constructManifestUrlAsync = function () {
  var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(projectRoot, opts) {
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt('return', constructUrlAsync(projectRoot, opts, false));

          case 1:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function constructManifestUrlAsync(_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();

var constructUrlWithExtensionAsync = exports.constructUrlWithExtensionAsync = function () {
  var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(projectRoot, entryPoint, ext) {
    var bundleUrl, mainModulePath, queryParams;
    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return constructBundleUrlAsync(projectRoot, {
              hostType: 'localhost',
              urlType: 'http'
            });

          case 2:
            bundleUrl = _context3.sent;
            mainModulePath = guessMainModulePath(entryPoint);

            bundleUrl += '/' + mainModulePath + '.' + ext;

            _context3.next = 7;
            return constructBundleQueryParamsAsync(projectRoot, {
              dev: false,
              minify: true
            });

          case 7:
            queryParams = _context3.sent;
            return _context3.abrupt('return', bundleUrl + '?' + queryParams);

          case 9:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  return function constructUrlWithExtensionAsync(_x5, _x6, _x7) {
    return _ref3.apply(this, arguments);
  };
}();

var constructPublishUrlAsync = exports.constructPublishUrlAsync = function () {
  var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4(projectRoot, entryPoint) {
    return _regenerator2.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return constructUrlWithExtensionAsync(projectRoot, entryPoint, 'bundle');

          case 2:
            return _context4.abrupt('return', _context4.sent);

          case 3:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, this);
  }));

  return function constructPublishUrlAsync(_x8, _x9) {
    return _ref4.apply(this, arguments);
  };
}();

var constructAssetsUrlAsync = exports.constructAssetsUrlAsync = function () {
  var _ref5 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5(projectRoot, entryPoint) {
    return _regenerator2.default.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return constructUrlWithExtensionAsync(projectRoot, entryPoint, 'assets');

          case 2:
            return _context5.abrupt('return', _context5.sent);

          case 3:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, this);
  }));

  return function constructAssetsUrlAsync(_x10, _x11) {
    return _ref5.apply(this, arguments);
  };
}();

var constructDebuggerHostAsync = exports.constructDebuggerHostAsync = function () {
  var _ref6 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee6(projectRoot) {
    return _regenerator2.default.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            return _context6.abrupt('return', constructUrlAsync(projectRoot, {
              urlType: 'no-protocol'
            }, true));

          case 1:
          case 'end':
            return _context6.stop();
        }
      }
    }, _callee6, this);
  }));

  return function constructDebuggerHostAsync(_x12) {
    return _ref6.apply(this, arguments);
  };
}();

var constructBundleQueryParamsAsync = exports.constructBundleQueryParamsAsync = function () {
  var _ref7 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee7(projectRoot, opts) {
    var queryParams, pluginModule, exp, supportsAssetPlugins;
    return _regenerator2.default.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            queryParams = 'dev=' + encodeURIComponent(!!opts.dev);


            if (opts.hasOwnProperty('strict')) {
              queryParams += '&strict=' + encodeURIComponent(!!opts.strict);
            }

            if (opts.hasOwnProperty('minify')) {
              queryParams += '&minify=' + encodeURIComponent(!!opts.minify);
            }

            queryParams += '&hot=false';

            pluginModule = 'exponent/tools/hashAssetFiles';

            queryParams += '&assetPlugin=' + pluginModule;

            // Only sdk-10.1.0+ supports the assetPlugin parameter. We use only the
            // major version in the sdkVersion field, so check for 11.0.0 to be sure.
            _context7.next = 8;
            return Exp.expJsonForRoot(projectRoot).readAsync();

          case 8:
            exp = _context7.sent;
            supportsAssetPlugins = Versions.gteSdkVersion(exp, '11.0.0');

            if (!supportsAssetPlugins) {
              queryParams += '&includeAssetFileHashes=true';
            }

            return _context7.abrupt('return', queryParams);

          case 12:
          case 'end':
            return _context7.stop();
        }
      }
    }, _callee7, this);
  }));

  return function constructBundleQueryParamsAsync(_x13, _x14) {
    return _ref7.apply(this, arguments);
  };
}();

var constructUrlAsync = exports.constructUrlAsync = function () {
  var _ref8 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee8(projectRoot, opts, isPackager) {
    var schema, defaultOpts, packagerInfo, protocol, hostname, port, ngrokUrl, pnu, url_;
    return _regenerator2.default.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            if (!opts) {
              _context8.next = 10;
              break;
            }

            schema = _joi2.default.object().keys({
              urlType: _joi2.default.any().valid('exp', 'http', 'redirect', 'no-protocol'),
              lanType: _joi2.default.any().valid('ip', 'hostname'),
              hostType: _joi2.default.any().valid('localhost', 'lan', 'tunnel'),
              dev: _joi2.default.boolean(),
              strict: _joi2.default.boolean(),
              minify: _joi2.default.boolean(),
              urlRandomness: _joi2.default.string()
            });
            _context8.prev = 2;
            _context8.next = 5;
            return _joi2.default.promise.validate(opts, schema);

          case 5:
            _context8.next = 10;
            break;

          case 7:
            _context8.prev = 7;
            _context8.t0 = _context8['catch'](2);
            throw new _XDLError2.default(_ErrorCode2.default.INVALID_OPTIONS, _context8.t0.toString());

          case 10:
            _context8.next = 12;
            return ProjectSettings.getPackagerOptsAsync(projectRoot);

          case 12:
            defaultOpts = _context8.sent;

            if (!opts) {
              opts = defaultOpts;
            } else {
              opts = (0, _assign2.default)(defaultOpts, opts);
            }

            _context8.next = 16;
            return ProjectSettings.readPackagerInfoAsync(projectRoot);

          case 16:
            packagerInfo = _context8.sent;
            protocol = 'exp';

            if (opts.urlType === 'http') {
              protocol = 'http';
            } else if (opts.urlType === 'no-protocol') {
              protocol = null;
            }

            hostname = void 0;
            port = void 0;

            if (!(opts.hostType === 'localhost')) {
              _context8.next = 26;
              break;
            }

            hostname = 'localhost';
            port = isPackager ? packagerInfo.packagerPort : packagerInfo.exponentServerPort;
            _context8.next = 37;
            break;

          case 26:
            if (!(opts.hostType === 'lan')) {
              _context8.next = 31;
              break;
            }

            if (opts.lanType === 'ip') {
              hostname = _ip2.default.address();
            } else {
              // Some old versions of OSX work with hostname but not local ip address.
              hostname = _os2.default.hostname();
            }
            port = isPackager ? packagerInfo.packagerPort : packagerInfo.exponentServerPort;
            _context8.next = 37;
            break;

          case 31:
            ngrokUrl = isPackager ? packagerInfo.packagerNgrokUrl : packagerInfo.exponentServerNgrokUrl;

            if (ngrokUrl) {
              _context8.next = 34;
              break;
            }

            throw new Error("Can't get tunnel URL because ngrok not started yet");

          case 34:
            pnu = _url2.default.parse(ngrokUrl);

            hostname = pnu.hostname;
            port = pnu.port;

          case 37:
            url_ = '';

            if (protocol) {
              url_ += protocol + '://';
            }

            if (hostname) {
              _context8.next = 41;
              break;
            }

            throw new Error('Hostname cannot be inferred.');

          case 41:

            url_ += hostname;

            if (port) {
              url_ += ':' + port;
            } else {
              url_ += ':80'; // DUMB BUG FIX!!!! Old RN needs a port number
            }

            if (!(opts.urlType === 'redirect')) {
              _context8.next = 45;
              break;
            }

            return _context8.abrupt('return', 'https://exp.host/--/to-exp/' + encodeURIComponent(url_));

          case 45:
            return _context8.abrupt('return', url_);

          case 46:
          case 'end':
            return _context8.stop();
        }
      }
    }, _callee8, this, [[2, 7]]);
  }));

  return function constructUrlAsync(_x15, _x16, _x17) {
    return _ref8.apply(this, arguments);
  };
}();

exports.guessMainModulePath = guessMainModulePath;
exports.randomIdentifier = randomIdentifier;
exports.sevenDigitIdentifier = sevenDigitIdentifier;
exports.randomIdentifierForUser = randomIdentifierForUser;
exports.someRandomness = someRandomness;
exports.domainify = domainify;
exports.getPlatformSpecificBundleUrl = getPlatformSpecificBundleUrl;

require('instapromise');

var _ip = require('ip');

var _ip2 = _interopRequireDefault(_ip);

var _joi = require('joi');

var _joi2 = _interopRequireDefault(_joi);

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _ErrorCode = require('./ErrorCode');

var _ErrorCode2 = _interopRequireDefault(_ErrorCode);

var _Exp = require('./Exp');

var Exp = _interopRequireWildcard(_Exp);

var _ProjectSettings = require('./ProjectSettings');

var ProjectSettings = _interopRequireWildcard(_ProjectSettings);

var _Versions = require('./Versions');

var Versions = _interopRequireWildcard(_Versions);

var _XDLError = require('./XDLError');

var _XDLError2 = _interopRequireDefault(_XDLError);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function guessMainModulePath(entryPoint) {
  return entryPoint.replace(/\.js$/, '');
}

function randomIdentifier() {
  var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 6;

  var alphabet = '23456789qwertyuipasdfghjkzxcvbnm';
  var result = '';
  for (var i = 0; i < length; i++) {
    var j = Math.floor(Math.random() * alphabet.length);
    var c = alphabet.substr(j, 1);
    result += c;
  }
  return result;
}

function sevenDigitIdentifier() {
  return randomIdentifier(3) + '-' + randomIdentifier(4);
}

function randomIdentifierForUser(username) {
  return username + '-' + randomIdentifier(3) + '-' + randomIdentifier(2);
}

function someRandomness() {
  return [randomIdentifier(2), randomIdentifier(3)].join('-');
}

function domainify(s) {
  return s.toLowerCase().replace(/[^a-z0-9-]/g, '-').replace(/^-+/, '').replace(/-+$/, '');
}

function getPlatformSpecificBundleUrl(url, platform) {
  if (url.includes(Exp.ENTRY_POINT_PLATFORM_TEMPLATE_STRING)) {
    return url.replace(Exp.ENTRY_POINT_PLATFORM_TEMPLATE_STRING, platform);
  } else {
    return url;
  }
}
//# sourceMappingURL=__sourcemaps__/UrlUtils.js.map
