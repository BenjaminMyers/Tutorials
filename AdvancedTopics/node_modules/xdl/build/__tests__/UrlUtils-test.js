'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

jest.mock('analytics-node');
jest.mock('diskusage');
jest.mock('fs');
jest.mock('../Env');

var UrlUtils = require('../UrlUtils');
var fs = require('fs');

var projectPath = '/project';
fs.__setMockFilesystem({
  'project': {
    '.exponent': {
      'settings.json': (0, _stringify2.default)({
        "hostType": "tunnel",
        "dev": true,
        "strict": false,
        "minify": false,
        "urlType": "exp",
        "urlRandomness": "ab-cde"
      }),
      'packager-info.json': (0, _stringify2.default)({
        "packagerPort": 19001,
        "exponentServerPort": 19000,
        "exponentServerNgrokUrl": "http://ab-cde.jesse.test-project.exp.direct",
        "packagerNgrokUrl": "https://packager.ab-cde.jesse.test-project.exp.direct"
      })
    },
    'exp.json': (0, _stringify2.default)({
      sdkVersion: '11.0.0'
    })
  }
});

describe('constructBundleUrlAsync', function () {
  it('returns the correct default packager url', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
    var packagerUrl;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return UrlUtils.constructBundleUrlAsync(projectPath, {});

          case 2:
            packagerUrl = _context.sent;

            expect(packagerUrl).toEqual('exp://packager.ab-cde.jesse.test-project.exp.direct:80');

          case 4:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  })));

  it('returns the correct http packager url', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2() {
    var packagerUrl;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return UrlUtils.constructBundleUrlAsync(projectPath, {
              urlType: 'http'
            });

          case 2:
            packagerUrl = _context2.sent;

            expect(packagerUrl).toEqual('http://packager.ab-cde.jesse.test-project.exp.direct:80');

          case 4:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined);
  })));

  it('returns the correct localhost packager url', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3() {
    var packagerUrl;
    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return UrlUtils.constructBundleUrlAsync(projectPath, {
              hostType: 'localhost'
            });

          case 2:
            packagerUrl = _context3.sent;

            expect(packagerUrl).toEqual('exp://localhost:19001');

          case 4:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, undefined);
  })));
});

describe('constructManifestUrlAsync', function () {
  it('returns the correct default manifest url', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4() {
    var packagerUrl;
    return _regenerator2.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return UrlUtils.constructManifestUrlAsync(projectPath, {});

          case 2:
            packagerUrl = _context4.sent;

            expect(packagerUrl).toEqual('exp://ab-cde.jesse.test-project.exp.direct:80');

          case 4:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, undefined);
  })));

  it('returns the correct http manifest url', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5() {
    var packagerUrl;
    return _regenerator2.default.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return UrlUtils.constructManifestUrlAsync(projectPath, {
              urlType: 'http'
            });

          case 2:
            packagerUrl = _context5.sent;

            expect(packagerUrl).toEqual('http://ab-cde.jesse.test-project.exp.direct:80');

          case 4:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, undefined);
  })));

  it('returns the correct localhost manifest url', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee6() {
    var packagerUrl;
    return _regenerator2.default.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return UrlUtils.constructManifestUrlAsync(projectPath, {
              hostType: 'localhost'
            });

          case 2:
            packagerUrl = _context6.sent;

            expect(packagerUrl).toEqual('exp://localhost:19000');

          case 4:
          case 'end':
            return _context6.stop();
        }
      }
    }, _callee6, undefined);
  })));
});

describe('constructPublishUrlAsync', function () {
  it('returns the correct publish url', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee7() {
    var packagerUrl;
    return _regenerator2.default.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            _context7.next = 2;
            return UrlUtils.constructPublishUrlAsync(projectPath, 'test-project-entry-point');

          case 2:
            packagerUrl = _context7.sent;

            expect(packagerUrl).toEqual('http://localhost:19001/test-project-entry-point.bundle?dev=false&minify=true&hot=false&assetPlugin=exponent/tools/hashAssetFiles');

          case 4:
          case 'end':
            return _context7.stop();
        }
      }
    }, _callee7, undefined);
  })));
});
//# sourceMappingURL=../__sourcemaps__/__tests__/UrlUtils-test.js.map
