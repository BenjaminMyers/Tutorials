'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

jest.mock('analytics-node');
jest.mock('fs');
jest.mock('../Env');
jest.mock('request');

var request = require('request');
var Versions = require('../Versions');

request.__setMockResponse({
  body: {
    "iosVersion": "1.6.0",
    "androidVersion": "1.6.0",
    "sdkVersions": {
      "5.0.0": {
        "exponentReactNativeTag": "sdk-5.0.0",
        "facebookReactNativeVersion": "0.24.0"
      },
      "6.0.0": {
        "exponentReactNativeTag": "sdk-6.0.0",
        "facebookReactNativeVersion": "0.27.0"
      },
      "7.0.0": {
        "exponentReactNativeTag": "sdk-7.0.0",
        "facebookReactNativeVersion": "0.27.0"
      }
    }
  }
});

describe('facebookReactNativeVersionsAsync', function () {
  it('checks list of versions is correct', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
    var facebookReactNativeVersions;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return Versions.facebookReactNativeVersionsAsync();

          case 2:
            facebookReactNativeVersions = _context.sent;

            expect(facebookReactNativeVersions).toEqual(['0.24.0', '0.27.0']);

          case 4:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  })));
});

describe('facebookReactNativeVersionToExponentVersionAsync', function () {
  it('returns exponent version when available', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2() {
    var exponentVersion;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return Versions.facebookReactNativeVersionToExponentVersionAsync('0.24.0');

          case 2:
            exponentVersion = _context2.sent;

            expect(exponentVersion).toEqual('5.0.0');

          case 4:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined);
  })));

  it('returns newest exponent version when multiple versions exist', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3() {
    var exponentVersion;
    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return Versions.facebookReactNativeVersionToExponentVersionAsync('0.27.0');

          case 2:
            exponentVersion = _context3.sent;

            expect(exponentVersion).toEqual('7.0.0');

          case 4:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, undefined);
  })));

  it('ignores patch version', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4() {
    var exponentVersion;
    return _regenerator2.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return Versions.facebookReactNativeVersionToExponentVersionAsync('0.27.3');

          case 2:
            exponentVersion = _context4.sent;

            expect(exponentVersion).toEqual('7.0.0');

          case 4:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, undefined);
  })));

  it('returns null when no matching version exists', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5() {
    var exponentVersion;
    return _regenerator2.default.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return Versions.facebookReactNativeVersionToExponentVersionAsync('0.23.0');

          case 2:
            exponentVersion = _context5.sent;

            expect(exponentVersion).toEqual(null);

          case 4:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, undefined);
  })));
});
//# sourceMappingURL=../__sourcemaps__/__tests__/Versions-test.js.map
