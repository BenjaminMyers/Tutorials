'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

jest.mock('analytics-node');
jest.mock('fs');
jest.mock('../Env');
jest.mock('request');

jasmine.DEFAULT_TIMEOUT_INTERVAL = 60000;

describe('loginAsync', function () {
  it('calls login Api and stores the username', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
    var fs, request, User, configFile;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            fs = require('fs');
            request = require('request');
            User = require('../User');


            request.__setMockResponse({
              body: {
                err: null,
                user: {
                  type: 'client',
                  username: 'jesse'
                }
              }
            });

            _context.next = 6;
            return User.loginAsync({
              username: 'jesse',
              password: 'kicho0'
            });

          case 6:

            // Make sure Api request is correct
            expect(request.mock.calls[0][0].url).toEqual('https://exp.host/--/api/adduser/%7B%22username%22%3A%22jesse%22%2C%22type%22%3A%22client%22%2C%22hashedPassword%22%3A%22eddd4a018e0b4d02230d991284620fd7%22%7D');

            // Make sure the correct information was written to disk
            configFile = JSON.parse(fs.__getMockFilesystem()['home']['.exponent']['exponent.json']);

            expect(configFile.accessToken).toBeDefined();
            expect(configFile.type).toEqual('client');
            expect(configFile.username).toEqual('jesse');

          case 11:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  })));
});

describe('logoutAsync', function () {
  it('calls logout Api and cleans the username', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2() {
    var fs, request, User, configFile;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            fs = require('fs');
            request = require('request');
            User = require('../User');


            request.__setMockResponse({
              body: {
                err: null
              }
            });

            fs.__addLoggedInUser();

            _context2.next = 7;
            return User.logoutAsync();

          case 7:

            expect(request.mock.calls[0][0].url).toEqual('https://exp.host/--/api/logout/%5B%5D');

            configFile = JSON.parse(fs.__getMockFilesystem()['home']['.exponent']['exponent.json']);

            expect(configFile.username).toBeUndefined();

          case 10:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined);
  })));
});
//# sourceMappingURL=../__sourcemaps__/__tests__/User-test.js.map
