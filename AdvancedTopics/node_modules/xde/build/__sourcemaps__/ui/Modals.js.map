{"version":3,"sources":["ui/Modals.js"],"names":["Modals","props","currentModal","el","NEW_PROJECT","onCloseModal","onSelectProject","Styles","modalOverlay","modalContent","Component","propTypes","string","func","isRequired","position","top","left","right","bottom","backgroundColor","display","alignItems","justifyContent","background","colorBackground","overflow","borderRadius","outline"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAEA;;AAIA;;;;AACA;;;;;;IAEqBA,M;;;;;;;;;;6BAOV;AACP,UAAI,CAAC,KAAKC,KAAL,CAAWC,YAAhB,EAA8B;AAC5B,eAAO,IAAP;AACD;;AAED,UAAIC,KAAK,IAAT;AACA,cAAQ,KAAKF,KAAL,CAAWC,YAAnB;AACE,aAAK,qBAAUE,WAAf;AACE,iBACE;AACE,qBAAS,KAAKH,KAAL,CAAWI,YADtB;AAEE,6BAAiB,KAAKJ,KAAL,CAAWK;AAF9B,YADF;AAFJ;;AAUA,UAAIH,EAAJ,EAAQ;AACN,eACE;AAAA;AAAA,YAAK,OAAOI,OAAOC,YAAnB;AACE;AAAA;AAAA,cAAK,OAAOD,OAAOE,YAAnB;AACGN;AADH;AADF,SADF;AAOD,OARD,MAQO;AACL,eAAO,IAAP;AACD;AACF;;;EAlCiC,gBAAMO,S,UACjCC,S,GAAY;AACjBT,gBAAc,iBAAUU,MADP;AAEjBN,mBAAiB,iBAAUO,IAAV,CAAeC,UAFf;AAGjBT,gBAAc,iBAAUQ,IAAV,CAAeC;AAHZ,C;kBADAd,M;;;AAqCrB,IAAIO,SAAS;AACXC,gBAAc;AACZO,cAAU,OADE;AAEZC,SAAK,CAFO;AAGZC,UAAM,CAHM;AAIZC,WAAO,CAJK;AAKZC,YAAQ,CALI;AAMZC,qBAAiB,oBANL;AAOZC,aAAS,MAPG;AAQZC,gBAAY,QARA;AASZC,oBAAgB;AATJ,GADH;;AAaXd,gBAAc;AACZe,gBAAY,yBAAeC,eADf;AAEZC,cAAU,MAFE;AAGZC,kBAAc,KAHF;AAIZC,aAAS;AAJG;AAbH,CAAb","file":"ui/Modals.js","sourcesContent":["import React, {PropTypes} from 'react';\n\nimport {\n  ModalEnum,\n} from './Constants';\n\nimport NewProjectModal from './NewProjectModal';\nimport StyleConstants from './StyleConstants';\n\nexport default class Modals extends React.Component {\n  static propTypes = {\n    currentModal: PropTypes.string,\n    onSelectProject: PropTypes.func.isRequired,\n    onCloseModal: PropTypes.func.isRequired,\n  };\n\n  render() {\n    if (!this.props.currentModal) {\n      return null;\n    }\n\n    let el = null;\n    switch (this.props.currentModal) {\n      case ModalEnum.NEW_PROJECT:\n        return (\n          <NewProjectModal\n            onClose={this.props.onCloseModal}\n            onSelectProject={this.props.onSelectProject}\n          />\n        );\n    }\n\n    if (el) {\n      return (\n        <div style={Styles.modalOverlay}>\n          <div style={Styles.modalContent}>\n            {el}\n          </div>\n        </div>\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\nlet Styles = {\n  modalOverlay: {\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: 'rgba(0, 0, 0, 0.8)',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n\n  modalContent: {\n    background: StyleConstants.colorBackground,\n    overflow: 'auto',\n    borderRadius: '2px',\n    outline: 'none',\n  },\n};\n"],"sourceRoot":"/source/"}