{"version":3,"sources":["ui/NewVersionAvailable.js"],"names":["app","autoUpdater","NOTIFICATION_TIMEOUT_MS","NewVersionAvailable","Component","constructor","props","context","state","isVisible","isChecking","isDownloading","errorMessage","newVersion","quitAndUpdate","render","WORKING_ON_XDE_UPDATES","AUTO_UPDATES_SUPPORTED","process","platform","env","XDE_NPM_START","styles","hidden","text","clickListener","buttonStyle","_checkForUpdate","_quitAndUpdate","componentDidMount","on","_handleUpdateError","_handleCheckingForUpdate","_handleUpdateAvailable","_handleUpdateNotAvailable","_handleUpdateDownloaded","version","getVersion","setFeedURL","arch","componentWillUnmount","removeAllListeners","checkForUpdates","console","error","event","message","setState","setTimeout","releaseNotes","releaseName","releaseDate","updateUrl","create","display"],"mappings":"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","file":"../../ui/NewVersionAvailable.js","sourcesContent":["import { StyleSheet, css } from 'aphrodite';\nimport React from 'react';\n\nimport autobind from 'autobind-decorator';\nimport { remote } from 'electron';\nimport os from 'os';\n\nimport Notification from './Notification';\n\nconst {\n  app,\n  autoUpdater,\n} = remote;\n\nconst NOTIFICATION_TIMEOUT_MS = 5000;\n\nexport default class NewVersionAvailable extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      isVisible: false,\n      isChecking: false,\n      isDownloading: false,\n      errorMessage: null,\n      newVersion: null,\n      quitAndUpdate: null,\n    };\n  }\n\n  render() {\n    // N.B. If you are working on the UI for XDE updates, change this to `true` or else\n    // that UI will never show up when running `npm start`\n    let WORKING_ON_XDE_UPDATES = false;\n    let AUTO_UPDATES_SUPPORTED = process.platform !== 'linux';\n\n    // Should we use NODE_ENV instead of XDE_NPM_START?\n    if ((!this.state.isVisible) || (!WORKING_ON_XDE_UPDATES && process.env.XDE_NPM_START) || !AUTO_UPDATES_SUPPORTED) {\n      return <div className={css(styles.hidden)} />;\n    }\n\n    let { isChecking, isDownloading, errorMessage, newVersion } = this.state;\n    let text;\n    let clickListener;\n    let buttonStyle = 'info';\n    if (errorMessage != null) {\n      text = `An error occurred while checking for a new version of XDE: ${errorMessage}. Click to retry.`;\n      clickListener = this._checkForUpdate;\n      buttonStyle = 'danger';\n    } else if (newVersion != null) {\n      text = `A new version of XDE is available. Click to restart and install XDE ${newVersion}.`;\n      clickListener = this._quitAndUpdate;\n    } else if (isDownloading) {\n      text = 'A new version of XDE is available. You can keep working while it is downloading.';\n    } else if (isChecking) {\n      text = 'Checking if there is a new version of XDE...';\n    } else {\n      text = 'Click to check for a new version of XDE.';\n      clickListener = this._checkForUpdate;\n    }\n\n    return (\n      <Notification\n        onClick={clickListener}\n        type={buttonStyle === 'danger' ? 'error' : 'success'}\n        message={text}\n      />\n    );\n  }\n\n  componentDidMount() {\n    autoUpdater.on('error', this._handleUpdateError);\n    autoUpdater.on('checking-for-update', this._handleCheckingForUpdate);\n    autoUpdater.on('update-available', this._handleUpdateAvailable);\n    autoUpdater.on('update-not-available', this._handleUpdateNotAvailable);\n    autoUpdater.on('update-downloaded', this._handleUpdateDownloaded);\n\n    let version = app.getVersion();\n    autoUpdater.setFeedURL(\n      `https://xde-updates.exponentjs.com/update/${os.platform()}_${os.arch()}/${version}`\n    );\n    this._checkForUpdate();\n  }\n\n  componentWillUnmount() {\n    // We need to call removeAllListeners instead of removeListener because\n    // the latter doesn't work over Electron's IPC channel\n    autoUpdater.removeAllListeners('error');\n    autoUpdater.removeAllListeners('checking-for-update');\n    autoUpdater.removeAllListeners('update-available');\n    autoUpdater.removeAllListeners('update-not-available');\n    autoUpdater.removeAllListeners('update-downloaded');\n  }\n\n  @autobind\n  _checkForUpdate() {\n    autoUpdater.checkForUpdates();\n  }\n\n  @autobind\n  _quitAndUpdate() {\n    if (this.state.quitAndUpdate) {\n      this.state.quitAndUpdate();\n    } else {\n      console.error('Do not have a function to quit and update XDE');\n    }\n  }\n\n  @autobind\n  _handleUpdateError(event, message) {\n    this.setState({\n      isVisible: true,\n      errorMessage: message,\n      // Not strictly true that an error means we've stopped checking for\n      // updates or downloading. It depends on the error.\n      isChecking: false,\n      isDownloading: false,\n    });\n\n    setTimeout(() => {\n      this.setState({isVisible: false});\n    }, NOTIFICATION_TIMEOUT_MS);\n  }\n\n  @autobind\n  _handleCheckingForUpdate() {\n    this.setState({\n      isChecking: true,\n      isDownloading: false,\n      errorMessage: null,\n    });\n  }\n\n  @autobind\n  _handleUpdateAvailable() {\n    this.setState({\n      isChecking: false,\n      isDownloading: true,\n      errorMessage: null,\n    });\n  }\n\n  @autobind\n  _handleUpdateNotAvailable() {\n    this.setState({\n      isChecking: false,\n      isDownloading: false,\n      errorMessage: null,\n    });\n  }\n\n  @autobind\n  _handleUpdateDownloaded(event, releaseNotes, releaseName, releaseDate, updateUrl, quitAndUpdate) {\n    this.setState({\n      isVisible: true,\n      isChecking: false,\n      isDownloading: false,\n      errorMessage: null,\n      newVersion: releaseName,\n      quitAndUpdate,\n    });\n  }\n}\n\nlet styles = StyleSheet.create({\n  hidden: {\n    display: 'none',\n  },\n});\n"]}