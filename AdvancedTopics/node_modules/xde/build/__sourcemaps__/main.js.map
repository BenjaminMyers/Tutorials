{"version":3,"sources":["main.js"],"names":["app","BrowserWindow","ipcMain","require","mainWindow","projectRoots","on","event","projectRoot","console","log","push","setupMenu","without","quit","length","preventDefault","all","map","stopAsync","root","e","error","width","height","minWidth","minHeight","icon","resolve","__dirname","loadURL","__DEV__","openDevTools","webContents","handleRedirect","url","getURL","shell","openExternal"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;AAEA;;;;AAEA;;;;MAGEA,G,sBAAAA,G;MACAC,a,sBAAAA,a;MACAC,O,sBAAAA,O;;;AAGF,IAAI,CAACC,QAAQ,2BAAR,CAAL,EAA2C;AACzC;AACA;;AAEA;AACA;AACA,MAAIC,aAAa,IAAjB;AACA,MAAIC,eAAe,EAAnB;;AAEAH,UAAQI,EAAR,CAAW,gBAAX,EAA6B,CAACC,KAAD,EAAQC,WAAR,KAAwB;AACnDC,YAAQC,GAAR,CAAa,sBAAoBF,WAAY,GAA7C;AACAH,iBAAaM,IAAb,CAAkBH,WAAlB;;AAEA,mBAAKI,SAAL,CAAeR,UAAf,EAA2B,IAA3B;AACD,GALD;;AAOAF,UAAQI,EAAR,CAAW,gBAAX,EAA6B,CAACC,KAAD,EAAQC,WAAR,KAAwB;AACnDC,YAAQC,GAAR,CAAa,sBAAoBF,WAAY,GAA7C;AACAH,mBAAe,iBAAEQ,OAAF,CAAUR,YAAV,EAAwBG,WAAxB,CAAf;;AAEA,mBAAKI,SAAL,CAAeR,UAAf,EAA2B,KAA3B;AACD,GALD;;AAOAJ,MAAIM,EAAJ,CAAO,mBAAP,EAA4B,MAAM;AAChCN,QAAIc,IAAJ;AACD,GAFD;;AAIA;AACAd,MAAIM,EAAJ,CAAO,WAAP;AAAA,+CAAoB,WAAOC,KAAP,EAAiB;AACnC,UAAIF,aAAaU,MAAb,GAAsB,CAA1B,EAA6B;AAC3BR,cAAMS,cAAN;;AAEA,YAAI;AACF,gBAAM,kBAAQC,GAAR,CAAYZ,aAAaa,GAAb,CAAiB;AAAA,mBAAQ,aAAQC,SAAR,CAAkBC,IAAlB,CAAR;AAAA,WAAjB,CAAZ,CAAN;AACD,SAFD,CAEE,OAAOC,CAAP,EAAU;AACV;AACAZ,kBAAQa,KAAR,CAAcD,CAAd;AACD;AACDhB,uBAAe,EAAf;;AAEAL,YAAIc,IAAJ;AACD;AACF,KAdD;;AAAA;AAAA;AAAA;AAAA;;AAgBAd,MAAIM,EAAJ,CAAO,OAAP,EAAgB,MAAM;AACpB;AACAF,iBAAa,IAAIH,aAAJ,CAAkB;AAC7BsB,aAAO,IADsB;AAE7BC,cAAQ,GAFqB;AAG7BC,gBAAU,GAHmB;AAI7BC,iBAAW,GAJkB;AAK7B;AACAC,YAAM,eAAKC,OAAL,CAAaC,SAAb,EAAwB,kBAAxB;AANuB,KAAlB,CAAb;AAQAzB,eAAW0B,OAAX,CAAoB,WAAS,eAAKF,OAAL,CAAaC,SAAb,EAAwB,mBAAxB,CAA6C,GAA1E;;AAEA;AACA,QAAI,iBAAOE,OAAX,EAAoB;AAClB3B,iBAAW4B,YAAX;AACD;;AAED;AACA,mBAAKpB,SAAL,CAAeR,UAAf,EAA2B,KAA3B;;AAEAA,eAAWE,EAAX,CAAc,QAAd,EAAwB,MAAM;AAC5B;AACA;AACA;AACAF,mBAAa,IAAb;AACD,KALD;;AAQA,QAAI6B,cAAc7B,WAAW6B,WAA7B;AACE,QAAIC,iBAAiB,CAACb,CAAD,EAAIc,GAAJ,KAAY;AAC/B,UAAIA,QAAQF,YAAYG,MAAZ,EAAZ,EAAkC;AAChCf,UAAEL,cAAF;AACAb,gBAAQ,UAAR,EAAoBkC,KAApB,CAA0BC,YAA1B,CAAuCH,GAAvC;AACD;AACF,KALD;;AAOAF,gBAAY3B,EAAZ,CAAe,eAAf,EAAgC4B,cAAhC;AACAD,gBAAY3B,EAAZ,CAAe,YAAf,EAA6B4B,cAA7B;AACH,GAtCD;AAuCD","file":"../main.js","sourcesContent":["import electron from 'electron';\nimport path from 'path';\nimport _ from 'lodash';\n\nimport Menu from './remote/Menu';\n\nimport config from './config';\n\nimport { Project } from 'xdl';\n\nconst {\n  app,\n  BrowserWindow,\n  ipcMain,\n} = electron;\n\nif (!require('electron-squirrel-startup')) {\n  // Report crashes to our server.\n  // electron.CrashReporter.start();\n\n  // Keep a global reference of the window object, if you don't, the window will\n  // be closed automatically when the JavaScript object is GCed.\n  let mainWindow = null;\n  let projectRoots = [];\n\n  ipcMain.on('project-opened', (event, projectRoot) => {\n    console.log(`Opened project at ${projectRoot}`);\n    projectRoots.push(projectRoot);\n\n    Menu.setupMenu(mainWindow, true);\n  });\n\n  ipcMain.on('project-closed', (event, projectRoot) => {\n    console.log(`Closed project at ${projectRoot}`);\n    projectRoots = _.without(projectRoots, projectRoot);\n\n    Menu.setupMenu(mainWindow, false);\n  });\n\n  app.on('window-all-closed', () => {\n    app.quit();\n  });\n\n  // Clean up all open projects before exiting\n  app.on('will-quit', async (event) => {\n    if (projectRoots.length > 0) {\n      event.preventDefault();\n\n      try {\n        await Promise.all(projectRoots.map(root => Project.stopAsync(root)));\n      } catch (e) {\n        // not much we can do here\n        console.error(e);\n      }\n      projectRoots = [];\n\n      app.quit();\n    }\n  });\n\n  app.on('ready', () => {\n    // Create the browser window.\n    mainWindow = new BrowserWindow({\n      width: 1200,\n      height: 800,\n      minWidth: 700,\n      minHeight: 500,\n      // for windows. osx gets icon from post install task\n      icon: path.resolve(__dirname, '../build/xde.ico'),\n    });\n    mainWindow.loadURL(`file://${path.resolve(__dirname, '../web/index.html')}`);\n\n    // Open the devtools.\n    if (config.__DEV__) {\n      mainWindow.openDevTools();\n    }\n\n    // Setup the menu bar\n    Menu.setupMenu(mainWindow, false);\n\n    mainWindow.on('closed', () => {\n      // Dereference the window object, usually you would store windows\n      // in an array if your app supports multi windows, this is the time\n      // when you should delete the corresponding element.\n      mainWindow = null;\n    });\n\n\n    let webContents = mainWindow.webContents;\n      var handleRedirect = (e, url) => {\n        if (url !== webContents.getURL()) {\n          e.preventDefault();\n          require('electron').shell.openExternal(url);\n        }\n      };\n\n      webContents.on('will-navigate', handleRedirect);\n      webContents.on('new-window', handleRedirect);\n  });\n}\n"]}