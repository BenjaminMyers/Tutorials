'use strict';

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactLoadingIndicator = require('react-loading-indicator');

var _reactLoadingIndicator2 = _interopRequireDefault(_reactLoadingIndicator);

var _reactMotion = require('react-motion');

var _xdl = require('xdl');

var _StyleConstants = require('./StyleConstants');

var _StyleConstants2 = _interopRequireDefault(_StyleConstants);

var _Styles = require('./Styles');

var _Styles2 = _interopRequireDefault(_Styles);

var _IdentifierRules = require('../IdentifierRules');

var IdentifierRules = _interopRequireWildcard(_IdentifierRules);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let LoginPage = class LoginPage extends _react2.default.Component {
  constructor(props, context) {
    super(props, context);

    this._onUsernameChange = event => {
      let newValue = IdentifierRules.normalizeWhileTyping(event.target.value);
      this.setState({ username: newValue });
    };

    this._onSubmitLogin = event => {
      event.preventDefault();

      this.setState({ isLoggingIn: true });
      _xdl.User.loginAsync({
        username: this.state.username,
        password: this._passwordInput.value
      }).then(user => {
        this.setState({ errorMessage: null, isLoggingIn: false });
        this.props.onLogin(user);
      }, err => {
        this.setState({ errorMessage: err.message, isLoggingIn: false });
      });
    };

    this._passwordInput = null;
    this.state = {
      username: '',
      errorMessage: null,
      isLoadingUser: true,
      isLoggingIn: false
    };
  }

  render() {
    if (this.state.isLoadingUser) {
      return null;
    }
    return _react2.default.createElement(
      _reactMotion.Motion,
      { defaultStyle: { x: 0 }, style: { x: (0, _reactMotion.spring)(1) } },
      value => _react2.default.createElement(
        'div',
        { style: { opacity: value.x } },
        this.props.loggedInAs ? this.props.children : this._renderLoggedOut()
      )
    );
  }

  _renderErrors() {
    if (this.state.errorMessage) {
      return _react2.default.createElement(
        'div',
        { style: _Styles2.default.errorMessage },
        this.state.errorMessage
      );
    } else {
      return null;
    }
  }

  _renderLoggedOut() {
    return _react2.default.createElement(
      'div',
      { style: Styles.container },
      _react2.default.createElement('img', { src: './ExponentLogoCircle.png', style: Styles.icon }),
      _react2.default.createElement(
        'form',
        { name: 'login',
          style: Styles.form,
          onSubmit: this._onSubmitLogin },
        this._renderErrors(),
        _react2.default.createElement('input', { type: 'text', style: Styles.input, ref: 'username',
          onChange: this._onUsernameChange,
          placeholder: 'username',
          value: this.state.username
        }),
        _react2.default.createElement('input', { type: 'password', style: Styles.input,
          ref: r => {
            this._passwordInput = r;
          },
          placeholder: 'password'
        }),
        _react2.default.createElement(
          'button',
          { type: 'submit',
            disabled: this.state.isLoggingIn,
            style: Styles.button },
          this.state.isLoggingIn ? _react2.default.createElement(_reactLoadingIndicator2.default, { color: { red: 255, green: 255, blue: 255, alpha: 1 } }) : [_react2.default.createElement('img', { key: 'button-invisible-icon', src: './arrow.svg', style: {
              width: 15, height: 15, opacity: 0
            } }), // Purely for spacing
          _react2.default.createElement(
            'div',
            { key: 'button-text', style: { flex: 1 } },
            'Sign in (or register)'
          ), _react2.default.createElement('img', { key: 'button-icon', src: './arrow.svg', style: { width: 15, height: 15 } })]
        )
      ),
      _react2.default.createElement(
        'p',
        { style: Styles.signInNote },
        'If you don\'t have an account yet, just fill in your preferred username and password above and we will create the account and sign you in if the username is still available.'
      )
    );
  }

  componentDidMount() {
    _xdl.User.whoamiAsync().then(user => {
      this.setState({ errorMessage: null, isLoadingUser: false });
      if (user) {
        this.props.onLogin(user);
      }
    }, err => {
      this.setState({ errorMessage: err.message, isLoadingUser: false });
    });
  }
};
LoginPage.propTypes = {
  children: _react.PropTypes.node.isRequired,
  loggedInAs: _react.PropTypes.object,
  onLogin: _react.PropTypes.func.isRequired
};


let Styles = {
  container: {
    fontFamily: 'Verdana',

    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    justifyContent: 'center',

    position: 'fixed',
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  },
  form: {
    width: 250
  },
  icon: {
    height: 100,
    width: 100,
    marginBottom: 40
  },
  button: {
    backgroundColor: _StyleConstants2.default.colorPrimary,
    border: 'none',
    borderRadius: 5,
    color: 'white',
    padding: 8,

    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    width: '100%'
  },
  signInNote: {
    width: 350,
    marginTop: 30,
    color: '#ccc',
    fontStyle: 'italic'
  },
  input: (0, _extends3.default)({}, _Styles2.default.input, {

    display: 'block',
    width: '100%',
    marginBottom: 20
  })
};

module.exports = LoginPage;
//# sourceMappingURL=../__sourcemaps__/ui/LoginPage.js.map
