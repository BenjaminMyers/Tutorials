'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _bunyan = require('bunyan');

var _bunyan2 = _interopRequireDefault(_bunyan);

var _reactLoadingIndicator = require('react-loading-indicator');

var _reactLoadingIndicator2 = _interopRequireDefault(_reactLoadingIndicator);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactLinkify = require('react-linkify');

var _reactLinkify2 = _interopRequireDefault(_reactLinkify);

var _StyleConstants = require('./StyleConstants');

var _StyleConstants2 = _interopRequireDefault(_StyleConstants);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let ConsoleLog = class ConsoleLog extends _react2.default.Component {
  constructor() {
    var _temp;

    return _temp = super(...arguments), this.componentWillReceiveProps = nextProps => {
      // When the loading indicator appears or is hidden, force a redraw.
      let oldIsLoading = this.props.isLoading;
      let newIsLoading = nextProps.isLoading;
      if (oldIsLoading !== newIsLoading && this._grid) {
        requestAnimationFrame(() => {
          this._cellMeasurer.resetMeasurements();
          this._grid.recomputeGridSize();
        });
      }
    }, this._logHasPadding = index => {
      let log = this.props.logs[index];
      return log.tag === 'exponent' || log.type === 'global' || log.type === 'notifications';
    }, this._lastLogHasPadding = index => {
      if (index === 0) {
        return false;
      } else {
        return this._logHasPadding(index - 1);
      }
    }, this._renderLog = (_ref) => {
      let rowIndex = _ref.rowIndex;

      let index = rowIndex;
      if (index >= this.props.logs.length) {
        return this._renderLoading();
      }

      let log = this.props.logs[index];
      let message = log.msg;
      let logStyle = Styles.logDefault;
      if (LOG_LEVEL_TO_STYLE[log.level]) {
        logStyle = LOG_LEVEL_TO_STYLE[log.level];
      }

      let time = log.time.toLocaleTimeString();
      let shouldLinkify = true;

      message = _lodash2.default.trim(message);

      // Give important messages more space
      let paddingTop = 0;
      let paddingBottom = 0;
      if (log.tag === 'exponent' || log.type === 'global' || log.type === 'notifications') {
        paddingBottom = 20;
        if (index > 0 && !this._lastLogHasPadding(index)) {
          paddingTop = 20;
        }
      }

      if (index === 0) {
        paddingTop = _StyleConstants2.default.gutterLg;
      }

      // Lower priority of packager logs
      if (log.tag === 'packager' && log.level === _bunyan2.default.INFO) {
        logStyle = Styles.logDebug;
      }

      // A big chunk of json is logged right when an app starts. Lower the priority.
      if (log.tag === 'device' && message.includes('Running application') && message.includes('with appParams')) {
        logStyle = Styles.logDebug;
        // Linkify does a bad job parsing json, so ingore this.
        shouldLinkify = false;
      }

      // console.group
      let paddingLeft = 0;
      if (log.groupDepth) {
        paddingLeft = log.groupDepth * 20;
      }

      let otherStyles = {};
      if (message.includes('Project opened!')) {
        otherStyles = Styles.bigLog;
      }

      return _react2.default.createElement(
        'div',
        { key: index, style: (0, _extends3.default)({}, Styles.logContainer, { paddingTop, paddingBottom }) },
        _react2.default.createElement(
          'span',
          { style: Styles.logTime },
          time
        ),
        _react2.default.createElement(
          'pre',
          { style: (0, _extends3.default)({}, Styles.log, logStyle, { paddingLeft }, otherStyles) },
          shouldLinkify ? _react2.default.createElement(
            _reactLinkify2.default,
            null,
            message
          ) : message
        )
      );
    }, _temp;
  }

  componentWillUpdate() {
    // Don't keep scrolling down, unless already scrolled to bottom.
    // From http://blog.vjeux.com/2013/javascript/scroll-position-with-react.html
    const node = this._scrollContainerRef;
    if (node) {
      this.shouldScrollBottom = node.scrollTop + node.offsetHeight === node.scrollHeight;
    }
  }

  componentDidUpdate() {
    if (this.shouldScrollBottom) {
      const node = this._scrollContainerRef;
      if (node) {
        node.scrollTop = node.scrollHeight;
      }
    }
  }

  _renderLoading() {
    let isLoading = this.props.isLoading;


    if (isLoading) {
      return _react2.default.createElement(
        'div',
        { style: Styles.loadingIndicator, key: -1 },
        _react2.default.createElement(_reactLoadingIndicator2.default, { color: { red: 255, green: 255, blue: 255, alpha: 1 } })
      );
    } else {
      return _react2.default.createElement('div', { key: -2 });
    }
  }

  render() {
    // add extra row for loading container
    let numRows = this.props.logs.length + 1;

    var _props = this.props;
    let bottomBarLeftContent = _props.bottomBarLeftContent;
    let bottomBarRightContent = _props.bottomBarRightContent;

    if (!bottomBarLeftContent) {
      bottomBarLeftContent = _react2.default.createElement('div', null);
    }
    if (!bottomBarRightContent) {
      bottomBarRightContent = _react2.default.createElement('div', null);
    }

    /* eslint-disable react/jsx-no-bind */
    return _react2.default.createElement(
      'div',
      { style: Styles.container },
      _react2.default.createElement(
        'div',
        {
          style: Styles.logs,
          ref: c => {
            this._scrollContainerRef = c;
          } },
        _lodash2.default.range(numRows).map(rowIndex => this._renderLog({ rowIndex }))
      ),
      _react2.default.createElement(
        'div',
        { style: Styles.bottomBar },
        _react2.default.createElement(
          'div',
          { style: Styles.bottomBarLeft },
          bottomBarLeftContent
        ),
        _react2.default.createElement(
          'div',
          { style: Styles.bottomBarRight },
          _react2.default.createElement(
            'a',
            { style: Styles.clearButtonLink, onClick: this.props.onClickClearLogs },
            _react2.default.createElement('img', { src: './IconClear.png', style: Styles.clearButton })
          ),
          bottomBarRightContent
        )
      )
    );
    /* eslint-enable react/jsx-no-bind */
  }
};
ConsoleLog.propTypes = {
  isLoading: _react.PropTypes.bool,
  logs: _react.PropTypes.arrayOf(_react.PropTypes.object),
  bottomBarLeftContent: _react.PropTypes.node,
  bottomBarRightContent: _react.PropTypes.node,
  onClickClearLogs: _react.PropTypes.func
};
exports.default = ConsoleLog;


const Styles = {
  container: {
    display: 'flex',
    flexDirection: 'column',
    height: '100%'
  },
  logs: {
    background: _StyleConstants2.default.colorDarkBackground,
    fontSize: _StyleConstants2.default.fontSizeMd,
    height: '100%',
    overflowY: 'auto',
    padding: _StyleConstants2.default.gutterLg,
    flex: '1'
  },
  logContainer: {
    display: 'flex',
    flexDirection: 'row'
  },
  log: {
    background: _StyleConstants2.default.colorDarkBackground,
    whiteSpace: 'pre-wrap'
  },
  bigLog: {
    fontSize: _StyleConstants2.default.fontSizeLg
  },
  logDebug: {
    color: _StyleConstants2.default.colorDebug
  },
  logDefault: {
    color: 'white'
  },
  logWarning: {
    color: _StyleConstants2.default.colorWarning
  },
  logError: {
    color: _StyleConstants2.default.colorError
  },
  logTime: {
    fontSize: _StyleConstants2.default.fontSizeSm,
    color: _StyleConstants2.default.colorSubtitle,
    width: 85,
    minWidth: 85
  },
  loadingIndicator: {
    paddingLeft: _StyleConstants2.default.gutterLg,
    paddingTop: _StyleConstants2.default.gutterLg
  },
  bottomBar: {
    alignItems: 'center',
    justifyContent: 'space-between',
    height: 24,
    display: 'flex'
  },
  bottomBarLeft: {
    flex: 1
  },
  bottomBarRight: {
    flex: 1,
    textAlign: 'right',
    paddingRight: _StyleConstants2.default.gutterLg,
    marginVertical: _StyleConstants2.default.gutterSm
  },
  clearButtonLink: {
    cursor: 'pointer',
    fontSize: _StyleConstants2.default.fontSizeSm,
    color: _StyleConstants2.default.colorText,
    textDecoration: 'none',
    display: 'inline-flex',
    flexDirection: 'column',
    alignItems: 'center',
    verticalAlign: 'middle'
  },
  clearButton: {
    maxHeight: 10,
    maxWidth: 10,
    margin: 6
  }
};

const LOG_LEVEL_TO_STYLE = {
  [_bunyan2.default.DEBUG]: Styles.logDebug,
  [_bunyan2.default.INFO]: Styles.logDefault,
  [_bunyan2.default.WARN]: Styles.logWarning,
  [_bunyan2.default.ERROR]: Styles.logError
};
//# sourceMappingURL=../__sourcemaps__/ui/ConsoleLog.js.map
