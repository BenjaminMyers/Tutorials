'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _class, _temp;

var _xdl = require('xdl');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _bunyan = require('bunyan');

var _bunyan2 = _interopRequireDefault(_bunyan);

var _electron = require('electron');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Constants = require('./Constants');

var _ConsoleLog = require('./ConsoleLog');

var _ConsoleLog2 = _interopRequireDefault(_ConsoleLog);

var _StyleConstants = require('./StyleConstants');

var _StyleConstants2 = _interopRequireDefault(_StyleConstants);

var _Styles = require('./Styles');

var _Styles2 = _interopRequireDefault(_Styles);

var _MenuItem = require('./toolbar/MenuItem');

var _MenuItem2 = _interopRequireDefault(_MenuItem);

var _Popover = require('./toolbar/Popover');

var _Popover2 = _interopRequireDefault(_Popover);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DEVICES_ICON_SIZE = 16;
var OPTIONS_ICON_SIZE = 22;
var PROJECT_OPENED_MESSAGE = 'Project opened! You can now use the "Send Link" or "Device" buttons to view your project.';

var ProjectScreen = (_temp = _class = function (_React$Component) {
  (0, _inherits3.default)(ProjectScreen, _React$Component);

  function ProjectScreen(props, context) {
    var _this2 = this;

    (0, _classCallCheck3.default)(this, ProjectScreen);

    var _this = (0, _possibleConstructorReturn3.default)(this, (ProjectScreen.__proto__ || (0, _getPrototypeOf2.default)(ProjectScreen)).call(this, props, context));

    _this._logInfo = function (data) {
      return _xdl.ProjectUtils.logInfo(_this.state.projectRoot, 'exponent', data);
    };

    _this._logError = function (data) {
      return _xdl.ProjectUtils.logError(_this.state.projectRoot, 'exponent', data);
    };

    _this._urlInputSelect = function () {
      _this._urlInput.select();
    };

    _this._urlInputCopy = function () {
      _this._urlInputSelect();
      document.execCommand('copy');
    };

    _this._setProjectSettingAsync = function () {
      var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(options) {
        var projectSettings, computedUrl;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _xdl.ProjectSettings.setAsync(_this.state.projectRoot, options);

              case 2:
                projectSettings = _context.sent;
                _context.next = 5;
                return _this._computeUrlAsync(_this.state.projectRoot);

              case 5:
                computedUrl = _context.sent;

                _this.setState({
                  projectSettings: projectSettings,
                  computedUrl: computedUrl
                });

              case 7:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, _this2);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }();

    _this._renderDeviceLogs = function () {
      var _this$state = _this.state;
      var connectedDevices = _this$state.connectedDevices;
      var focusedConnectedDeviceId = _this$state.focusedConnectedDeviceId;


      var device = focusedConnectedDeviceId ? connectedDevices[focusedConnectedDeviceId] : null;
      var logs = device ? device.logs : _this._defaultDeviceLogs();
      return _react2.default.createElement(
        'div',
        { style: Styles.tabContainer },
        _react2.default.createElement(_ConsoleLog2.default, { logs: logs }),
        _react2.default.createElement(
          'div',
          null,
          _react2.default.createElement(
            _Popover2.default,
            { body: _this._renderPopoverDeviceLogs(), arrowOffset: 16, isAbove: true },
            _react2.default.createElement('img', {
              src: './SelectUpDown.png',
              style: [Styles.iconWithMargin, Styles.deviceSelectIcon],
              onClick: _this._toggleDeviceLogsPopover
            })
          ),
          _react2.default.createElement(
            'span',
            { style: Styles.deviceSelectText },
            device ? device.name : 'No devices connected'
          )
        )
      );
    };

    _this._defaultDeviceLogs = function () {
      var logs = [{
        level: _bunyan2.default.INFO,
        msg: 'Logs from devices will appear here',
        time: _this._startTime
      }];

      if (_this.state.exponentSdkStatus === _xdl.Doctor.EXPONENT_SDK_NOT_INSTALLED) {
        logs.push({
          level: _bunyan2.default.WARN,
          msg: 'Please run `npm install --save exponent` and add `import \'exponent\'` to the top of your main file to see device logs.',
          time: _this._startTime
        });
      } else if (_this.state.exponentSdkStatus === _xdl.Doctor.EXPONENT_SDK_NOT_IMPORTED) {
        logs.push({
          level: _bunyan2.default.WARN,
          msg: 'Add `import \'exponent\'` to the top of your main file to see device logs.',
          time: _this._startTime
        });
      }

      return logs;
    };

    _this._toggleDeviceLogsPopover = function (event) {
      event.stopPropagation();
      if (_this.state.focusedConnectedDeviceId) {
        _this.props.onTogglePopover(_Constants.PopoverEnum.DEVICE_LOGS);
      }
    };

    _this._setSelectedDevice = function (deviceId) {
      _this.setState({
        focusedConnectedDeviceId: deviceId
      });
    };

    _this._appendLogChunk = function (chunk) {
      if (!chunk.shouldHide) {
        _this._logsToAdd.push(chunk);

        requestAnimationFrame(function () {
          if (_this._logsToAdd.length === 0) {
            return;
          }

          var logs = _this.state.logs.concat(_this._logsToAdd);
          _this._logsToAdd = [];
          _this.setState({
            logs: logs
          });
        });
      }
    };

    _this.restartAsync = function () {
      var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3() {
        var isShiftSelected = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];
        var clearCacheByDefault, reset, shiftMessage;
        return _regenerator2.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _xdl.Analytics.logEvent('Click Restart');

                _context3.next = 3;
                return _xdl.UserSettings.getAsync('clearCacheByDefault', true);

              case 3:
                clearCacheByDefault = _context3.sent;
                reset = clearCacheByDefault ? !isShiftSelected : isShiftSelected;
                shiftMessage = '';

                if (!isShiftSelected) {
                  shiftMessage = clearCacheByDefault ? ' (Hold shift while clicking restart to avoid clearing cache)' : ' (Hold shift while clicking restart to clear packager cache)';
                }

                _this._logInfo('Restarting project' + (reset ? ' and clearing packager cache' : '') + shiftMessage + '.');
                _this.setState({
                  computedUrl: null,
                  isProjectRunning: false
                }, (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2() {
                  var expJson, computedUrl, exponentSdkStatus;
                  return _regenerator2.default.wrap(function _callee2$(_context2) {
                    while (1) {
                      switch (_context2.prev = _context2.next) {
                        case 0:
                          // TODO: refactor this. can't call _startProjectAsync and _stopProjectAsync
                          // because they rely on setState calls that work asynchronously.
                          expJson = void 0;
                          _context2.prev = 1;
                          _context2.next = 4;
                          return _xdl.Project.startAsync(_this.state.projectRoot, { reset: reset });

                        case 4:
                          expJson = _context2.sent;

                          _this._logInfo(PROJECT_OPENED_MESSAGE);
                          _context2.next = 11;
                          break;

                        case 8:
                          _context2.prev = 8;
                          _context2.t0 = _context2['catch'](1);

                          _this._logError(_context2.t0.message);

                        case 11:
                          _context2.next = 13;
                          return _this._computeUrlAsync(_this.state.projectRoot);

                        case 13:
                          computedUrl = _context2.sent;
                          _context2.next = 16;
                          return _xdl.Doctor.getExponentSdkStatus(_this.state.projectRoot);

                        case 16:
                          exponentSdkStatus = _context2.sent;

                          _this.setState({
                            computedUrl: computedUrl,
                            isProjectRunning: true,
                            expJson: expJson,
                            exponentSdkStatus: exponentSdkStatus
                          });

                        case 18:
                        case 'end':
                          return _context2.stop();
                      }
                    }
                  }, _callee2, _this2, [[1, 8]]);
                })));

              case 9:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, _this2);
      }));

      return function (_x2) {
        return _ref2.apply(this, arguments);
      };
    }();

    _this._getDeviceName = function (id, name) {
      if (_this._deviceIdToName[id]) {
        return _this._deviceIdToName[id];
      }

      if (!_lodash2.default.includes(_lodash2.default.values(_this._deviceIdToName), name)) {
        _this._deviceIdToName[id] = name;
        return name;
      }

      var number = 1;
      while (_lodash2.default.includes(_lodash2.default.values(_this._deviceIdToName), name + ' - ' + number)) {
        number++;
      }

      _this._deviceIdToName[id] = name + ' - ' + number;
      return _this._deviceIdToName[id];
    };

    _this._handleDeviceLogs = function (chunk) {
      _this._deviceLogsToAdd.push(chunk);

      requestAnimationFrame(function () {
        if (_this._deviceLogsToAdd.length === 0) {
          return;
        }

        _this.setState(function (state) {
          var connectedDevices = state.connectedDevices;
          var focusedConnectedDeviceId = state.focusedConnectedDeviceId;

          for (var i = 0; i < _this._deviceLogsToAdd.length; i++) {
            var _chunk = _this._deviceLogsToAdd[i];
            if (!connectedDevices[_chunk.deviceId]) {
              var name = _this._getDeviceName(_chunk.deviceId, _chunk.deviceName);
              if (!focusedConnectedDeviceId) {
                focusedConnectedDeviceId = _chunk.deviceId;
              }
              connectedDevices[_chunk.deviceId] = {
                name: name,
                logs: [{
                  level: _bunyan2.default.INFO,
                  msg: 'Streaming logs from ' + name + '...',
                  time: new Date()
                }]
              };
            }

            connectedDevices[_chunk.deviceId].logs = connectedDevices[_chunk.deviceId].logs.concat([_chunk]);
          }
          _this._deviceLogsToAdd = [];

          return {
            focusedConnectedDeviceId: focusedConnectedDeviceId,
            connectedDevices: connectedDevices
          };
        });
      });
    };

    _this.startAsync = function () {
      var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5(projectRoot) {
        var projectSettings, xdeProjectId, projectJson;
        return _regenerator2.default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                if (!_this.state.projectRoot) {
                  _context5.next = 2;
                  break;
                }

                return _context5.abrupt('return', false);

              case 2:
                if (projectRoot) {
                  _context5.next = 4;
                  break;
                }

                throw new Error("Could not open project: empty root.");

              case 4:
                _context5.next = 6;
                return _xdl.ProjectSettings.readAsync(projectRoot);

              case 6:
                projectSettings = _context5.sent;
                xdeProjectId = _this._currentOpenProjectXDEId;


                _xdl.ProjectUtils.attachLoggerStream(projectRoot, {
                  stream: {
                    write: function write(chunk) {
                      if (_this._currentOpenProjectXDEId !== xdeProjectId) {
                        return;
                      }

                      if (chunk.tag === 'device') {
                        _this._handleDeviceLogs(chunk);
                      } else {
                        _this._appendLogChunk(chunk);
                      }
                    }
                  },
                  type: 'raw'
                });

                // Send projectRoot to main process. main process will close this project
                // when XDE is closed.
                _electron.ipcRenderer.send('project-opened', projectRoot);

                _context5.next = 12;
                return _xdl.Exp.expInfoSafeAsync(projectRoot);

              case 12:
                projectJson = _context5.sent;


                _this.setState({
                  projectSettings: projectSettings,
                  projectRoot: projectRoot,
                  projectJson: projectJson,
                  isProjectRunning: false
                }, (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4() {
                  var expJson, computedUrl, exponentSdkStatus;
                  return _regenerator2.default.wrap(function _callee4$(_context4) {
                    while (1) {
                      switch (_context4.prev = _context4.next) {
                        case 0:
                          _context4.prev = 0;
                          _context4.next = 3;
                          return _xdl.Project.startAsync(projectRoot);

                        case 3:
                          expJson = _context4.sent;

                          _this._logInfo(PROJECT_OPENED_MESSAGE);

                          _context4.next = 7;
                          return _this._computeUrlAsync(projectRoot);

                        case 7:
                          computedUrl = _context4.sent;
                          _context4.next = 10;
                          return _xdl.Doctor.getExponentSdkStatus(projectRoot);

                        case 10:
                          exponentSdkStatus = _context4.sent;

                          _this.setState({
                            computedUrl: computedUrl,
                            isProjectRunning: true,
                            expJson: expJson,
                            exponentSdkStatus: exponentSdkStatus
                          });
                          _context4.next = 17;
                          break;

                        case 14:
                          _context4.prev = 14;
                          _context4.t0 = _context4['catch'](0);

                          _this._logError(_context4.t0.message);

                        case 17:
                        case 'end':
                          return _context4.stop();
                      }
                    }
                  }, _callee4, _this2, [[0, 14]]);
                })));

                return _context5.abrupt('return', true);

              case 15:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, _this2);
      }));

      return function (_x4) {
        return _ref4.apply(this, arguments);
      };
    }();

    _this.stopAsync = function () {
      var _ref6 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee6(projectRoot) {
        return _regenerator2.default.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                if (_this.state.projectRoot) {
                  _context6.next = 2;
                  break;
                }

                return _context6.abrupt('return', false);

              case 2:

                _this._currentOpenProjectXDEId++;

                // Send projectRoot to main process.
                _electron.ipcRenderer.send('project-closed', projectRoot);

                _context6.prev = 4;
                _context6.next = 7;
                return _xdl.Project.stopAsync(projectRoot);

              case 7:
                _this._logInfo('Project closed.');
                _this.setState({
                  projectSettings: null,
                  projectRoot: null,
                  projectJson: null,
                  computedUrl: null,
                  isProjectRunning: false,
                  expJson: null,
                  logs: [],
                  connectedDevices: {},
                  focusedConnectedDeviceId: null
                });
                _this._resetLocalProperties();

                return _context6.abrupt('return', true);

              case 13:
                _context6.prev = 13;
                _context6.t0 = _context6['catch'](4);

                _this._logError(_context6.t0.message);

                return _context6.abrupt('return', false);

              case 17:
              case 'end':
                return _context6.stop();
            }
          }
        }, _callee6, _this2, [[4, 13]]);
      }));

      return function (_x5) {
        return _ref6.apply(this, arguments);
      };
    }();

    _this.state = {
      logs: [],
      connectedDevices: {}, // mapping of device id -> {name, logs: array of logs}
      focusedConnectedDeviceId: null,
      expJson: null,
      exponentSdkStatus: _xdl.Doctor.EXPONENT_SDK_INSTALLED_AND_IMPORTED,
      computedUrl: null,

      projectRoot: null,
      projectJson: null,
      projectSettings: null,
      isProjectRunning: false
    };

    _this._resetLocalProperties();
    return _this;
  }

  (0, _createClass3.default)(ProjectScreen, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._registerLogs();
    }
  }, {
    key: 'componentWillUpdate',
    value: function componentWillUpdate(nextProps, nextState) {
      if (nextState.projectRoot !== this.state.projectRoot || nextState.projectJson !== this.state.projectJson || nextState.projectSettings !== this.state.projectSettings || nextState.isProjectRunning !== this.state.isProjectRunning) {
        this.props.updateParentState({
          projectRoot: nextState.projectRoot,
          projectJson: nextState.projectJson,
          projectSettings: nextState.projectSettings,
          isProjectRunning: nextState.isProjectRunning
        });
      }
    }
  }, {
    key: 'computedUrl',
    value: function computedUrl() {
      return this.state.computedUrl;
    }
  }, {
    key: '_resetLocalProperties',
    value: function _resetLocalProperties() {
      this._startTime = new Date();
      this._logsToAdd = [];
      this._deviceLogsToAdd = [];
      this._deviceIdToName = {};
    }
  }, {
    key: 'render',
    value: function render() {
      // Device logs only work >= SDK 7
      var shouldShowDeviceLogs = false;
      if (this.state.expJson && _xdl.Versions.gteSdkVersion(this.state.expJson, '7.0.0')) {
        shouldShowDeviceLogs = true;
      }

      return _react2.default.createElement(
        'div',
        { style: {
            display: 'flex',
            flexDirection: 'column',
            height: '100vh'
          } },
        _react2.default.createElement(
          'div',
          { style: { margin: _StyleConstants2.default.gutterLg } },
          this.state.projectSettings && this._renderUrlInput()
        ),
        _react2.default.createElement(
          'div',
          { style: Styles.tabsContainer },
          this._renderPackagerConsole(),
          shouldShowDeviceLogs && _react2.default.createElement('div', { style: Styles.verticalSeparator }),
          shouldShowDeviceLogs && this._renderDeviceLogs()
        )
      );
    }
  }, {
    key: '_renderUrlInput',
    value: function _renderUrlInput() {
      var _this3 = this;

      return _react2.default.createElement(
        'div',
        { style: Styles.urlInputContainer },
        _react2.default.createElement(
          _Popover2.default,
          { body: this._renderPopoverOptions(), arrowOffset: 16 },
          _react2.default.createElement('img', { src: './gear.svg',
            style: [Styles.iconWithMargin, Styles.optionsIcon],
            onClick: this._toggleOptionsPopover
          })
        ),
        _react2.default.createElement('input', {
          ref: function ref(r) {
            _this3._urlInput = r;
          },
          style: Styles.urlInput,
          value: this.state.computedUrl || '',
          placeholder: 'Waiting for packager and tunnel to start...',
          onClick: this._urlInputSelect
        }),
        _react2.default.createElement('img', { src: './IconArrowUpRight.png',
          style: Styles.urlInputCopyIcon,
          onClick: this._urlInputCopy
        })
      );
    }
  }, {
    key: '_renderPopoverOptions',
    value: function _renderPopoverOptions() {
      var _this4 = this;

      if (this.props.openPopover !== _Constants.PopoverEnum.OPTIONS) {
        return null;
      }

      var hostMenuItems = ['Tunnel', 'LAN', 'localhost'].map(function (label) {
        var option = label.toLowerCase();
        var checkState = _this4.state.projectSettings.hostType === option ? 'checked' : 'unchecked';

        /* eslint-disable react/jsx-no-bind */
        return _react2.default.createElement(_MenuItem2.default, { label: label, key: option, checkState: checkState,
          onClick: function onClick() {
            return _this4._setProjectSettingAsync({ hostType: option });
          }
        });
        /* eslint-enable react/jsx-no-bind */
      });

      var protocolMenuItems = ['exp', 'http', 'redirect'].map(function (option) {
        var checkState = _this4.state.projectSettings.urlType === option ? 'checked' : 'unchecked';

        /* eslint-disable react/jsx-no-bind */
        return _react2.default.createElement(_MenuItem2.default, { label: option, key: option, checkState: checkState,
          onClick: function onClick() {
            return _this4._setProjectSettingAsync({ urlType: option });
          }
        });
        /* eslint-enable react/jsx-no-bind */
      });

      var otherMenuItems = [{
        label: 'Development Mode',
        option: 'dev'
      }, {
        label: 'Minify',
        option: 'minify'
      }].map(function (_ref7) {
        var label = _ref7.label;
        var option = _ref7.option;

        var isEnabled = _this4.state.projectSettings[option];

        /* eslint-disable react/jsx-no-bind */
        return _react2.default.createElement(_MenuItem2.default, { label: label, key: option,
          checkState: isEnabled ? 'checked' : 'unchecked',
          onClick: function onClick() {
            return _this4._setProjectSettingAsync((0, _defineProperty3.default)({}, option, !isEnabled));
          }
        });
        /* eslint-enable react/jsx-no-bind */
      });

      // Just for aesthetics, make top-level MenuItems all "unchecked" (so the
      // beginning of the text lines up)
      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          _MenuItem2.default,
          { label: 'Host', checkState: 'unchecked' },
          _react2.default.createElement(
            'div',
            { style: _Styles2.default.hoverBox },
            hostMenuItems
          )
        ),
        _react2.default.createElement(
          _MenuItem2.default,
          { label: 'Protocol', checkState: 'unchecked' },
          _react2.default.createElement(
            'div',
            { style: _Styles2.default.hoverBox },
            protocolMenuItems
          )
        ),
        otherMenuItems
      );
    }
  }, {
    key: '_computeUrlAsync',
    value: function () {
      var _ref8 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee7(root) {
        return _regenerator2.default.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                if (root) {
                  _context7.next = 2;
                  break;
                }

                return _context7.abrupt('return', null);

              case 2:
                return _context7.abrupt('return', _xdl.UrlUtils.constructManifestUrlAsync(root));

              case 3:
              case 'end':
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function _computeUrlAsync(_x6) {
        return _ref8.apply(this, arguments);
      }

      return _computeUrlAsync;
    }()
  }, {
    key: '_renderPackagerConsole',
    value: function _renderPackagerConsole() {
      return _react2.default.createElement(_ConsoleLog2.default, { logs: this.state.logs, isLoading: this.props.isLoading });
    }
  }, {
    key: '_renderPopoverDeviceLogs',
    value: function _renderPopoverDeviceLogs() {
      var _this5 = this;

      if (this.props.openPopover !== _Constants.PopoverEnum.DEVICE_LOGS) {
        return null;
      }

      var menuItems = [];
      _lodash2.default.forEach(this.state.connectedDevices, function (device, deviceId) {
        var isSelected = _this5.state.focusedConnectedDeviceId === deviceId;

        /* eslint-disable react/jsx-no-bind */
        menuItems.push(_react2.default.createElement(_MenuItem2.default, {
          label: device.name,
          key: deviceId,
          checkState: isSelected ? 'checked' : 'unchecked',
          onClick: function onClick() {
            return _this5._setSelectedDevice(deviceId);
          }
        }));
        /* eslint-enable react/jsx-no-bind */
      });

      return _react2.default.createElement(
        'div',
        null,
        menuItems
      );
    }
  }, {
    key: '_registerLogs',
    value: function _registerLogs() {
      var _this6 = this;

      _xdl.Logger.global.addStream({
        stream: {
          write: function write(chunk) {
            _this6._appendLogChunk(chunk);
          }
        },
        type: 'raw'
      });
    }

    // If multiple devices with the same name are connected, add ' - 1', ' - 2' to their names.

  }]);
  return ProjectScreen;
}(_react2.default.Component), _class.propTypes = {
  openPopover: _react.PropTypes.string,
  onTogglePopover: _react.PropTypes.func,
  isLoading: _react.PropTypes.bool,
  updateParentState: _react.PropTypes.func
}, _temp);
exports.default = ProjectScreen;


var Styles = {
  verticalSeparator: {
    width: 2,
    display: 'flex',
    backgroundColor: _StyleConstants2.default.colorBackground
  },

  urlInputContainer: {
    display: 'flex',
    alignItems: 'center',
    marginTop: _StyleConstants2.default.gutterLg,
    position: 'relative' },

  tabContainer: {
    flex: '1',
    display: 'flex',
    flexDirection: 'column',
    height: '100%'
  },

  iconWithMargin: {
    cursor: 'pointer',
    marginTop: _StyleConstants2.default.gutterSm,
    marginBottom: _StyleConstants2.default.gutterSm
  },

  optionsIcon: {
    width: OPTIONS_ICON_SIZE,
    height: OPTIONS_ICON_SIZE,
    marginLeft: _StyleConstants2.default.gutterMd,
    marginRight: -(_StyleConstants2.default.gutterMd + OPTIONS_ICON_SIZE)
  },

  urlInput: (0, _extends3.default)({}, _Styles2.default.input, {
    flex: 1,
    paddingLeft: OPTIONS_ICON_SIZE + _StyleConstants2.default.gutterMd * 2 - _StyleConstants2.default.gutterSm
  }),

  urlInputCopyIcon: {
    cursor: 'pointer',
    padding: _StyleConstants2.default.gutterMd, // Pad clickable area

    position: 'absolute',
    right: 0,
    top: '50%',
    height: _StyleConstants2.default.gutterMd * 2 + 10,
    marginTop: -(_StyleConstants2.default.gutterMd * 2 + 10) / 2
  },

  deviceSelectIcon: {
    height: DEVICES_ICON_SIZE,
    marginLeft: _StyleConstants2.default.gutterMd,
    marginRight: -(_StyleConstants2.default.gutterMd + DEVICES_ICON_SIZE)
  },

  deviceSelectText: {
    fontSize: _StyleConstants2.default.fontSizeSm,
    color: _StyleConstants2.default.colorText,
    paddingLeft: DEVICES_ICON_SIZE + _StyleConstants2.default.gutterMd * 2 - _StyleConstants2.default.gutterSm,
    marginVertical: _StyleConstants2.default.gutterSm
  },

  tabsContainer: {
    display: 'flex',
    flexDirection: 'row',
    height: '100%'
  }
};
//# sourceMappingURL=../__sourcemaps__/ui/ProjectScreen.js.map
