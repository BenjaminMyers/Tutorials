'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _aphrodite = require('aphrodite');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _xdl = require('xdl');

var _Constants = require('../Constants');

var _ProjectIcon = require('../ProjectIcon');

var _ProjectIcon2 = _interopRequireDefault(_ProjectIcon);

var _StyleConstants = require('../StyleConstants');

var _StyleConstants2 = _interopRequireDefault(_StyleConstants);

var _IconButton = require('./IconButton');

var _IconButton2 = _interopRequireDefault(_IconButton);

var _MenuItem = require('./MenuItem');

var _MenuItem2 = _interopRequireDefault(_MenuItem);

var _MenuSeparator = require('./MenuSeparator');

var _MenuSeparator2 = _interopRequireDefault(_MenuSeparator);

var _Popover = require('./Popover');

var _Popover2 = _interopRequireDefault(_Popover);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let ToolBar = class ToolBar extends _react2.default.Component {

  constructor(props, context) {
    var _this;

    _this = super(props, context);

    this._onKeyDown = event => {
      let metaKey = event.ctrlKey;
      if (process.platform === 'darwin') {
        metaKey = event.metaKey;
      }

      this.setState({
        shiftSelected: !!event.shiftKey
      });

      if (metaKey) {
        switch (event.key.toLowerCase()) {
          case 'n':
            event.preventDefault();
            this.props.onNewProjectClick();
            break;
          case 'o':
            event.preventDefault();
            this.props.onOpenProjectClick();
            break;
          case 'p':
            event.preventDefault();
            if (this.props.isProjectOpen) {
              this.props.onRestartClick(!!event.shiftKey);
            }
            break;
          case 'i':
            event.preventDefault();
            if (this.props.isProjectRunning && _xdl.Simulator.isPlatformSupported()) {
              this._simulatorIOSAsync();
            }
            break;
          case 'd':
            event.preventDefault();
            if (this.props.isProjectRunning && _xdl.Android.isPlatformSupported()) {
              this._simulatorAndroidAsync();
            }
            break;
        }
      }
    };

    this._onKeyUp = event => {
      this.setState({
        shiftSelected: !!event.shiftKey
      });
    };

    this._getTogglePopoverFn = popover => {
      return event => {
        event.stopPropagation();
        this.props.onTogglePopover(popover);
      };
    };

    this._onSendLinkClick = event => {
      if (this._sendLinkInput.value) {
        this._getTogglePopoverFn(_Constants.PopoverEnum.SEND_LINK)(event);
        this.props.onSendLinkClick(this._sendLinkInput.value);
      }
    };

    this._onMenuClick = event => {
      event.stopPropagation();
    };

    this._onLogOutClick = (0, _asyncToGenerator3.default)(function* () {
      try {
        _this.props.onLogOut();
      } catch (error) {
        console.error("logout error:", error);
      }
    });

    this._restartClicked = () => {
      this.props.onRestartClick(this.state.shiftSelected);
    };

    this._onShowInFinderClick = () => {
      _xdl.Analytics.logEvent('Click Show in Finder');

      _xdl.FileSystem.openFolderAsync(this.props.projectRoot).catch(err => {
        console.error(err);
      });
    };

    this._onOpenInTerminalClick = () => {
      _xdl.Analytics.logEvent('Click Open in Terminal');

      _xdl.FileSystem.openConsoleAsync(this.props.projectRoot).catch(err => {
        console.error(err);
      });
    };

    this._onOpenInEditorClick = () => {
      _xdl.Analytics.logEvent('Click Open in Editor');

      _xdl.FileSystem.openProjectInEditorAsync(this.props.projectRoot).catch(err => {
        console.error(err);
      });
    };

    this._simulatorIOSAsync = (0, _asyncToGenerator3.default)(function* () {
      let projectUrl = yield _this._simulatorProjectUrlAsync();
      return yield _xdl.Simulator.openUrlInSimulatorSafeAsync(projectUrl);
    });
    this._simulatorAndroidAsync = (0, _asyncToGenerator3.default)(function* () {
      return yield _xdl.Android.openProjectAsync(_this.props.projectRoot);
    });
    this._simulatorProjectUrlAsync = (0, _asyncToGenerator3.default)(function* () {
      return _xdl.UrlUtils.constructManifestUrlAsync(_this.props.projectRoot, {
        hostType: 'localhost',
        dev: _this.props.projectSettings.dev,
        minify: _this.props.projectSettings.minify
      });
    });
    this.state = {
      shiftSelected: false
    };
  }

  componentDidMount() {
    document.body.addEventListener('keydown', this._onKeyDown);
    document.body.addEventListener('keyup', this._onKeyUp);
  }

  componentWillUnmount() {
    document.body.removeEventListener('keydown', this._onKeyDown);
    document.body.removeEventListener('keyup', this._onKeyUp);
  }

  _renderPopoverProject() {
    if (this.props.openPopover !== _Constants.PopoverEnum.PROJECT) {
      return null;
    }
    return _react2.default.createElement(
      'div',
      null,
      _react2.default.createElement(_MenuItem2.default, {
        label: 'New Project',
        shortcut: 'N',
        onClick: this.props.onNewProjectClick
      }),
      _react2.default.createElement(_MenuItem2.default, {
        label: 'Open Project',
        shortcut: 'O',
        onClick: this.props.onOpenProjectClick
      }),
      _react2.default.createElement(_MenuItem2.default, {
        label: 'Close Project',
        isDisabled: !this.props.isProjectOpen,
        onClick: this.props.onCloseProjectClick
      }),
      this._renderOpenLinks()
    );
  }

  _renderOpenLinks() {
    if (process.platform === 'darwin' || process.platform === 'win32') {
      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(_MenuSeparator2.default, null),
        _react2.default.createElement(_MenuItem2.default, {
          label: _xdl.FileSystem.openFolderName(),
          isDisabled: !this.props.isProjectOpen,
          onClick: this._onShowInFinderClick
        }),
        _react2.default.createElement(_MenuItem2.default, {
          label: _xdl.FileSystem.openConsoleName(),
          isDisabled: !this.props.isProjectOpen,
          onClick: this._onOpenInTerminalClick
        }),
        process.platform === 'darwin' ? _react2.default.createElement(_MenuItem2.default, {
          label: 'Open in Editor',
          isDisabled: !this.props.isProjectOpen,
          onClick: this._onOpenInEditorClick
        }) : null
      );
    } else {
      return null;
    }
  }

  _renderPopoverHelp() {
    if (this.props.openPopover !== _Constants.PopoverEnum.HELP) {
      return null;
    }
    return _react2.default.createElement(
      'div',
      null,
      _react2.default.createElement(_MenuItem2.default, {
        label: 'Exponent Docs',
        onClick: this.props.onDocsClicked
      }),
      _react2.default.createElement(_MenuItem2.default, {
        label: 'Join Us On Slack',
        onClick: this.props.onJoinUsOnSlackClicked
      }),
      _react2.default.createElement(_MenuItem2.default, {
        label: 'Chat with Us On Intercom',
        onClick: this.props.onChatWithUsOnIntercomClicked
      }),
      _react2.default.createElement(_MenuItem2.default, {
        label: 'Send Diagnostics Report',
        onClick: this.props.onSendDiagnosticsReportClicked
      }),
      _react2.default.createElement(_MenuItem2.default, {
        label: 'Clear XDE Cache',
        onClick: this.props.onClearXDECacheClicked
      })
    );
  }

  _renderPopoverSendLink() {
    if (this.props.openPopover !== _Constants.PopoverEnum.SEND_LINK) {
      return null;
    }
    return _react2.default.createElement(
      'div',
      { onClick: this._onMenuClick },
      _react2.default.createElement('input', {
        className: (0, _aphrodite.css)(styles.sendLinkInput),
        ref: r => {
          this._sendLinkInput = r;
        },
        defaultValue: this.props.sendTo,
        placeholder: 'Email or phone'
      }),
      _react2.default.createElement(
        'a',
        {
          onClick: this._onSendLinkClick,
          className: (0, _aphrodite.css)(styles.sendLinkSubmit) },
        'Send Link'
      )
    );
  }

  _renderPopoverSimulator() {
    if (this.props.openPopover !== _Constants.PopoverEnum.DEVICE) {
      return null;
    }
    return _react2.default.createElement(
      'div',
      null,
      _xdl.Simulator.isPlatformSupported() && _react2.default.createElement(_MenuItem2.default, {
        label: 'Open on iOS Simulator',
        shortcut: 'I',
        onClick: this._simulatorIOSAsync
      }),
      _xdl.Android.isPlatformSupported() && _react2.default.createElement(_MenuItem2.default, {
        label: 'Open on Android',
        shortcut: 'D',
        onClick: this._simulatorAndroidAsync
      })
    );
  }

  _renderUserName() {
    const popoverBodyEl = _react2.default.createElement(
      'div',
      null,
      _react2.default.createElement(_MenuItem2.default, { label: 'Log out', onClick: this._onLogOutClick })
    );
    const userNameEl = _react2.default.createElement(
      'a',
      {
        className: (0, _aphrodite.css)(styles.userName),
        onClick: this._getTogglePopoverFn(_Constants.PopoverEnum.USER) },
      this.props.userName
    );
    const userNameWithPopoverEl = _react2.default.createElement(
      _Popover2.default,
      { arrowOffset: 10, isToLeft: true, body: popoverBodyEl },
      userNameEl
    );

    return this.props.openPopover === _Constants.PopoverEnum.USER ? userNameWithPopoverEl : userNameEl;
  }

  render() {
    const iconUrl = this.props.projectJson && this.props.projectJson.icon;
    const projectName = this.props.projectJson && this.props.projectJson.name || this.props.projectRoot;

    return _react2.default.createElement(
      'div',
      null,
      _react2.default.createElement(
        'div',
        { className: (0, _aphrodite.css)(styles.row) },
        _react2.default.createElement(
          'div',
          { className: (0, _aphrodite.css)(styles.leftCol) },
          _react2.default.createElement(_ProjectIcon2.default, { iconUrl: iconUrl }),
          _react2.default.createElement(
            'div',
            { className: (0, _aphrodite.css)(styles.projectName) },
            projectName
          )
        ),
        _react2.default.createElement(
          'div',
          { className: (0, _aphrodite.css)(styles.rightCol) },
          this._renderUserName()
        )
      ),
      _react2.default.createElement('div', { className: (0, _aphrodite.css)(styles.separator) }),
      _react2.default.createElement(
        'div',
        { className: (0, _aphrodite.css)(styles.row) },
        _react2.default.createElement(
          'div',
          { className: (0, _aphrodite.css)(styles.leftCol) },
          _react2.default.createElement(_IconButton2.default, {
            iconUrl: './IconBolt.png',
            label: 'Project',
            color: '#8309e0',
            onClick: this._getTogglePopoverFn(_Constants.PopoverEnum.PROJECT),
            popover: this._renderPopoverProject(),
            styles: styles.rightSpaced
          }),
          _react2.default.createElement(_IconButton2.default, {
            iconUrl: './IconRestart.png',
            label: 'Restart',
            color: '#328CE9',
            isDisabled: !this.props.isProjectOpen,
            onClick: this._restartClicked,
            styles: styles.rightSpaced
          }),
          _react2.default.createElement(_IconButton2.default, {
            iconUrl: './IconHelp.png',
            label: 'Help',
            color: '#383D40',
            onClick: this._getTogglePopoverFn(_Constants.PopoverEnum.HELP),
            popover: this._renderPopoverHelp(),
            styles: styles.rightSpaced
          })
        ),
        _react2.default.createElement(
          'div',
          { className: (0, _aphrodite.css)(styles.rightCol) },
          _react2.default.createElement(_IconButton2.default, {
            iconUrl: './IconArrowUp.png',
            label: 'Publish',
            color: '#18B405',
            isDisabled: !this.props.isProjectRunning,
            onClick: this.props.onPublishClick,
            styles: styles.rightSpaced
          }),
          _react2.default.createElement(_IconButton2.default, {
            iconUrl: './IconArrowRight.png',
            label: 'Send Link',
            color: '#383D40',
            isDisabled: !this.props.isProjectRunning,
            onClick: this._getTogglePopoverFn(_Constants.PopoverEnum.SEND_LINK),
            popover: this._renderPopoverSendLink(),
            isPopoverToLeft: true,
            styles: styles.rightSpaced
          }),
          _react2.default.createElement(_IconButton2.default, {
            iconUrl: './IconPhone.png',
            label: 'Device',
            color: '#383D40',
            isDisabled: !this.props.isProjectRunning,
            onClick: this._getTogglePopoverFn(_Constants.PopoverEnum.DEVICE),
            popover: this._renderPopoverSimulator(),
            isPopoverToLeft: true
          })
        )
      )
    );
  }

  // File system methods

  // Simulator methods

};
ToolBar.propTypes = {
  isProjectOpen: _react.PropTypes.bool,
  isProjectRunning: _react.PropTypes.bool,
  openPopover: _react.PropTypes.oneOf((0, _keys2.default)(_Constants.PopoverEnum).map(k => _Constants.PopoverEnum[k])),
  onTogglePopover: _react.PropTypes.func.isRequired,
  projectJson: _react.PropTypes.object,
  projectRoot: _react.PropTypes.string,
  projectSettings: _react.PropTypes.object,
  sendTo: _react.PropTypes.string,
  userName: _react.PropTypes.string,

  onAppendErrors: _react.PropTypes.func,
  onAppendLogs: _react.PropTypes.func,
  onLogOut: _react.PropTypes.func,
  onNewProjectClick: _react.PropTypes.func,
  onOpenProjectClick: _react.PropTypes.func,
  onCloseProjectClick: _react.PropTypes.func,
  onPublishClick: _react.PropTypes.func,
  onRestartClick: _react.PropTypes.func,
  onSendLinkClick: _react.PropTypes.func,
  onDocsClicked: _react.PropTypes.func,
  onJoinUsOnSlackClicked: _react.PropTypes.func,
  onChatWithUsOnIntercomClicked: _react.PropTypes.func,
  onSendDiagnosticsReportClicked: _react.PropTypes.func,
  onClearXDECacheClicked: _react.PropTypes.func
};
exports.default = ToolBar;


const styles = _aphrodite.StyleSheet.create({
  separator: {
    borderTop: `1px solid ${ _StyleConstants2.default.colorBorder }`,
    marginTop: _StyleConstants2.default.gutterLg,
    marginBottom: _StyleConstants2.default.gutterLg
  },
  row: {
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'space-between'
  },
  leftCol: {
    flex: 1
  },
  rightCol: {
    flex: 1,
    textAlign: 'right'
  },
  rightSpaced: {
    marginRight: _StyleConstants2.default.gutterLg
  },
  projectName: {
    color: _StyleConstants2.default.colorText,
    display: 'inline-block',
    fontSize: _StyleConstants2.default.fontSizeLg,
    marginLeft: _StyleConstants2.default.gutterMd,
    verticalAlign: 'middle'
  },
  userName: {
    color: _StyleConstants2.default.colorSubtitle,
    cursor: 'pointer',
    fontSize: _StyleConstants2.default.fontSizeMd,
    textDecoration: 'none'
  },
  sendLinkInput: {
    border: 'none',
    color: _StyleConstants2.default.colorSubtitle,
    display: 'block',
    fontSize: _StyleConstants2.default.fontSizeMd,
    marginLeft: 'auto',
    marginRight: 'auto',
    marginBottom: _StyleConstants2.default.gutterMd,
    padding: _StyleConstants2.default.gutterSm,
    textAlign: 'center'
  },
  sendLinkSubmit: {
    cursor: 'pointer',
    display: 'block',
    borderTop: `1px solid ${ _StyleConstants2.default.colorBorder }`,
    paddingTop: _StyleConstants2.default.gutterMd,
    paddingRight: _StyleConstants2.default.gutterMd,
    paddingLeft: _StyleConstants2.default.gutterMd,
    textAlign: 'center',
    textDecoration: 'none',

    backgroundColor: 'white',
    color: '#328CE9',
    ':active': {
      backgroundColor: _StyleConstants2.default.colorBackground,
      color: '#08509A'
    }
  }
});
//# sourceMappingURL=../../__sourcemaps__/ui/toolbar/ToolBar.js.map
